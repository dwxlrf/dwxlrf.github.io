import{_ as e,c as r,a2 as l,o as t}from"./chunks/framework.DPuwY6B9.js";const o="/assets/1600160738931-5c7ff422-69a2-4ae2-9961-405b7b1fcd0c.CTI7D16X.png",i="/assets/1600160765721-85b72e4c-4805-49b8-b578-c9b761dd475d.Z_YL7UwG.png",s="/assets/1600160794411-a14e82d6-6186-4898-ba7b-772e008d2a58.w9hmjwyd.png",n="/assets/1600160821570-246a88a6-32e7-4a94-91b2-67eabff517a7.8MT1xbAw.png",p="/assets/1600160851756-3163c38a-ba9e-4d75-9231-b678dc0929bc.DhS5b41X.png",c="/assets/1600160910427-3c907cbf-83a2-4135-a237-21209701da21.si1-ympC.png",h="/assets/1600160933143-9a331fc1-4e6a-4ec6-b0aa-c6526aaed9ba.mXDOKvuZ.png",d="/assets/1600160969736-0a56e7b3-4856-4e8c-8676-5adb57af0a20.CcOuSMun.png",u="/assets/1600160994574-ef6f24d1-4d93-4b96-9164-5aec15f33fc6.CQMaudTw.png",g="/assets/1600161103822-ec3d9e15-256a-4281-bcf0-149e221ed688.D0Dwyian.png",v="/assets/1600161131593-8dcc85e2-d68a-438e-913a-9a6e444fdd2e.DISyEdav.png",m="/assets/1600161166700-69fdf59c-ef57-446d-974b-a8bbee1ff722.BoR_pPu-.png",b="/assets/1600161244282-6dc0443e-6ab6-4cb7-800b-52697918985b.BAOXGyKQ.png",_="/assets/1600161319557-e587720f-453c-44be-a9fd-9980491db6b6.B5aHvhpx.png",x=JSON.parse('{"title":"Java JVM深入理解","description":"","frontmatter":{},"headers":[],"relativePath":"Java/JavaJVM深入理解.md","filePath":"Java/JavaJVM深入理解.md"}'),J={name:"Java/JavaJVM深入理解.md"};function q(f,a,C,P,S,M){return t(),r("div",null,a[0]||(a[0]=[l('<h1 id="java-jvm深入理解" tabindex="-1">Java JVM深入理解 <a class="header-anchor" href="#java-jvm深入理解" aria-label="Permalink to &quot;Java JVM深入理解&quot;">​</a></h1><h2 id="一、java内存区域" tabindex="-1">一、Java内存区域 <a class="header-anchor" href="#一、java内存区域" aria-label="Permalink to &quot;一、Java内存区域&quot;">​</a></h2><h3 id="_1-jvm-的主要组成部分及其作用" tabindex="-1">1 JVM 的主要组成部分及其作用？ <a class="header-anchor" href="#_1-jvm-的主要组成部分及其作用" aria-label="Permalink to &quot;1 JVM 的主要组成部分及其作用？&quot;">​</a></h3><p><img src="'+o+'" alt="img"></p><p>JVM包含两个子系统和两个组件，两个子系统为Class loader(类装载)、Execution engine(执行引擎)；两个组件为Runtime data area(运行时数据区)、Native Interface(本地接口)。</p><ul><li>Class loader(类装载)：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到Runtime data area中的method area。</li><li>Execution engine（执行引擎）：执行classes中的指令。</li><li>Native Interface(本地接口)：与native libraries交互，是其它编程语言交互的接口。</li><li>Runtime data area(运行时数据区域)：这就是我们常说的JVM的内存。</li></ul><p><strong>作用</strong> ：首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p><p><strong>下面是Java程序运行机制详细说明</strong></p><p>Java程序运行机制步骤</p><ul><li>首先利用IDE集成开发工具编写Java源代码，源文件的后缀为.java；</li><li>再利用编译器(javac命令)将源代码编译成字节码文件，字节码文件的后缀名为.class；</li><li>运行字节码的工作是由解释器(java命令)来完成的。</li></ul><p><img src="'+i+'" alt="img"></p><p>从上图可以看，java文件通过编译器变成了.class文件，接下来类加载器又将这些.class文件加载到JVM中。</p><p>其实可以一句话来解释：类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class对象，用来封装类在方法区内的数据结构。</p><h3 id="_2-jvm-运行时数据区" tabindex="-1">2 JVM 运行时数据区 <a class="header-anchor" href="#_2-jvm-运行时数据区" aria-label="Permalink to &quot;2  JVM 运行时数据区&quot;">​</a></h3><p><strong>Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存区域划分为若干个不同的数据区域</strong>。这些区域都有各自的用途，以及创建和销毁的时间，有些区域随着虚拟机进程的启动而存在，有些区域则是依赖线程的启动和结束而建立和销毁。Java 虚拟机所管理的内存被划分为如下几个区域：</p><p><img src="'+s+'" alt="img"></p><p>不同虚拟机的运行时数据区可能略微有所不同，但都会遵从 Java 虚拟机规范， Java 虚拟机规范规定的区域分为以下 5 个部分：</p><ul><li>程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成；</li><li>Java 虚拟机栈（Java Virtual Machine Stacks）：用于存储局部变量表、操作数栈、动态链接、方法出口等信息；</li><li>本地方法栈（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的；</li><li>Java 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；</li><li>方法区（Methed Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</li></ul><h3 id="_3-深拷贝和浅拷贝" tabindex="-1">3 深拷贝和浅拷贝 <a class="header-anchor" href="#_3-深拷贝和浅拷贝" aria-label="Permalink to &quot;3 深拷贝和浅拷贝&quot;">​</a></h3><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，</p><p>深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，</p><p>使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误。</p><p>浅复制：仅仅是指向被复制的内存地址，如果原地址发生改变，那么浅复制出来的对象也会相应的改变。</p><p>深复制：在计算机中开辟一块<strong>新的内存地址</strong>用于存放复制的对象。</p><h3 id="_4-说一下堆栈的区别" tabindex="-1">4 说一下堆栈的区别？ <a class="header-anchor" href="#_4-说一下堆栈的区别" aria-label="Permalink to &quot;4 说一下堆栈的区别？&quot;">​</a></h3><p>物理地址</p><p>堆的物理地址分配对对象是不连续的。因此性能慢些。在GC的时候也要考虑到不连续的分配，所以有各种算法。比如，标记-消除，复制，标记-压缩，分代（即新生代使用复制算法，老年代使用标记——压缩）</p><p>栈使用的是数据结构中的栈，先进后出的原则，物理地址分配是连续的。所以性能快。</p><p>内存分别</p><p>堆因为是不连续的，所以分配的内存是在<code>运行期</code>确认的，因此大小不固定。一般堆大小远远大于栈。</p><p>栈是连续的，所以分配的内存大小要在<code>编译期</code>就确认，大小是固定的。</p><p>存放的内容</p><p>堆存放的是对象的实例和数组。因此该区更关注的是数据的存储</p><p>栈存放：局部变量，操作数栈，返回结果。该区更关注的是程序方法的执行。</p><p>PS：</p><ol><li>静态变量放在方法区</li><li>静态的对象还是放在堆。</li></ol><p>程序的可见度</p><p>堆对于整个应用程序都是共享、可见的。</p><p>栈只对于线程是可见的。所以也是线程私有。他的生命周期和线程相同。</p><h3 id="_5-队列和栈是什么-有什么区别" tabindex="-1">5 队列和栈是什么？有什么区别？ <a class="header-anchor" href="#_5-队列和栈是什么-有什么区别" aria-label="Permalink to &quot;5 队列和栈是什么？有什么区别？&quot;">​</a></h3><p>队列和栈都是被用来预存储数据的。</p><ul><li>操作的名称不同。队列的插入称为入队，队列的删除称为出队。栈的插入称为进栈，栈的删除称为出栈。</li><li>可操作的方式不同。队列是在队尾入队，队头出队，即两边都可操作。而栈的进栈和出栈都是在栈顶进行的，无法对栈底直接进行操作。</li><li>操作的方法不同。队列是先进先出（FIFO），即队列的修改是依先进先出的原则进行的。新来的成员总是加入队尾（不能从中间插入），每次离开的成员总是队列头上（不允许中途离队）。而栈为后进先出（LIFO）,即每次删除（出栈）的总是当前栈中最新的元素，即最后插入（进栈）的元素，而最先插入的被放在栈的底部，要到最后才能删除。</li></ul><h2 id="二、hotspot虚拟机对象探秘" tabindex="-1">二、HotSpot虚拟机对象探秘 <a class="header-anchor" href="#二、hotspot虚拟机对象探秘" aria-label="Permalink to &quot;二、HotSpot虚拟机对象探秘&quot;">​</a></h2><h3 id="_1-对象的创建" tabindex="-1">1 对象的创建 <a class="header-anchor" href="#_1-对象的创建" aria-label="Permalink to &quot;1 对象的创建&quot;">​</a></h3><p>说到对象的创建，首先让我们看看 <code>Java</code> 中提供的几种对象创建方式：</p><p><img src="'+n+'" alt="img"></p><p>下面是对象创建的主要流程:</p><p><img src="'+p+'" alt="img"></p><p>虚拟机遇到一条new指令时，先检查常量池是否已经加载相应的类，如果没有，必须先执行相应的类加载。类加载通过后，接下来分配内存。若Java堆中内存是绝对规整的，使用“指针碰撞“方式分配内存；如果不是规整的，就从空闲列表中分配，叫做”空闲列表“方式。划分内存时还需要考虑一个问题-并发，也有两种方式: CAS同步处理，或者本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)。然后内存空间初始化操作，接着是做一些必要的对象设置(元信息、哈希码…)，最后执行<code>&lt;init&gt;</code>方法。</p><h3 id="_2-为对象分配内存" tabindex="-1">2 为对象分配内存 <a class="header-anchor" href="#_2-为对象分配内存" aria-label="Permalink to &quot;2 为对象分配内存&quot;">​</a></h3><p>类加载完成后，接着会在Java堆中划分一块内存分配给对象。内存分配根据Java堆是否规整，有两种方式：</p><ul><li>指针碰撞：如果Java堆的内存是规整，即所有用过的内存放在一边，而空闲的的放在另一边。分配内存时将位于中间的指针指示器向空闲的内存移动一段与对象大小相等的距离，这样便完成分配内存工作。</li><li>空闲列表：如果Java堆的内存不是规整的，则需要由虚拟机维护一个列表来记录那些内存是可用的，这样在分配的时候可以从列表中查询到足够大的内存分配给对象，并在分配后更新列表记录。</li></ul><p>选择哪种分配方式是由 Java 堆是否规整来决定的，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><p><img src="'+c+'" alt="img"></p><h3 id="_3-处理并发安全问题" tabindex="-1">3 处理并发安全问题 <a class="header-anchor" href="#_3-处理并发安全问题" aria-label="Permalink to &quot;3 处理并发安全问题&quot;">​</a></h3><p>对象的创建在虚拟机中是一个非常频繁的行为，哪怕只是修改一个指针所指向的位置，在并发情况下也是不安全的，可能出现正在给对象 A 分配内存，指针还没来得及修改，对象 B 又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案：</p><ul><li>对分配内存空间的动作进行同步处理（采用 CAS + 失败重试来保障更新操作的原子性）；</li><li>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer, TLAB）。哪个线程要分配内存，就在哪个线程的 TLAB 上分配。只有 TLAB 用完并分配新的 TLAB 时，才需要同步锁。通过-XX:+/-UserTLAB参数来设定虚拟机是否使用TLAB。</li></ul><p><img src="'+h+'" alt="img"></p><h3 id="_4-对象的访问定位" tabindex="-1">4 对象的访问定位 <a class="header-anchor" href="#_4-对象的访问定位" aria-label="Permalink to &quot;4 对象的访问定位&quot;">​</a></h3><p><code>Java</code>程序需要通过 <code>JVM</code> 栈上的引用访问堆中的具体对象。对象的访问方式取决于 <code>JVM</code> 虚拟机的实现。目前主流的访问方式有 <strong>句柄</strong> 和 <strong>直接指针</strong> 两种方式。</p><p><strong>指针：</strong> 指向对象，代表一个对象在内存中的起始地址。</p><p><strong>句柄：</strong> 可以理解为指向指针的指针，维护着对象的指针。句柄不直接指向对象，而是指向对象的指针（句柄不发生变化，指向固定内存地址），再由对象的指针指向对象的真实内存地址。</p><h4 id="_4-1-句柄访问" tabindex="-1">4.1 句柄访问 <a class="header-anchor" href="#_4-1-句柄访问" aria-label="Permalink to &quot;4.1 句柄访问&quot;">​</a></h4><p><code>Java</code>堆中划分出一块内存来作为<strong>句柄池</strong>，引用中存储对象的<strong>句柄地址</strong>，而句柄中包含了<strong>对象实例数据</strong>与<strong>对象类型数据</strong>各自的<strong>具体地址</strong>信息，具体构造如下图所示：</p><p><img src="'+d+'" alt="img"></p><p><strong>优势</strong>：引用中存储的是<strong>稳定</strong>的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变<strong>句柄中</strong>的<strong>实例数据指针</strong>，而<strong>引用</strong>本身不需要修改。</p><h4 id="_4-2-直接指针" tabindex="-1">4.2 直接指针 <a class="header-anchor" href="#_4-2-直接指针" aria-label="Permalink to &quot;4.2 直接指针&quot;">​</a></h4><p>如果使用<strong>直接指针</strong>访问，<strong>引用</strong> 中存储的直接就是<strong>对象地址</strong>，那么<code>Java</code>堆对象内部的布局中就必须考虑如何放置访问<strong>类型数据</strong>的相关信息。</p><p><img src="'+u+'" alt="img"></p><p><strong>优势</strong>：速度更<strong>快</strong>，节省了<strong>一次指针定位</strong>的时间开销。由于对象的访问在<code>Java</code>中非常频繁，因此这类开销积少成多后也是非常可观的执行成本。HotSpot 中采用的就是这种方式。</p><h2 id="三、内存溢出异常" tabindex="-1">三、内存溢出异常 <a class="header-anchor" href="#三、内存溢出异常" aria-label="Permalink to &quot;三、内存溢出异常&quot;">​</a></h2><h3 id="_1-java会存在内存泄漏吗-请简单描述" tabindex="-1">1 Java会存在内存泄漏吗？请简单描述 <a class="header-anchor" href="#_1-java会存在内存泄漏吗-请简单描述" aria-label="Permalink to &quot;1 Java会存在内存泄漏吗？请简单描述&quot;">​</a></h3><p>内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。理论上来说，Java是有GC垃圾回收机制的，也就是说，不再被使用的对象，会被GC自动回收掉，自动从内存中清除。</p><p>但是，即使这样，Java也还是存在着内存泄漏的情况，java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。</p><h2 id="四、垃圾收集器" tabindex="-1">四、垃圾收集器 <a class="header-anchor" href="#四、垃圾收集器" aria-label="Permalink to &quot;四、垃圾收集器&quot;">​</a></h2><h3 id="_1-简述java垃圾回收机制" tabindex="-1">1 简述Java垃圾回收机制 <a class="header-anchor" href="#_1-简述java垃圾回收机制" aria-label="Permalink to &quot;1 简述Java垃圾回收机制&quot;">​</a></h3><p>在java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。</p><h3 id="_2-gc是什么-为什么要gc" tabindex="-1">2 GC是什么？为什么要GC <a class="header-anchor" href="#_2-gc是什么-为什么要gc" aria-label="Permalink to &quot;2 GC是什么？为什么要GC&quot;">​</a></h3><p>GC 是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存</p><p>回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动</p><p>回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。</p><h3 id="_3-垃圾回收的优点和原理。并考虑2种回收机制" tabindex="-1">3 垃圾回收的优点和原理。并考虑2种回收机制 <a class="header-anchor" href="#_3-垃圾回收的优点和原理。并考虑2种回收机制" aria-label="Permalink to &quot;3 垃圾回收的优点和原理。并考虑2种回收机制&quot;">​</a></h3><p>java语言最显著的特点就是引入了垃圾回收机制，它使java程序员在编写程序时不再考虑内存管理的问题。</p><p>由于有这个垃圾回收机制，java中的对象不再有“作用域”的概念，只有引用的对象才有“作用域”。</p><p>垃圾回收机制有效的防止了内存泄露，可以有效的使用可使用的内存。</p><p>垃圾回收器通常作为一个单独的低级别的线程运行，在不可预知的情况下对内存堆中已经死亡的或很长时间没有用过的对象进行清除和回收。</p><p>程序员不能实时的对某个对象或所有对象调用垃圾回收器进行垃圾回收。</p><p>垃圾回收有分代复制垃圾回收、标记垃圾回收、增量垃圾回收。</p><h3 id="_4-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" tabindex="-1">4 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？ <a class="header-anchor" href="#_4-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" aria-label="Permalink to &quot;4 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？&quot;">​</a></h3><p>对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。</p><p>通常，GC采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是&quot;可达的&quot;，哪些对象是&quot;不可达的&quot;。当GC确定一些对象为&quot;不可达&quot;时，GC就有责任回收这些内存空间。</p><p>可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。</p><h3 id="_5-java-中都有哪些引用类型" tabindex="-1">5 Java 中都有哪些引用类型？ <a class="header-anchor" href="#_5-java-中都有哪些引用类型" aria-label="Permalink to &quot;5 Java 中都有哪些引用类型？&quot;">​</a></h3><ul><li>强引用：发生 gc 的时候不会被回收。</li><li>软引用：有用但不是必须的对象，在发生内存溢出之前会被回收。</li><li>弱引用：有用但不是必须的对象，在下一次GC时会被回收。</li><li>虚引用（幽灵引用/幻影引用）：无法通过虚引用获得对象，用 PhantomReference 实现虚引用，虚引用的用途是在 gc 时返回一个通知。</li></ul><h3 id="_6-怎么判断对象是否可以被回收" tabindex="-1">6 怎么判断对象是否可以被回收？ <a class="header-anchor" href="#_6-怎么判断对象是否可以被回收" aria-label="Permalink to &quot;6 怎么判断对象是否可以被回收？&quot;">​</a></h3><p>垃圾收集器在做垃圾回收的时候，首先需要判定的就是哪些内存是需要被回收的，哪些对象是「存活」的，是不可以被回收的；哪些对象已经「死掉」了，需要被回收。</p><p>一般有两种方法来判断：</p><ul><li>引用计数器法：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</li><li>可达性分析算法：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</li></ul><h3 id="_7-在java中-对象什么时候可以被垃圾回收" tabindex="-1">7 在Java中，对象什么时候可以被垃圾回收 <a class="header-anchor" href="#_7-在java中-对象什么时候可以被垃圾回收" aria-label="Permalink to &quot;7 在Java中，对象什么时候可以被垃圾回收&quot;">​</a></h3><p>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。</p><p>垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。</p><h3 id="_8-jvm中的永久代中会发生垃圾回收吗" tabindex="-1">8 JVM中的永久代中会发生垃圾回收吗 <a class="header-anchor" href="#_8-jvm中的永久代中会发生垃圾回收吗" aria-label="Permalink to &quot;8 JVM中的永久代中会发生垃圾回收吗&quot;">​</a></h3><p>垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。请参考下Java8：从永久代到元数据区</p><p>(译者注：Java8中已经移除了永久代，新加了一个叫做元数据区的native内存区)</p><h3 id="_9-说一下-jvm-有哪些垃圾回收算法" tabindex="-1">9 说一下 JVM 有哪些垃圾回收算法？ <a class="header-anchor" href="#_9-说一下-jvm-有哪些垃圾回收算法" aria-label="Permalink to &quot;9 说一下 JVM 有哪些垃圾回收算法？&quot;">​</a></h3><ul><li>标记-清除算法：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。</li><li>复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半。</li><li>标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。</li><li>分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。</li></ul><h4 id="_9-1-标记-清除算法" tabindex="-1">9.1 标记-清除算法 <a class="header-anchor" href="#_9-1-标记-清除算法" aria-label="Permalink to &quot;9.1 标记-清除算法&quot;">​</a></h4><p>标记无用对象，然后进行清除回收。</p><p>标记-清除算法（Mark-Sweep）是一种常见的基础垃圾收集算法，它将垃圾收集分为两个阶段：</p><ul><li>标记阶段：标记出可以回收的对象。</li><li>清除阶段：回收被标记的对象所占用的空间。</li></ul><p>标记-清除算法之所以是基础的，是因为后面讲到的垃圾收集算法都是在此算法的基础上进行改进的。</p><p><strong>优点</strong>：实现简单，不需要对象进行移动。</p><p><strong>缺点</strong>：标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率。</p><p>标记-清除算法的执行的过程如下图所示</p><p><img src="'+g+'" alt="img"></p><h4 id="_9-2-复制算法" tabindex="-1">9.2 复制算法 <a class="header-anchor" href="#_9-2-复制算法" aria-label="Permalink to &quot;9.2 复制算法&quot;">​</a></h4><p>为了解决标记-清除算法的效率不高的问题，产生了复制算法。它把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾收集时，遍历当前使用的区域，把存活对象复制到另外一个区域中，最后将当前使用的区域的可回收的对象进行回收。</p><p><strong>优点</strong>：按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。</p><p><strong>缺点</strong>：可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。</p><p>复制算法的执行过程如下图所示</p><p><img src="'+v+'" alt="img"></p><h4 id="_9-3-标记-整理算法" tabindex="-1">9.3 标记-整理算法 <a class="header-anchor" href="#_9-3-标记-整理算法" aria-label="Permalink to &quot;9.3 标记-整理算法&quot;">​</a></h4><p>在新生代中可以使用复制算法，但是在老年代就不能选择复制算法了，因为老年代的对象存活率会较高，这样会有较多的复制操作，导致效率变低。标记-清除算法可以应用在老年代中，但是它效率不高，在内存回收后容易产生大量内存碎片。因此就出现了一种标记-整理算法（Mark-Compact）算法，与标记-整理算法不同的是，在标记可回收的对象后将所有存活的对象压缩到内存的一端，使他们紧凑的排列在一起，然后对端边界以外的内存进行回收。回收后，已用和未用的内存都各自一边。</p><p><strong>优点</strong>：解决了标记-清理算法存在的内存碎片问题。</p><p><strong>缺点</strong>：仍需要进行局部对象移动，一定程度上降低了效率。</p><p>标记-整理算法的执行过程如下图所示</p><p><img src="'+m+'" alt="img"></p><h4 id="_9-4-分代收集算法" tabindex="-1">9.4 分代收集算法 <a class="header-anchor" href="#_9-4-分代收集算法" aria-label="Permalink to &quot;9.4 分代收集算法&quot;">​</a></h4><p>当前商业虚拟机都采用<strong>分代收集</strong>的垃圾收集算法。分代收集算法，顾名思义是根据对象的<strong>存活周期</strong>将内存划分为几块。一般包括<strong>年轻代</strong>、<strong>老年代</strong> 和 <strong>永久代</strong>，如图所示：</p><p><img src="'+b+'" alt="img"></p><h3 id="_10-jvm-有哪些垃圾回收器" tabindex="-1">10 JVM 有哪些垃圾回收器？ <a class="header-anchor" href="#_10-jvm-有哪些垃圾回收器" aria-label="Permalink to &quot;10 JVM 有哪些垃圾回收器？&quot;">​</a></h3><p>如果说垃圾收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。下图展示了7种作用于不同分代的收集器，其中用于回收新生代的收集器包括Serial、PraNew、Parallel Scavenge，回收老年代的收集器包括Serial Old、Parallel Old、CMS，还有用于回收整个Java堆的G1收集器。不同收集器之间的连线表示它们可以搭配使用。</p><p><img src="'+_+'" alt="img"></p><ul><li>Serial收集器（复制算法): 新生代单线程收集器，标记和清理都是单线程，优点是简单高效；</li><li>ParNew收集器 (复制算法): 新生代收并行集器，实际上是Serial收集器的多线程版本，在多核CPU环境下有着比Serial更好的表现；</li><li>Parallel Scavenge收集器 (复制算法): 新生代并行收集器，追求高吞吐量，高效利用 CPU。吞吐量 = 用户线程时间/(用户线程时间+GC线程时间)，高吞吐量可以高效率的利用CPU时间，尽快完成程序的运算任务，适合后台应用等对交互相应要求不高的场景；</li><li>Serial Old收集器 (标记-整理算法): 老年代单线程收集器，Serial收集器的老年代版本；</li><li>Parallel Old收集器 (标记-整理算法)： 老年代并行收集器，吞吐量优先，Parallel Scavenge收集器的老年代版本；</li><li>CMS(Concurrent Mark Sweep)收集器（标记-清除算法）： 老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短GC回收停顿时间。</li><li>G1(Garbage First)收集器 (标记-整理算法)： Java堆并行收集器，G1收集器是JDK1.7提供的一个新收集器，G1收集器基于“标记-整理”算法实现，也就是说不会产生内存碎片。此外，G1收集器不同于之前的收集器的一个重要特点是：G1回收的范围是整个Java堆(包括新生代，老年代)，而前六种收集器回收的范围仅限于新生代或老年代。</li></ul><h3 id="_11-详细介绍一下-cms-垃圾回收器" tabindex="-1">11 详细介绍一下 CMS 垃圾回收器？ <a class="header-anchor" href="#_11-详细介绍一下-cms-垃圾回收器" aria-label="Permalink to &quot;11 详细介绍一下 CMS 垃圾回收器？&quot;">​</a></h3><p>CMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。</p><p>CMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。</p><h3 id="_12-新生代垃圾回收器和老年代垃圾回收器都有哪些-有什么区别" tabindex="-1">12 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？ <a class="header-anchor" href="#_12-新生代垃圾回收器和老年代垃圾回收器都有哪些-有什么区别" aria-label="Permalink to &quot;12 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？&quot;">​</a></h3><ul><li>新生代回收器：Serial、ParNew、Parallel Scavenge</li><li>老年代回收器：Serial Old、Parallel Old、CMS</li><li>整堆回收器：G1</li></ul><p>新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。</p><h3 id="_13-简述分代垃圾回收器是怎么工作的" tabindex="-1">13 简述分代垃圾回收器是怎么工作的？ <a class="header-anchor" href="#_13-简述分代垃圾回收器是怎么工作的" aria-label="Permalink to &quot;13 简述分代垃圾回收器是怎么工作的？&quot;">​</a></h3><p>分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。</p><p>新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：</p><ul><li>把 Eden + From Survivor 存活的对象放入 To Survivor 区；</li><li>清空 Eden 和 From Survivor 分区；</li><li>From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。</li></ul><p>每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。</p><p>老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。</p>',146)]))}const j=e(J,[["render",q]]);export{x as __pageData,j as default};
