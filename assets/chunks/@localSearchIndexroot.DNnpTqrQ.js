const e='{"documentCount":718,"nextId":718,"documentIds":{"0":"/Java/JavaJVM深入理解.html#java-jvm深入理解","1":"/Java/JavaJVM深入理解.html#一、java内存区域","2":"/Java/JavaJVM深入理解.html#_1-jvm-的主要组成部分及其作用","3":"/Java/JavaJVM深入理解.html#_2-jvm-运行时数据区","4":"/Java/JavaJVM深入理解.html#_3-深拷贝和浅拷贝","5":"/Java/JavaJVM深入理解.html#_4-说一下堆栈的区别","6":"/Java/JavaJVM深入理解.html#_5-队列和栈是什么-有什么区别","7":"/Java/JavaJVM深入理解.html#二、hotspot虚拟机对象探秘","8":"/Java/JavaJVM深入理解.html#_1-对象的创建","9":"/Java/JavaJVM深入理解.html#_2-为对象分配内存","10":"/Java/JavaJVM深入理解.html#_3-处理并发安全问题","11":"/Java/JavaJVM深入理解.html#_4-对象的访问定位","12":"/Java/JavaJVM深入理解.html#_4-1-句柄访问","13":"/Java/JavaJVM深入理解.html#_4-2-直接指针","14":"/Java/JavaJVM深入理解.html#三、内存溢出异常","15":"/Java/JavaJVM深入理解.html#_1-java会存在内存泄漏吗-请简单描述","16":"/Java/JavaJVM深入理解.html#四、垃圾收集器","17":"/Java/JavaJVM深入理解.html#_1-简述java垃圾回收机制","18":"/Java/JavaJVM深入理解.html#_2-gc是什么-为什么要gc","19":"/Java/JavaJVM深入理解.html#_3-垃圾回收的优点和原理。并考虑2种回收机制","20":"/Java/JavaJVM深入理解.html#_4-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收","21":"/Java/JavaJVM深入理解.html#_5-java-中都有哪些引用类型","22":"/Java/JavaJVM深入理解.html#_6-怎么判断对象是否可以被回收","23":"/Java/JavaJVM深入理解.html#_7-在java中-对象什么时候可以被垃圾回收","24":"/Java/JavaJVM深入理解.html#_8-jvm中的永久代中会发生垃圾回收吗","25":"/Java/JavaJVM深入理解.html#_9-说一下-jvm-有哪些垃圾回收算法","26":"/Java/JavaJVM深入理解.html#_9-1-标记-清除算法","27":"/Java/JavaJVM深入理解.html#_9-2-复制算法","28":"/Java/JavaJVM深入理解.html#_9-3-标记-整理算法","29":"/Java/JavaJVM深入理解.html#_9-4-分代收集算法","30":"/Java/JavaJVM深入理解.html#_10-jvm-有哪些垃圾回收器","31":"/Java/JavaJVM深入理解.html#_11-详细介绍一下-cms-垃圾回收器","32":"/Java/JavaJVM深入理解.html#_12-新生代垃圾回收器和老年代垃圾回收器都有哪些-有什么区别","33":"/Java/JavaJVM深入理解.html#_13-简述分代垃圾回收器是怎么工作的","34":"/Java/Java基础.html#java基础","35":"/Java/Java基础.html#一、java语言理解","36":"/Java/Java基础.html#_1-jvm、jre和jdk的关系","37":"/Java/Java基础.html#_2-java语言有哪些特点","38":"/Java/Java基础.html#_3-什么是字节码-采用字节码的最大好处是什么","39":"/Java/Java基础.html#_4-什么是java程序的主类-应用程序和小程序的主类有何不同","40":"/Java/Java基础.html#_5-java应用程序与小程序之间有那些差别","41":"/Java/Java基础.html#_6-java和c-的区别","42":"/Java/Java基础.html#_7-oracle-jdk-和-openjdk-的对比","43":"/Java/Java基础.html#二、java基础语法","44":"/Java/Java基础.html#_1-数据类型","45":"/Java/Java基础.html#_1-1-java有哪些数据类型","46":"/Java/Java基础.html#_1-2-switch-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上","47":"/Java/Java基础.html#_1-3-float-f-3-4-是否正确","48":"/Java/Java基础.html#_1-4-short-s1-1-s1-s1-1-有错吗","49":"/Java/Java基础.html#_2-java编码方案和特点","50":"/Java/Java基础.html#_3-访问修饰符","51":"/Java/Java基础.html#_4-运算符","52":"/Java/Java基础.html#_5-关键字","53":"/Java/Java基础.html#_5-1-final-有什么用","54":"/Java/Java基础.html#_5-2-final-finally-finalize区别","55":"/Java/Java基础.html#_5-3-this与super的区别","56":"/Java/Java基础.html#_5-4-static","57":"/Java/Java基础.html#_6-流程控制语句","58":"/Java/Java基础.html#三、面向对象","59":"/Java/Java基础.html#_1-面向对象和面向过程的区别","60":"/Java/Java基础.html#_2-面向对象三大特性","61":"/Java/Java基础.html#_2-1-什么是多态机制-java语言是如何实现多态的","62":"/Java/Java基础.html#_2-2-面向对象五大基本原则是什么","63":"/Java/Java基础.html#_3-类与接口","64":"/Java/Java基础.html#_3-1-抽象类和接口的对比","65":"/Java/Java基础.html#_3-2-普通类和抽象类有哪些区别","66":"/Java/Java基础.html#_3-3-抽象类能使用-final-修饰吗","67":"/Java/Java基础.html#_3-4-创建一个对象用什么关键字-对象实例与对象引用有何不同","68":"/Java/Java基础.html#_4-变量与方法","69":"/Java/Java基础.html#_4-1-成员变量与局部变量的区别有哪些","70":"/Java/Java基础.html#_4-2-在java中定义一个不做事且没有参数的构造方法的作用","71":"/Java/Java基础.html#_4-3-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","72":"/Java/Java基础.html#_4-4-一个类的构造方法的作用是什么-若一个类没有声明构造方法-改程序能正确执行吗-为什么","73":"/Java/Java基础.html#_4-5-构造方法有哪些特性","74":"/Java/Java基础.html#_4-6-静态变量和实例变量区别","75":"/Java/Java基础.html#_4-7-静态变量与普通变量区别","76":"/Java/Java基础.html#_4-8-静态方法和实例方法有何不同","77":"/Java/Java基础.html#_4-9-在一个静态方法内调用一个非静态成员为什么是非法的","78":"/Java/Java基础.html#_4-10-什么是方法的返回值-返回值的作用是什么","79":"/Java/Java基础.html#_5-内部类","80":"/Java/Java基础.html#_5-1-什么是内部类","81":"/Java/Java基础.html#_5-2-内部类的分类有哪些","82":"/Java/Java基础.html#_5-2-1-静态内部类","83":"/Java/Java基础.html#_5-2-2-成员内部类","84":"/Java/Java基础.html#_5-2-3-局部内部类","85":"/Java/Java基础.html#_5-2-4-匿名内部类","86":"/Java/Java基础.html#_5-3-内部类的优点","87":"/Java/Java基础.html#_5-4-内部类有哪些应用场景","88":"/Java/Java基础.html#_5-5-局部内部类和匿名内部类访问局部变量的时候-为什么变量必须要加上final","89":"/Java/Java基础.html#_5-6-内部类相关-看程序说出运行结果","90":"/Java/Java基础.html#_6-重写与重载","91":"/Java/Java基础.html#_6-1-构造器-constructor-是否可被重写-override","92":"/Java/Java基础.html#_6-2-重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分","93":"/Java/Java基础.html#_7-对象相等判断","94":"/Java/Java基础.html#_7-1-和-equals-的区别是什么","95":"/Java/Java基础.html#_7-2-hashcode-与-equals-重要","96":"/Java/Java基础.html#_7-3-对象的相等与指向他们的引用相等-两者有什么不同","97":"/Java/Java基础.html#_8-值传递","98":"/Java/Java基础.html#_8-1-当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递","99":"/Java/Java基础.html#_8-2-为什么-java-中只有值传递","100":"/Java/Java基础.html#值传递和引用传递有什么区别","101":"/Java/Java基础.html#_9-java包","102":"/Java/Java基础.html#_9-1-jdk-中常用的包有哪些","103":"/Java/Java基础.html#_9-2-import-java和javax有什么区别","104":"/Java/Java基础.html#三、io流","105":"/Java/Java基础.html#_1-java-中-io-流分为几种","106":"/Java/Java基础.html#_2-bio-nio-aio-有什么区别","107":"/Java/Java基础.html#_3-files的常用方法都有哪些","108":"/Java/Java基础.html#四、反射","109":"/Java/Java基础.html#_1-什么是反射机制","110":"/Java/Java基础.html#_2-反射机制优缺点","111":"/Java/Java基础.html#_3-反射机制的应用场景有哪些","112":"/Java/Java基础.html#_4-java获取反射的三种方法","113":"/Java/Java基础.html#五、常用api","114":"/Java/Java基础.html#_1-string相关","115":"/Java/Java基础.html#_1-1-字符型常量和字符串常量的区别","116":"/Java/Java基础.html#_1-2-什么是字符串常量池","117":"/Java/Java基础.html#_1-3-string-是最基本的数据类型吗","118":"/Java/Java基础.html#_1-4-string有哪些特性","119":"/Java/Java基础.html#_1-5-string为什么是不可变的吗","120":"/Java/Java基础.html#_1-6-string真的是不可变的吗","121":"/Java/Java基础.html#_1-7-是否可以继承-string-类","122":"/Java/Java基础.html#_1-8-string-str-i-与-string-str-new-string-i-一样吗","123":"/Java/Java基础.html#_1-9-string-s-new-string-xyz-创建了几个字符串对象","124":"/Java/Java基础.html#_1-10-如何将字符串反转","125":"/Java/Java基础.html#_1-11-数组有没有-length-方法-string-有没有-length-方法","126":"/Java/Java基础.html#_1-12-string-类的常用方法都有那些","127":"/Java/Java基础.html#_1-13-在使用-hashmap-的时候-用-string-做-key-有什么好处","128":"/Java/Java基础.html#_1-14-string和stringbuffer、stringbuilder的区别是什么-string为什么是不可变的","129":"/Java/Java基础.html#_1-15-string、stringbuffer、stringbuilder三者区别是什么","130":"/Java/Java基础.html#六、包装类相关","131":"/Java/Java基础.html#_1-自动装箱与拆箱","132":"/Java/Java基础.html#_2-int-和-integer-有什么区别","133":"/Java/Java基础.html#_3-integer-a-127-与-integer-b-127相等吗","134":"/Java/Java并发编程.html#java并发编程","135":"/Java/Java并发编程.html#一、并发编程基础知识","136":"/Java/Java并发编程.html#_1-并发编程的优缺点","137":"/Java/Java并发编程.html#_1-1-为什么要使用并发编程-并发编程的优点","138":"/Java/Java并发编程.html#_1-2-并发编程有什么缺点","139":"/Java/Java并发编程.html#_1-3-并发编程三要素是什么-在-java-程序中怎么保证多线程的运行安全","140":"/Java/Java并发编程.html#_1-4-并行和并发有什么区别","141":"/Java/Java并发编程.html#_1-5-什么是多线程-多线程的优劣","142":"/Java/Java并发编程.html#_2-线程和进程区别","143":"/Java/Java并发编程.html#_2-1-什么是线程和进程","144":"/Java/Java并发编程.html#_2-2-进程与线程的区别","145":"/Java/Java并发编程.html#_2-3-什么是上下文切换","146":"/Java/Java并发编程.html#_2-4-守护线程和用户线程有什么区别呢","147":"/Java/Java并发编程.html#_2-5-如何在-windows-和-linux-上查找哪个线程cpu利用率最高","148":"/Java/Java并发编程.html#_2-6-什么是线程死锁","149":"/Java/Java并发编程.html#_2-7-形成死锁的四个必要条件是什么","150":"/Java/Java并发编程.html#_2-8-如何避免线程死锁","151":"/Java/Java并发编程.html#_3-创建线程的四种方式","152":"/Java/Java并发编程.html#_3-1-创建线程有哪几种方式","153":"/Java/Java并发编程.html#_3-2-说一下-runnable-和-callable-有什么区别","154":"/Java/Java并发编程.html#_3-3-线程的-run-和-start-有什么区别","155":"/Java/Java并发编程.html#_3-4-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法","156":"/Java/Java并发编程.html#_3-5-什么是-callable-和-future","157":"/Java/Java并发编程.html#_3-6-什么是-futuretask","158":"/Java/Java并发编程.html#_4-线程的状态和基本操作","159":"/Java/Java并发编程.html#_4-1-说说线程的生命周期及五种基本状态","160":"/Java/Java并发编程.html#_4-2-java-中用到的线程调度算法是什么","161":"/Java/Java并发编程.html#_4-3-线程的调度策略","162":"/Java/Java并发编程.html#_4-4-什么是线程调度器-thread-scheduler-和时间分片-time-slicing","163":"/Java/Java并发编程.html#_4-5-请说出与线程同步以及线程调度相关的方法。","164":"/Java/Java并发编程.html#_4-6-sleep-和-wait-有什么区别","165":"/Java/Java并发编程.html#_4-7-你是如何调用-wait-方法的-使用-if-块还是循环-为什么","166":"/Java/Java并发编程.html#_4-8-为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里","167":"/Java/Java并发编程.html#_4-9-为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用","168":"/Java/Java并发编程.html#_4-10-thread-类中的-yield-方法有什么作用","169":"/Java/Java并发编程.html#_4-11-为什么-thread-类的-sleep-和-yield-方法是静态的","170":"/Java/Java并发编程.html#_4-12-线程的-sleep-方法和-yield-方法有什么区别","171":"/Java/Java并发编程.html#_4-13-如何停止一个正在运行的线程","172":"/Java/Java并发编程.html#_4-14-java-中-interrupted-和-isinterrupted-方法的区别","173":"/Java/Java并发编程.html#_4-15-什么是阻塞式方法","174":"/Java/Java并发编程.html#_4-16-java-中你怎样唤醒一个阻塞的线程","175":"/Java/Java并发编程.html#_4-17-notify-和-notifyall-有什么区别","176":"/Java/Java并发编程.html#_4-18-如何在两个线程间共享数据","177":"/Java/Java并发编程.html#_4-19-java-如何实现多线程之间的通讯和协作","178":"/Java/Java并发编程.html#_4-20-同步方法和同步块-哪个是更好的选择","179":"/Java/Java并发编程.html#_4-21-什么是线程同步和线程互斥-有哪几种实现方式","180":"/Java/Java并发编程.html#_4-22-在监视器-monitor-内部-是如何做线程同步的-程序应该做哪种级别的同步","181":"/Java/Java并发编程.html#_4-23-如果你提交任务时-线程池队列已满-这时会发生什么","182":"/Java/Java并发编程.html#_4-24-什么叫线程安全-servlet-是线程安全吗","183":"/Java/Java并发编程.html#_4-25-在-java-程序中怎么保证多线程的运行安全","184":"/Java/Java并发编程.html#_4-26-你对线程优先级的理解是什么","185":"/Java/Java并发编程.html#_4-27-线程类的构造方法、静态块是被哪个线程调用的","186":"/Java/Java并发编程.html#_4-28-java-中怎么获取一份线程-dump-文件-你如何在-java-中获取线程堆栈","187":"/Java/Java并发编程.html#_4-29-一个线程运行时发生异常会怎样","188":"/Java/Java并发编程.html#_4-30-java-线程数过多会造成什么异常","189":"/Java/Java并发编程.html#二、并发理论","190":"/Java/Java并发编程.html#_1-java内存模型","191":"/Java/Java并发编程.html#_1-1-java中垃圾回收有什么目的-什么时候进行垃圾回收","192":"/Java/Java并发编程.html#_1-2-如果对象的引用被置为null-垃圾收集器是否会立即释放对象占用的内存","193":"/Java/Java并发编程.html#_1-3-finalize-方法什么时候被调用-析构函数-finalization-的目的是什么","194":"/Java/Java并发编程.html#_2-重排序与数据依赖性","195":"/Java/Java并发编程.html#_2-1-为什么代码会重排序","196":"/Java/Java并发编程.html#_2-2-as-if-serial规则和happens-before规则的区别","197":"/Java/Java并发编程.html#三、并发关键字","198":"/Java/Java并发编程.html#_1-synchronized","199":"/Java/Java并发编程.html#_1-1-synchronized-的作用","200":"/Java/Java并发编程.html#_1-2-说说自己是怎么使用-synchronized-关键字-在项目中用到了吗","201":"/Java/Java并发编程.html#_1-3-说一下-synchronized-底层实现原理","202":"/Java/Java并发编程.html#_1-4-什么是自旋","203":"/Java/Java并发编程.html#_1-5-多线程中-synchronized-锁升级的原理是什么","204":"/Java/Java并发编程.html#_1-6-线程-b-怎么知道线程-a-修改了变量","205":"/Java/Java并发编程.html#_1-7-当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b","206":"/Java/Java并发编程.html#_1-8-synchronized、volatile、cas-比较","207":"/Java/Java并发编程.html#_1-9-synchronized-和-lock-有什么区别","208":"/Java/Java并发编程.html#_1-10-synchronized-和-reentrantlock-区别是什么","209":"/Java/Java并发编程.html#_2-volatile","210":"/Java/Java并发编程.html#_2-1-volatile-关键字的作用","211":"/Java/Java并发编程.html#_2-2-java-中能创建-volatile-数组吗","212":"/Java/Java并发编程.html#_2-3-volatile-变量和-atomic-变量有什么不同","213":"/Java/Java并发编程.html#_2-4-volatile-能使得一个非原子操作变成原子操作吗","214":"/Java/Java并发编程.html#_2-5-volatile-修饰符的有过什么实践","215":"/Java/Java并发编程.html#_2-6-synchronized-和-volatile-的区别是什么","216":"/Java/Java并发编程.html#_3-final","217":"/Java/Java并发编程.html#_3-1-什么是不可变对象-它对写并发应用有什么帮助","218":"/Java/Java并发编程.html#四、lock体系","219":"/Java/Java并发编程.html#_1-lock简介与初识aqs","220":"/Java/Java并发编程.html#_1-1-java-concurrency-api-中的-lock-接口-lock-interface-是什么-对比同步它有什么优势","221":"/Java/Java并发编程.html#_1-2-乐观锁和悲观锁的理解及如何实现-有哪些实现方式","222":"/Java/Java并发编程.html#_1-3-什么是-cas","223":"/Java/Java并发编程.html#_1-4-cas-的会产生什么问题","224":"/Java/Java并发编程.html#_1-5-什么是死锁","225":"/Java/Java并发编程.html#_1-6-产生死锁的条件是什么-怎么防止死锁","226":"/Java/Java并发编程.html#_1-7-死锁与活锁的区别-死锁与饥饿的区别","227":"/Java/Java并发编程.html#_1-8-多线程锁的升级原理是什么","228":"/Java/Java并发编程.html#_2-aqs-abstractqueuedsynchronizer-详解与源码分析","229":"/Java/Java并发编程.html#_2-1-aqs-介绍","230":"/Java/Java并发编程.html#_2-2-aqs-原理分析","231":"/Java/Java并发编程.html#_3-reentrantlock-重入锁-实现原理与公平锁非公平锁区别","232":"/Java/Java并发编程.html#_3-1-什么是可重入锁-reentrantlock","233":"/Java/Java并发编程.html#_4-读写锁reentrantreadwritelock源码分析","234":"/Java/Java并发编程.html#_4-1-readwritelock-是什么","235":"/Java/Java并发编程.html#五、并发容器","236":"/Java/Java并发编程.html#_1-并发容器之concurrenthashmap详解-jdk1-8版本-与源码分析","237":"/Java/Java并发编程.html#_1-1-什么是concurrenthashmap","238":"/Java/Java并发编程.html#_1-2-java-中-concurrenthashmap-的并发度是什么","239":"/Java/Java并发编程.html#_1-3-什么是并发容器的实现","240":"/Java/Java并发编程.html#_1-4-java-中的同步集合与并发集合有什么区别","241":"/Java/Java并发编程.html#_1-5-synchronizedmap-和-concurrenthashmap-有什么区别","242":"/Java/Java并发编程.html#_2-并发容器之copyonwritearraylist详解","243":"/Java/Java并发编程.html#_2-1-copyonwritearraylist-是什么-可以用于什么应用场景-有哪些优缺点","244":"/Java/Java并发编程.html#_3-并发容器之threadlocal详解","245":"/Java/Java并发编程.html#_3-1-threadlocal-是什么-有哪些使用场景","246":"/Java/Java并发编程.html#_3-2-什么是线程局部变量","247":"/Java/Java并发编程.html#_4-threadlocal内存泄漏分析与解决方案","248":"/Java/Java并发编程.html#_4-1-threadlocal造成内存泄漏的原因","249":"/Java/Java并发编程.html#_4-2-threadlocal内存泄漏解决方案","250":"/Java/Java并发编程.html#_5-并发容器之blockingqueue详解","251":"/Java/Java并发编程.html#_5-1-什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型","252":"/Java/Java并发编程.html#六、线程池","253":"/Java/Java并发编程.html#_1-executors类创建四种常见线程池","254":"/Java/Java并发编程.html#_1-1-什么是线程池-有哪几种创建方式","255":"/Java/Java并发编程.html#_1-2-线程池有什么优点","256":"/Java/Java并发编程.html#_1-3-线程池都有哪些状态","257":"/Java/Java并发编程.html#_1-4-什么是-executor-框架-为什么使用-executor-框架","258":"/Java/Java并发编程.html#_1-5-在-java-中-executor-和-executors-的区别","259":"/Java/Java并发编程.html#_1-6-线程池中-submit-和-execute-方法有什么区别","260":"/Java/Java并发编程.html#_1-7-什么是线程组-为什么在-java-中不推荐使用","261":"/Java/Java并发编程.html#_2-线程池之threadpoolexecutor详解","262":"/Java/Java并发编程.html#_2-1-executors和threapoolexecutor创建线程池的区别","263":"/Java/Java并发编程.html#_2-2-你知道怎么创建线程池吗","264":"/Java/Java并发编程.html#_2-3-threadpoolexecutor构造函数重要参数分析","265":"/Java/Java并发编程.html#_2-4-threadpoolexecutor饱和策略","266":"/Java/Java并发编程.html#_2-5-一个简单的线程池demo-runnable-threadpoolexecutor","267":"/Java/Java并发编程.html#_3-线程池之scheduledthreadpoolexecutor详解","268":"/Java/Java并发编程.html#_4-futuretask详解","269":"/Java/Java并发编程.html#七、原子操作类","270":"/Java/Java并发编程.html#_1-什么是原子操作-在-java-concurrency-api-中有哪些原子类-atomic-classes","271":"/Java/Java并发编程.html#_2-说一下-atomic-的原理","272":"/Java/Java并发编程.html#八、并发工具","273":"/Java/Java并发编程.html#_1-并发工具之countdownlatch与cyclicbarrier","274":"/Java/Java并发编程.html#_1-1-在-java-中-cyclibarriar-和-countdownlatch-有什么区别","275":"/Java/Java并发编程.html#_2-并发工具之semaphore与exchanger","276":"/Java/Java并发编程.html#_2-1-semaphore-有什么作用","277":"/Java/Java并发编程.html#_2-2-什么是线程间交换数据的工具exchanger","278":"/Java/Java并发编程.html#_2-3-常用的并发工具类有哪些","279":"/Java/Java异常.html#java异常","280":"/Java/Java异常.html#一、java异常认知","281":"/Java/Java异常.html#_1-java异常简介","282":"/Java/Java异常.html#_2-java异常架构","283":"/Java/Java异常.html#_2-1-throwable","284":"/Java/Java异常.html#_2-2-error-错误","285":"/Java/Java异常.html#_2-3-exception-异常","286":"/Java/Java异常.html#_2-3-1-运行时异常","287":"/Java/Java异常.html#_2-3-2-编译时异常","288":"/Java/Java异常.html#_2-4-受检异常与非受检异常","289":"/Java/Java异常.html#_3-java异常关键字","290":"/Java/Java异常.html#二、java异常处理","291":"/Java/Java异常.html#_1-声明异常","292":"/Java/Java异常.html#_2-抛出异常","293":"/Java/Java异常.html#_3-捕获异常","294":"/Java/Java异常.html#_4-如何选择异常类型","295":"/Java/Java异常.html#_5-常见异常处理方式","296":"/Java/Java异常.html#_5-1-直接抛出异常","297":"/Java/Java异常.html#_5-2-封装异常再抛出","298":"/Java/Java异常.html#_5-3-捕获异常","299":"/Java/Java异常.html#_5-4-自定义异常","300":"/Java/Java异常.html#_5-5-try-catch-finally","301":"/Java/Java异常.html#_5-6-try-with-resource","302":"/Java/Java异常.html#三、java异常常见面试题","303":"/Java/Java异常.html#_1-error-和-exception-区别是什么","304":"/Java/Java异常.html#_2-运行时异常和一般异常-受检异常-区别是什么","305":"/Java/Java异常.html#_3-jvm-是如何处理异常的","306":"/Java/Java异常.html#_4-throw-和-throws-的区别是什么","307":"/Java/Java异常.html#_5-final、finally、finalize-有什么区别","308":"/Java/Java异常.html#_6-noclassdeffounderror-和-classnotfoundexception-区别","309":"/Java/Java异常.html#_7-try-catch-finally-中哪个部分可以省略","310":"/Java/Java异常.html#_8-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","311":"/Java/Java异常.html#_9-类-examplea-继承-exception-类-exampleb-继承examplea。","312":"/Java/Java异常.html#_10-常见的-runtimeexception-有哪些","313":"/Java/Java异常.html#_11-java常见异常有哪些","314":"/Java/Java异常.html#四、java异常处理最佳实践","315":"/Java/Java异常.html#_1-在-finally-块中清理资源或者使用-try-with-resource-语句","316":"/Java/Java异常.html#_1-1-使用-finally-代码块","317":"/Java/Java异常.html#_1-2-java-7-的-try-with-resource-语法","318":"/Java/Java异常.html#_2-优先明确的异常","319":"/Java/Java异常.html#_3-对异常进行文档说明","320":"/Java/Java异常.html#_4-使用描述性消息抛出异常","321":"/Java/Java异常.html#_5-优先捕获最具体的异常","322":"/Java/Java异常.html#_6-不要捕获-throwable-类","323":"/Java/Java异常.html#_7-不要忽略异常","324":"/Java/Java异常.html#_8-不要记录并抛出异常","325":"/Java/Java异常.html#_9-包装异常时不要抛弃原始的异常","326":"/Java/Java异常.html#_10-不要使用异常控制程序的流程","327":"/Java/Java异常.html#_11-使用标准异常","328":"/Java/Java异常.html#_12-异常会影响性能","329":"/Java/Java异常.html#_13-总结","330":"/Java/Java异常.html#_14-异常处理-阿里巴巴java开发手册","331":"/Java/Java集合框架.html#java集合框架","332":"/Java/Java集合框架.html#一、集合框架理解","333":"/Java/Java集合框架.html#_1-什么是集合","334":"/Java/Java集合框架.html#_2-集合的特点","335":"/Java/Java集合框架.html#_3-集合和数组的区别","336":"/Java/Java集合框架.html#_4-使用集合框架的好处","337":"/Java/Java集合框架.html#_5-常用的集合类有哪些","338":"/Java/Java集合框架.html#_6-list-set-map三者的区别-list、set、map-是否继承自-collection-接口-list、map、set-三个接口存取元素时-各有什么特点","339":"/Java/Java集合框架.html#_7-集合框架底层数据结构","340":"/Java/Java集合框架.html#_8-哪些集合类是线程安全的","341":"/Java/Java集合框架.html#_9-java集合的快速失败机制-fail-fast","342":"/Java/Java集合框架.html#_10-怎么确保一个集合不能被修改","343":"/Java/Java集合框架.html#二、collection接口","344":"/Java/Java集合框架.html#_1-list接口","345":"/Java/Java集合框架.html#_1-1-迭代器-iterator-是什么","346":"/Java/Java集合框架.html#_1-2-iterator-怎么使用-有什么特点","347":"/Java/Java集合框架.html#_1-3-如何边遍历边移除-collection-中的元素","348":"/Java/Java集合框架.html#_1-4-iterator-和-listiterator-有什么区别","349":"/Java/Java集合框架.html#_1-5-遍历一个-list-有哪些不同的方式-每种方法的实现原理是什么-java-中-list-遍历的最佳实践是什么","350":"/Java/Java集合框架.html#_1-6-说一下-arraylist-的优缺点","351":"/Java/Java集合框架.html#_1-7-如何实现数组和-list-之间的转换","352":"/Java/Java集合框架.html#_1-8-arraylist-和-linkedlist-的区别是什么","353":"/Java/Java集合框架.html#_1-9-arraylist-和-vector-的区别是什么","354":"/Java/Java集合框架.html#_1-10-插入数据时-arraylist、linkedlist、vector谁速度较快-阐述-arraylist、vector、linkedlist-的存储性能和特性","355":"/Java/Java集合框架.html#_1-11-多线程场景下如何使用-arraylist","356":"/Java/Java集合框架.html#_1-12-为什么-arraylist-的-elementdata-加上-transient-修饰","357":"/Java/Java集合框架.html#_1-13-list-和-set-的区别","358":"/Java/Java集合框架.html#_2-set接口","359":"/Java/Java集合框架.html#_2-1-说一下-hashset-的实现原理","360":"/Java/Java集合框架.html#_2-2-hashset如何检查重复-hashset是如何保证数据不可重复的","361":"/Java/Java集合框架.html#_2-3-hashset与hashmap的区别","362":"/Java/Java集合框架.html#_3-queue","363":"/Java/Java集合框架.html#_3-1-blockingqueue是什么","364":"/Java/Java集合框架.html#_3-2-在-queue-中-poll-和-remove-有什么区别","365":"/Java/Java集合框架.html#三、map接口","366":"/Java/Java集合框架.html#_1-说一下-hashmap-的实现原理","367":"/Java/Java集合框架.html#_2-hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现","368":"/Java/Java集合框架.html#_2-1-jdk1-8之前","369":"/Java/Java集合框架.html#_2-2-jdk1-8之后","370":"/Java/Java集合框架.html#_2-3-jdk1-7-vs-jdk1-8-比较","371":"/Java/Java集合框架.html#_3-hashmap的put方法的具体流程","372":"/Java/Java集合框架.html#_4-hashmap的扩容操作是怎么实现的","373":"/Java/Java集合框架.html#_5-hashmap是怎么解决哈希冲突的","374":"/Java/Java集合框架.html#_5-1-什么是哈希","375":"/Java/Java集合框架.html#_5-2-什么是哈希冲突","376":"/Java/Java集合框架.html#_5-3-hashmap的数据结构","377":"/Java/Java集合框架.html#_5-4-hash-函数","378":"/Java/Java集合框架.html#_5-5-jdk1-8新增红黑树","379":"/Java/Java集合框架.html#_5-6-hashmap总结","380":"/Java/Java集合框架.html#_6-能否使用任何类作为-map-的-key","381":"/Java/Java集合框架.html#_7-为什么hashmap中string、integer这样的包装类适合作为k","382":"/Java/Java集合框架.html#_8-如果使用object作为hashmap的key-应该怎么办呢","383":"/Java/Java集合框架.html#_9-hashmap为什么不直接使用hashcode-处理后的哈希值直接作为table的下标","384":"/Java/Java集合框架.html#_10-hashmap-的长度为什么是2的幂次方","385":"/Java/Java集合框架.html#_11-hashmap-与-hashtable-有什么区别","386":"/Java/Java集合框架.html#_12-如何决定使用-hashmap-还是-treemap","387":"/Java/Java集合框架.html#_13-hashmap-和-concurrenthashmap-的区别","388":"/Java/Java集合框架.html#_14-concurrenthashmap-和-hashtable-的区别","389":"/Java/Java集合框架.html#_15-concurrenthashmap-底层具体实现知道吗-实现原理是什么","390":"/Java/Java集合框架.html#四、辅助工具类","391":"/Java/Java集合框架.html#_1-array-和-arraylist-有何区别","392":"/Java/Java集合框架.html#_2-如何实现-array-和-list-之间的转换","393":"/Java/Java集合框架.html#_3-comparable-和-comparator的区别","394":"/Java/Java集合框架.html#_4-collection-和-collections-有什么区别","395":"/Java/Java集合框架.html#_5-treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素","396":"/Java/列表.html#文档列表","397":"/Java/列表.html#_1-java基础","398":"/spring/微服务/三方调用框架-OpenFeign.html#三方调用框架-openfeign","399":"/spring/微服务/三方调用框架-OpenFeign.html#前言","400":"/spring/微服务/三方调用框架-OpenFeign.html#一、openfeign是什么","401":"/spring/微服务/三方调用框架-OpenFeign.html#二、openfeign调用如何拦截请求","402":"/spring/微服务/三方调用框架-OpenFeign.html#三、openfeign快速开始","403":"/spring/微服务/三方调用框架-OpenFeign.html#_1-导入依赖","404":"/spring/微服务/三方调用框架-OpenFeign.html#_2-启动openfeign","405":"/spring/微服务/三方调用框架-OpenFeign.html#_3-编写具体调用接口","406":"/spring/微服务/三方调用框架-OpenFeign.html#四、解决三方调用发生的跨域","407":"/spring/微服务/三方调用框架-OpenFeign.html#_1-域","408":"/spring/微服务/三方调用框架-OpenFeign.html#_2-springmvc解决跨域问题","409":"/spring/微服务/三方调用框架-OpenFeign.html#_3-gateway网关解决跨域问题","410":"/spring/微服务/三方调用框架-OpenFeign.html#_4-nginx配置解决跨域问题","411":"/spring/微服务/分布式流量控制框架-Sentinel.html#分布式流量控制框架-sentinel","412":"/spring/微服务/分布式流量控制框架-Sentinel.html#前言","413":"/spring/微服务/分布式流量控制框架-Sentinel.html#一、sentinel的基本概念","414":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-1-processorslotchain","415":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-2-node","416":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-3-entry","417":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-3-1-自定义资源","418":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-3-2-基于注解标记资源","419":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-4-context","420":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-4-1-什么是context","421":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-4-2-context的初始化","422":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-4-2-2-abstractsentinelinterceptor","423":"/spring/微服务/分布式流量控制框架-Sentinel.html#_1-4-2-3-contextutil","424":"/spring/微服务/分布式流量控制框架-Sentinel.html#二、processorslotchain执行流程","425":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-1-入口","426":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-2-defaultprocessorslotchain","427":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-3-nodeselectorslot","428":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-4-clusterbuilderslot","429":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-5-statisticslot","430":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-6-authorityslot","431":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-7-systemslot","432":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-8-paramflowslot","433":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-8-1-令牌桶","434":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-flowslot","435":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-1-核心流程","436":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-2-滑动时间窗口","437":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-2-1-时间窗口请求量统计","438":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-2-2-滑动窗口qps计算","439":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-9-3-漏桶","440":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-10-degradeslot","441":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-10-1-circuitbreaker","442":"/spring/微服务/分布式流量控制框架-Sentinel.html#_2-10-2-触发断路器","443":"/spring/微服务/分布式消息框架RabbitMQ-.html#分布式消息框架-rabbitmq","444":"/spring/微服务/分布式消息框架RabbitMQ-.html#一、什么是rabbitmq","445":"/spring/微服务/分布式消息框架RabbitMQ-.html#优点","446":"/spring/微服务/分布式消息框架RabbitMQ-.html#缺点","447":"/spring/微服务/分布式消息框架RabbitMQ-.html#二、rabbitmq运作模式","448":"/spring/微服务/分布式消息框架RabbitMQ-.html#三、rabbitmq的五种运行模式-快速开始","449":"/spring/微服务/分布式消息框架RabbitMQ-.html#_1-简单模式-simple-一个生产者-一个消费者","450":"/spring/微服务/分布式消息框架RabbitMQ-.html#_2-工作队列模式-work-queue-多个消费者竞争消息","451":"/spring/微服务/分布式消息框架RabbitMQ-.html#特点","452":"/spring/微服务/分布式消息框架RabbitMQ-.html#_3-发布-订阅模式-publish-subscribe-一个生产者-多个消费者","453":"/spring/微服务/分布式消息框架RabbitMQ-.html#特点-1","454":"/spring/微服务/分布式消息框架RabbitMQ-.html#_4-路由模式-routing-根据路由键将消息转发到对应队列","455":"/spring/微服务/分布式消息框架RabbitMQ-.html#特点-2","456":"/spring/微服务/分布式消息框架RabbitMQ-.html#_5-通配符模式-topics-使用通配符匹配路由键","457":"/spring/微服务/分布式消息框架RabbitMQ-.html#通配符规则","458":"/spring/微服务/列表.html#文档列表","459":"/spring/微服务/列表.html#_1-服务注册和发现-nacos","460":"/spring/微服务/列表.html#_2-三方调用框架-openfeign","461":"/spring/微服务/列表.html#_3-分布式消息框架-rabbitmq","462":"/spring/微服务/列表.html#_4-分布式流量控制框架-sentinel","463":"/spring/微服务/服务注册和发现-nacos.html#服务注册和发现-nacos","464":"/spring/微服务/服务注册和发现-nacos.html#前言","465":"/spring/微服务/服务注册和发现-nacos.html#一、项目使用nacos前置操作","466":"/spring/微服务/服务注册和发现-nacos.html#_1-下载nacos源码","467":"/spring/微服务/服务注册和发现-nacos.html#_2-编写demo工程","468":"/spring/微服务/服务注册和发现-nacos.html#_3-导入nacos源码","469":"/spring/微服务/服务注册和发现-nacos.html#_4-proto编译","470":"/spring/微服务/服务注册和发现-nacos.html#_4-1-什么是protobuf","471":"/spring/微服务/服务注册和发现-nacos.html#_4-2-安装protoc","472":"/spring/微服务/服务注册和发现-nacos.html#_4-3-编译proto","473":"/spring/微服务/服务注册和发现-nacos.html#_5-运行","474":"/spring/微服务/服务注册和发现-nacos.html#二、服务注册","475":"/spring/微服务/服务注册和发现-nacos.html#_1-服务注册接口","476":"/spring/微服务/服务注册和发现-nacos.html#_2-客户端","477":"/spring/微服务/服务注册和发现-nacos.html#_2-1-nacosserviceregistryautoconfiguration","478":"/spring/微服务/服务注册和发现-nacos.html#_2-2-nacosautoserviceregistration","479":"/spring/微服务/服务注册和发现-nacos.html#_2-3-nacosserviceregistry","480":"/spring/微服务/服务注册和发现-nacos.html#_2-4-nacosnamingservice","481":"/spring/微服务/服务注册和发现-nacos.html#_2-5-客户端注册的流程图","482":"/spring/微服务/服务注册和发现-nacos.html#_3-服务端","483":"/spring/微服务/服务注册和发现-nacos.html#_3-1-instancecontroller","484":"/spring/微服务/服务注册和发现-nacos.html#_3-2-servicemanager","485":"/spring/微服务/服务注册和发现-nacos.html#更服务列表","486":"/spring/微服务/服务注册和发现-nacos.html#nacos集群一致性","487":"/spring/微服务/服务注册和发现-nacos.html#_3-3-distroconsistencyserviceimpl","488":"/spring/微服务/服务注册和发现-nacos.html#_3-3-1-更新本地实例列表","489":"/spring/微服务/服务注册和发现-nacos.html#放入阻塞队列","490":"/spring/微服务/服务注册和发现-nacos.html#notifier异步更新","491":"/spring/微服务/服务注册和发现-nacos.html#覆盖实例列表","492":"/spring/微服务/服务注册和发现-nacos.html#_3-3-2-集群数据同步","493":"/spring/微服务/服务注册和发现-nacos.html#_3-4-服务端流程图","494":"/spring/微服务/服务注册和发现-nacos.html#_4-总结","495":"/spring/微服务/服务注册和发现-nacos.html#三、服务心跳","496":"/spring/微服务/服务注册和发现-nacos.html#_1-客户端","497":"/spring/微服务/服务注册和发现-nacos.html#_1-1-beatinfo","498":"/spring/微服务/服务注册和发现-nacos.html#_1-2-beatreactor","499":"/spring/微服务/服务注册和发现-nacos.html#_1-3-beattask","500":"/spring/微服务/服务注册和发现-nacos.html#_1-4-发送心跳","501":"/spring/微服务/服务注册和发现-nacos.html#_2-服务端","502":"/spring/微服务/服务注册和发现-nacos.html#_2-1-instancecontroller","503":"/spring/微服务/服务注册和发现-nacos.html#_2-2-处理心跳请求","504":"/spring/微服务/服务注册和发现-nacos.html#_3-3-心跳异常检测","505":"/spring/微服务/服务注册和发现-nacos.html#_3-4-主动健康检测","506":"/spring/微服务/服务注册和发现-nacos.html#_3-总结","507":"/spring/微服务/服务注册和发现-nacos.html#四、服务发现","508":"/spring/微服务/服务注册和发现-nacos.html#_1-客户端-1","509":"/spring/微服务/服务注册和发现-nacos.html#_1-1-定时更新服务列表","510":"/spring/微服务/服务注册和发现-nacos.html#_1-1-1-nacosnamingservice","511":"/spring/微服务/服务注册和发现-nacos.html#_1-1-2-hostreactor","512":"/spring/微服务/服务注册和发现-nacos.html#_1-1-3-serverproxy","513":"/spring/微服务/服务注册和发现-nacos.html#_1-2-处理服务变更通知","514":"/spring/微服务/服务注册和发现-nacos.html#_1-2-1-pushreceiver","515":"/spring/微服务/服务注册和发现-nacos.html#_1-2-2-hostreactor","516":"/spring/微服务/服务注册和发现-nacos.html#_2-服务端-1","517":"/spring/微服务/服务注册和发现-nacos.html#_2-1-拉取服务列表接口","518":"/spring/微服务/服务注册和发现-nacos.html#_2-2-发布服务变更的udp通知","519":"/spring/微服务/服务注册和发现-nacos.html#_3-总结-1","520":"/开发工具/代码管理工具-Git.html#代码管理工具-git","521":"/开发工具/代码管理工具-Git.html#一、-前言","522":"/开发工具/代码管理工具-Git.html#_1-什么是git","523":"/开发工具/代码管理工具-Git.html#_2-使用git能做什么","524":"/开发工具/代码管理工具-Git.html#二、git概述","525":"/开发工具/代码管理工具-Git.html#_1-git简介","526":"/开发工具/代码管理工具-Git.html#_2-git下载与安装","527":"/开发工具/代码管理工具-Git.html#三、git常用命令","528":"/开发工具/代码管理工具-Git.html#_1-git全局设置","529":"/开发工具/代码管理工具-Git.html#_2-获取git仓库","530":"/开发工具/代码管理工具-Git.html#_2-1-在本地初始化git仓库","531":"/开发工具/代码管理工具-Git.html#_2-2-从远程仓库克隆","532":"/开发工具/代码管理工具-Git.html#_3-工作区、暂存区、版本库","533":"/开发工具/代码管理工具-Git.html#_4-git工作区中文件的状态","534":"/开发工具/代码管理工具-Git.html#_5-本地仓库操作","535":"/开发工具/代码管理工具-Git.html#_5-1-git-status","536":"/开发工具/代码管理工具-Git.html#_5-2-git-add","537":"/开发工具/代码管理工具-Git.html#_5-3-git-reset","538":"/开发工具/代码管理工具-Git.html#_5-4-git-commit","539":"/开发工具/代码管理工具-Git.html#_5-5-git-log","540":"/开发工具/代码管理工具-Git.html#_6-远程仓库操作","541":"/开发工具/代码管理工具-Git.html#_6-1-git-remote","542":"/开发工具/代码管理工具-Git.html#_6-2-git-remote-add","543":"/开发工具/代码管理工具-Git.html#_6-4-git-push","544":"/开发工具/代码管理工具-Git.html#_6-5-git-pull","545":"/开发工具/代码管理工具-Git.html#_7-分支操作","546":"/开发工具/代码管理工具-Git.html#_7-1-查看分支","547":"/开发工具/代码管理工具-Git.html#_7-2-创建分支","548":"/开发工具/代码管理工具-Git.html#_7-3-切换分支","549":"/开发工具/代码管理工具-Git.html#_7-4-推送至远程仓库分支","550":"/开发工具/代码管理工具-Git.html#_7-5-合并分支","551":"/开发工具/列表.html#文档列表","552":"/开发工具/列表.html#_1-代码管理工具-git","553":"/服务器/列表.html#文档列表","554":"/服务器/列表.html#_1-容器化技术-docker","555":"/服务器/列表.html#_1-数据缓存技术-redis","556":"/服务器/容器化技术-Docker.html#容器化技术-docker","557":"/服务器/容器化技术-Docker.html#一、镜像结构","558":"/服务器/容器化技术-Docker.html#二、构建自定义镜像","559":"/服务器/容器化技术-Docker.html#三、网络","560":"/服务器/容器化技术-Docker.html#四、部署java项目","561":"/服务器/容器化技术-Docker.html#五、docker-compose","562":"/服务器/容器化技术-Docker.html#_1-概述","563":"/服务器/容器化技术-Docker.html#_2-配置文件","564":"/服务器/容器化技术-Docker.html#_3-常用命令","565":"/服务器/数据缓存技术-Redis.html#数据缓存技术-redis","566":"/服务器/数据缓存技术-Redis.html#一、现有项目的缺陷","567":"/服务器/数据缓存技术-Redis.html#_1-数据缓存","568":"/服务器/数据缓存技术-Redis.html#_2-分布式session","569":"/服务器/数据缓存技术-Redis.html#二、redis介绍与安装","570":"/服务器/数据缓存技术-Redis.html#_1-概述","571":"/服务器/数据缓存技术-Redis.html#_2-安装","572":"/服务器/数据缓存技术-Redis.html#_2-1-基于tar-gz安装","573":"/服务器/数据缓存技术-Redis.html#_2-2-基于docker安装","574":"/服务器/数据缓存技术-Redis.html#三、redis的客户端工具","575":"/服务器/数据缓存技术-Redis.html#_1-命令行客户端","576":"/服务器/数据缓存技术-Redis.html#_2-图形化客户端【windows版本】","577":"/服务器/数据缓存技术-Redis.html#_3-java客户端","578":"/服务器/数据缓存技术-Redis.html#四、redis的五种数据类型","579":"/服务器/数据缓存技术-Redis.html#_1-五种数据类型","580":"/服务器/数据缓存技术-Redis.html#_2-string","581":"/服务器/数据缓存技术-Redis.html#_3-hash","582":"/服务器/数据缓存技术-Redis.html#_4-list","583":"/服务器/数据缓存技术-Redis.html#_5-set","584":"/服务器/数据缓存技术-Redis.html#_6-zset","585":"/服务器/数据缓存技术-Redis.html#_7-通用命令","586":"/服务器/数据缓存技术-Redis.html#_8-查看redis性能的命令","587":"/服务器/数据缓存技术-Redis.html#五、redis核心配置文件","588":"/服务器/数据缓存技术-Redis.html#_1-带着配置去运行redis的服务","589":"/服务器/数据缓存技术-Redis.html#_1-1-修改redis的配置文件","590":"/服务器/数据缓存技术-Redis.html#_1-2-通过命令行客户端工具操作redis","591":"/服务器/数据缓存技术-Redis.html#_1-3-远程客户端工具","592":"/服务器/数据缓存技术-Redis.html#_1-4-将来使用java操作redis时也需要密码","593":"/服务器/数据缓存技术-Redis.html#六、jedis","594":"/服务器/数据缓存技术-Redis.html#_1-概述-1","595":"/服务器/数据缓存技术-Redis.html#_2-快速入门","596":"/服务器/数据缓存技术-Redis.html#_3-jedispool的使用","597":"/服务器/数据缓存技术-Redis.html#_4-jedispool工具类封装","598":"/服务器/数据缓存技术-Redis.html#_5-五种数据类型的使用","599":"/服务器/数据缓存技术-Redis.html#_6-jedis如何保存一个java对象","600":"/服务器/数据缓存技术-Redis.html#_6-1-string存储【json】","601":"/服务器/数据缓存技术-Redis.html#_6-2-字节存储","602":"/服务器/数据缓存技术-Redis.html#_7-jedis的管道操作","603":"/服务器/数据缓存技术-Redis.html#七、springboot整合redis","604":"/服务器/数据缓存技术-Redis.html#_1-导入依赖","605":"/服务器/数据缓存技术-Redis.html#_2-配置文件","606":"/服务器/数据缓存技术-Redis.html#_3-测试代码","607":"/服务器/数据缓存技术-Redis.html#_4-序列化器","608":"/服务器/数据缓存技术-Redis.html#_4-1-默认情况下","609":"/服务器/数据缓存技术-Redis.html#_4-2-指定使用序列化器","610":"/服务器/数据缓存技术-Redis.html#_4-3-stringredistemplate","611":"/服务器/数据缓存技术-Redis.html#_5-操作其他数据类型","612":"/服务器/数据缓存技术-Redis.html#_6-存储对象","613":"/服务器/数据缓存技术-Redis.html#_7-管道操作","614":"/服务器/数据缓存技术-Redis.html#八、docker-compose搭建redis使用配置文件","615":"/服务器/数据缓存技术-Redis.html#_1-docker-compose-yml文件","616":"/服务器/数据缓存技术-Redis.html#_2-redis配置文件","617":"/服务器/数据缓存技术-Redis.html#_3-搭建springboot工程测试","618":"/服务器/数据缓存技术-Redis.html#九、redis事务","619":"/服务器/数据缓存技术-Redis.html#_1-mysql中事务","620":"/服务器/数据缓存技术-Redis.html#_2-redis事务","621":"/服务器/数据缓存技术-Redis.html#_3-事务的使用","622":"/服务器/数据缓存技术-Redis.html#_4-java代码实现redis事务","623":"/服务器/数据缓存技术-Redis.html#十、redis持久化","624":"/服务器/数据缓存技术-Redis.html#_1-持久化概述","625":"/服务器/数据缓存技术-Redis.html#_2-持久化机制","626":"/服务器/数据缓存技术-Redis.html#_3-rdb机制","627":"/服务器/数据缓存技术-Redis.html#_3-1-redis-conf【196行-263行】","628":"/服务器/数据缓存技术-Redis.html#_3-2-触发rdb机制的情况","629":"/服务器/数据缓存技术-Redis.html#_3-3-rdb机制准备工作","630":"/服务器/数据缓存技术-Redis.html#_3-3-1-正常停止容器时-触发rdb","631":"/服务器/数据缓存技术-Redis.html#_3-3-2-执行save或者bgsave-触发rdb","632":"/服务器/数据缓存技术-Redis.html#_3-3-3-满足配置文件的规则-触发rdb","633":"/服务器/数据缓存技术-Redis.html#_3-4-dump-rdb文件加载时机","634":"/服务器/数据缓存技术-Redis.html#_4-aof机制","635":"/服务器/数据缓存技术-Redis.html#_4-1-redis-conf【679行-806行】","636":"/服务器/数据缓存技术-Redis.html#_4-2-aof文件存储的内容","637":"/服务器/数据缓存技术-Redis.html#_4-3-触发aof规则","638":"/服务器/数据缓存技术-Redis.html#_4-4-appendonly-aof文件加载时机","639":"/服务器/数据缓存技术-Redis.html#_4-5-aof机制演示","640":"/服务器/数据缓存技术-Redis.html#_4-5-1-删除容器","641":"/服务器/数据缓存技术-Redis.html#_4-5-2-向redis-conf文件中增加如下内容","642":"/服务器/数据缓存技术-Redis.html#_4-5-3-启动redis容器","643":"/服务器/数据缓存技术-Redis.html#_4-5-4-aof机制演示效果","644":"/服务器/数据缓存技术-Redis.html#_4-6-aof文件的重写规则","645":"/服务器/数据缓存技术-Redis.html#_5-混合持久化","646":"/服务器/数据缓存技术-Redis.html#_5-1-概述","647":"/服务器/数据缓存技术-Redis.html#_5-2-混合持久化实现","648":"/服务器/数据缓存技术-Redis.html#_6-rdb、aof、混合持久化的选择","649":"/服务器/数据缓存技术-Redis.html#十一、redis高可用","650":"/服务器/数据缓存技术-Redis.html#_1-实现高可用的三种机制","651":"/服务器/数据缓存技术-Redis.html#_2-主从架构","652":"/服务器/数据缓存技术-Redis.html#_2-1-主从架构原理与功能","653":"/服务器/数据缓存技术-Redis.html#_2-2-数据同步的原理","654":"/服务器/数据缓存技术-Redis.html#_2-3-搭建主从架构","655":"/服务器/数据缓存技术-Redis.html#_2-3-1-创建一个目录docker-master-slave用来搭建主从架构","656":"/服务器/数据缓存技术-Redis.html#_2-3-2-进入到三个容器的内部","657":"/服务器/数据缓存技术-Redis.html#_3-哨兵模式","658":"/服务器/数据缓存技术-Redis.html#_3-1-哨兵的作用","659":"/服务器/数据缓存技术-Redis.html#_3-2-搭建哨兵模式","660":"/服务器/数据缓存技术-Redis.html#_3-2-1-在docker-master-slave同目录下创建一个docker-sentinel目录","661":"/服务器/数据缓存技术-Redis.html#_3-2-2-启动容器","662":"/服务器/数据缓存技术-Redis.html#_3-2-3-查看哨兵启动情况与哨兵监控主从架构的信息","663":"/服务器/数据缓存技术-Redis.html#_3-3-测试选举","664":"/服务器/数据缓存技术-Redis.html#_3-3-1-停止redis-master容器","665":"/服务器/数据缓存技术-Redis.html#_3-3-2-过10几秒再次查看从节点容器的信息","666":"/服务器/数据缓存技术-Redis.html#_3-3-3-当redis-master重新启动后-就会变成从节点加入到主从架构中","667":"/服务器/数据缓存技术-Redis.html#_4-redis-cluster","668":"/服务器/数据缓存技术-Redis.html#_4-1-原理","669":"/服务器/数据缓存技术-Redis.html#_4-2-redis-cluster搭建","670":"/服务器/数据缓存技术-Redis.html#_4-2-1-docker-compose-yml","671":"/服务器/数据缓存技术-Redis.html#_4-2-2-redis配置文件","672":"/服务器/数据缓存技术-Redis.html#_4-2-3-启动容器","673":"/服务器/数据缓存技术-Redis.html#_4-2-4-搭建redis-cluster","674":"/服务器/数据缓存技术-Redis.html#_4-2-5-连接集群并向集群中插入数据","675":"/服务器/数据缓存技术-Redis.html#_4-3-java连接redis集群","676":"/服务器/数据缓存技术-Redis.html#十二、redis淘汰策略","677":"/服务器/数据缓存技术-Redis.html#_1-概述-2","678":"/服务器/数据缓存技术-Redis.html#_2-会删除哪些key","679":"/服务器/数据缓存技术-Redis.html#_3-什么时候删除key","680":"/服务器/数据缓存技术-Redis.html#_4-淘汰策略","681":"/服务器/数据缓存技术-Redis.html#十三、redis应用场景","682":"/服务器/数据缓存技术-Redis.html#_1-热点数据缓存【list】","683":"/服务器/数据缓存技术-Redis.html#_2-分布式session【string】","684":"/服务器/数据缓存技术-Redis.html#_3-计数器【string-incr-】","685":"/服务器/数据缓存技术-Redis.html#_4-排行榜【zset】","686":"/服务器/数据缓存技术-Redis.html#_5-分布式锁【string-setnx-】","687":"/服务器/数据缓存技术-Redis.html#_6-分布式id【string-incr-】","688":"/服务器/数据缓存技术-Redis.html#_7-购物车【hash】","689":"/服务器/数据缓存技术-Redis.html#_8-微关系【set】","690":"/服务器/数据缓存技术-Redis.html#十四、使用redis可能碰到的问题","691":"/服务器/数据缓存技术-Redis.html#_1-缓存穿透","692":"/服务器/数据缓存技术-Redis.html#_1-1-缓存穿透伪代码","693":"/服务器/数据缓存技术-Redis.html#_1-2-如何解决缓存穿透","694":"/服务器/数据缓存技术-Redis.html#_1-2-1-简单解决","695":"/服务器/数据缓存技术-Redis.html#_1-2-2-布隆过滤器","696":"/服务器/数据缓存技术-Redis.html#_1-2-3-具体实现","697":"/服务器/数据缓存技术-Redis.html#_2-缓存击穿","698":"/服务器/数据缓存技术-Redis.html#_2-1-概述","699":"/服务器/数据缓存技术-Redis.html#_2-2-解决","700":"/服务器/数据缓存技术-Redis.html#_3-缓存雪崩","701":"/服务器/数据缓存技术-Redis.html#_3-1-概述","702":"/服务器/数据缓存技术-Redis.html#_3-2-解决","703":"/服务器/数据缓存技术-Redis.html#十五、热点数据key的重建问题","704":"/服务器/数据缓存技术-Redis.html#_1-案例演示","705":"/服务器/数据缓存技术-Redis.html#_2-解决方案","706":"/服务器/数据缓存技术-Redis.html#_2-1-加锁","707":"/服务器/数据缓存技术-Redis.html#_2-2-分布式锁","708":"/服务器/数据缓存技术-Redis.html#_2-2-1-加分布式锁","709":"/服务器/数据缓存技术-Redis.html#_2-2-2-上述加锁操作有没有问题","710":"/服务器/数据缓存技术-Redis.html#_2-3-考虑两个问题","711":"/服务器/数据缓存技术-Redis.html#_3-redission实现分布式锁","712":"/服务器/数据缓存技术-Redis.html#_3-1-原理","713":"/服务器/数据缓存技术-Redis.html#_3-2-代码实现","714":"/服务器/数据缓存技术-Redis.html#_3-3-红锁问题及解决","715":"/服务器/数据缓存技术-Redis.html#十六、redis的多路复用","716":"/服务器/数据缓存技术-Redis.html#_1-redis是单线程吗","717":"/服务器/数据缓存技术-Redis.html#_2-redis这个读写操作是单线程的-那为什么还那么快"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,1],"1":[2,2,1],"2":[4,4,75],"3":[3,4,57],"4":[2,4,16],"5":[3,4,43],"6":[4,4,31],"7":[2,2,1],"8":[2,4,40],"9":[2,4,21],"10":[2,4,37],"11":[2,4,21],"12":[3,6,11],"13":[3,6,12],"14":[2,2,1],"15":[3,4,16],"16":[2,2,1],"17":[2,4,13],"18":[3,4,13],"19":[3,4,16],"20":[5,4,23],"21":[4,4,19],"22":[3,4,31],"23":[3,4,12],"24":[2,4,15],"25":[5,4,22],"26":[4,9,23],"27":[3,9,19],"28":[4,9,29],"29":[3,9,9],"30":[4,4,68],"31":[5,4,32],"32":[4,4,16],"33":[3,4,41],"34":[1,1,1],"35":[2,1,1],"36":[3,3,44],"37":[2,3,18],"38":[3,3,44],"39":[4,3,11],"40":[3,3,10],"41":[2,3,12],"42":[6,3,34],"43":[2,1,1],"44":[2,3,1],"45":[2,5,27],"46":[8,5,26],"47":[6,5,20],"48":[8,5,24],"49":[2,3,8],"50":[2,3,31],"51":[2,3,26],"52":[2,3,1],"53":[5,5,9],"54":[5,5,28],"55":[3,5,39],"56":[3,5,49],"57":[2,3,56],"58":[2,1,1],"59":[2,3,43],"60":[2,3,48],"61":[5,5,42],"62":[2,5,51],"63":[2,3,1],"64":[3,5,29],"65":[4,5,5],"66":[5,5,9],"67":[5,5,11],"68":[2,3,1],"69":[3,5,38],"70":[3,5,13],"71":[5,5,2],"72":[6,5,4],"73":[4,5,6],"74":[3,5,14],"75":[3,5,11],"76":[4,5,18],"77":[4,5,5],"78":[5,5,6],"79":[2,3,1],"80":[4,5,6],"81":[3,5,5],"82":[4,7,31],"83":[3,7,35],"84":[4,7,37],"85":[4,7,41],"86":[3,5,13],"87":[3,5,7],"88":[4,5,31],"89":[4,5,31],"90":[2,3,1],"91":[7,5,4],"92":[9,5,21],"93":[2,3,1],"94":[6,5,68],"95":[7,5,83],"96":[5,5,5],"97":[2,3,1],"98":[6,5,8],"99":[5,5,131],"100":[1,5,13],"101":[2,3,1],"102":[4,5,19],"103":[4,5,25],"104":[2,1,1],"105":[6,3,24],"106":[6,3,127],"107":[3,3,20],"108":[2,1,1],"109":[3,3,13],"110":[2,3,12],"111":[3,3,38],"112":[2,3,50],"113":[2,1,1],"114":[2,3,1],"115":[2,5,14],"116":[4,5,13],"117":[4,5,48],"118":[3,5,24],"119":[4,5,14],"120":[4,5,54],"121":[5,5,6],"122":[10,5,13],"123":[8,5,24],"124":[4,5,20],"125":[7,5,13],"126":[5,5,26],"127":[11,5,15],"128":[5,5,48],"129":[6,5,43],"130":[2,3,1],"131":[2,5,5],"132":[5,5,33],"133":[8,5,40],"134":[1,1,1],"135":[2,1,1],"136":[2,3,1],"137":[4,5,14],"138":[3,5,11],"139":[7,5,28],"140":[4,5,25],"141":[5,5,22],"142":[2,3,1],"143":[4,5,15],"144":[2,5,48],"145":[4,5,34],"146":[4,5,48],"147":[8,5,30],"148":[3,5,79],"149":[3,5,22],"150":[3,5,59],"151":[2,3,1],"152":[4,5,111],"153":[8,5,29],"154":[7,5,43],"155":[9,5,35],"156":[7,5,22],"157":[4,5,23],"158":[2,3,1],"159":[4,5,81],"160":[5,5,29],"161":[3,5,23],"162":[8,5,19],"163":[4,5,29],"164":[7,5,30],"165":[10,5,23],"166":[11,5,32],"167":[9,5,15],"168":[7,5,10],"169":[10,5,11],"170":[8,5,29],"171":[4,5,9],"172":[9,5,29],"173":[4,5,10],"174":[5,5,22],"175":[7,5,17],"176":[4,5,7],"177":[5,5,43],"178":[5,5,12],"179":[5,5,48],"180":[8,5,23],"181":[5,5,25],"182":[6,5,34],"183":[6,5,37],"184":[4,5,23],"185":[4,5,31],"186":[9,5,28],"187":[4,5,15],"188":[5,5,23],"189":[2,1,1],"190":[2,3,1],"191":[4,5,3],"192":[5,5,6],"193":[8,5,31],"194":[2,3,1],"195":[4,5,12],"196":[5,3,15],"197":[2,1,1],"198":[2,3,1],"199":[4,5,47],"200":[6,5,103],"201":[6,5,62],"202":[3,5,16],"203":[6,5,34],"204":[7,5,13],"205":[10,5,14],"206":[6,5,13],"207":[7,5,23],"208":[7,5,64],"209":[2,3,1],"210":[4,5,31],"211":[6,5,14],"212":[7,5,19],"213":[5,5,22],"214":[5,5,49],"215":[7,5,32],"216":[2,3,1],"217":[5,5,35],"218":[2,1,1],"219":[2,3,1],"220":[11,5,40],"221":[5,5,70],"222":[4,5,49],"223":[5,5,55],"224":[4,5,18],"225":[5,5,47],"226":[5,5,39],"227":[4,5,9],"228":[4,3,1],"229":[4,7,16],"230":[3,7,184],"231":[4,3,1],"232":[5,7,32],"233":[2,3,1],"234":[4,5,55],"235":[2,1,1],"236":[5,3,1],"237":[3,8,24],"238":[7,8,24],"239":[4,8,30],"240":[5,8,11],"241":[7,8,34],"242":[2,3,1],"243":[7,5,57],"244":[2,3,1],"245":[6,5,109],"246":[4,5,18],"247":[2,3,1],"248":[4,5,35],"249":[4,5,12],"250":[2,3,1],"251":[7,5,75],"252":[2,1,1],"253":[2,3,1],"254":[4,5,78],"255":[4,5,27],"256":[4,5,23],"257":[7,5,16],"258":[10,5,20],"259":[8,5,18],"260":[7,5,19],"261":[2,3,1],"262":[3,5,28],"263":[3,5,9],"264":[3,5,30],"265":[3,5,45],"266":[4,5,135],"267":[2,3,1],"268":[2,3,1],"269":[2,1,1],"270":[10,3,78],"271":[5,3,76],"272":[2,1,1],"273":[2,3,1],"274":[9,5,29],"275":[2,3,1],"276":[4,5,27],"277":[2,5,10],"278":[4,5,43],"279":[1,1,1],"280":[2,1,1],"281":[2,3,18],"282":[2,3,1],"283":[3,5,16],"284":[4,5,31],"285":[5,5,5],"286":[4,9,45],"287":[3,9,23],"288":[3,5,40],"289":[2,3,27],"290":[2,1,31],"291":[2,3,20],"292":[2,3,6],"293":[2,3,8],"294":[2,3,3],"295":[2,3,1],"296":[3,5,29],"297":[3,5,30],"298":[3,5,24],"299":[3,5,19],"300":[4,5,79],"301":[5,5,50],"302":[2,1,1],"303":[6,3,17],"304":[5,3,21],"305":[4,3,24],"306":[6,3,24],"307":[6,3,21],"308":[6,3,36],"309":[6,3,35],"310":[10,3,63],"311":[8,3,61],"312":[5,3,11],"313":[2,3,68],"314":[2,1,11],"315":[8,3,54],"316":[4,11,36],"317":[9,11,35],"318":[2,3,26],"319":[2,3,18],"320":[2,3,33],"321":[2,3,39],"322":[4,3,32],"323":[2,3,30],"324":[2,3,65],"325":[2,3,37],"326":[2,3,7],"327":[2,3,11],"328":[2,3,17],"329":[2,3,15],"330":[3,3,200],"331":[1,1,1],"332":[2,1,1],"333":[2,3,31],"334":[2,3,8],"335":[2,3,19],"336":[2,3,13],"337":[3,3,17],"338":[11,3,52],"339":[2,3,57],"340":[3,3,19],"341":[5,3,38],"342":[3,3,30],"343":[2,1,1],"344":[2,3,1],"345":[5,5,12],"346":[6,5,28],"347":[6,5,38],"348":[7,5,20],"349":[10,5,53],"350":[5,5,20],"351":[6,5,25],"352":[7,5,41],"353":[7,5,32],"354":[10,5,20],"355":[5,5,28],"356":[10,5,77],"357":[6,5,43],"358":[2,3,1],"359":[6,5,14],"360":[4,5,76],"361":[3,5,1],"362":[2,3,1],"363":[4,5,20],"364":[10,5,29],"365":[2,1,1],"366":[5,3,52],"367":[5,3,13],"368":[4,8,9],"369":[3,8,9],"370":[7,8,11],"371":[2,3,198],"372":[3,3,167],"373":[3,3,5],"374":[4,6,23],"375":[4,6,5],"376":[3,6,28],"377":[4,6,42],"378":[3,6,14],"379":[3,6,14],"380":[6,3,27],"381":[4,3,15],"382":[4,3,19],"383":[4,3,39],"384":[3,3,43],"385":[6,3,66],"386":[6,3,10],"387":[5,3,13],"388":[6,3,85],"389":[5,3,118],"390":[2,1,1],"391":[6,3,21],"392":[7,3,10],"393":[5,3,22],"394":[6,3,16],"395":[10,3,32],"396":[1,1,1],"397":[2,1,1],"398":[2,1,1],"399":[1,2,4],"400":[3,2,17],"401":[2,2,41],"402":[2,2,1],"403":[2,4,16],"404":[2,4,28],"405":[2,4,32],"406":[2,2,1],"407":[2,4,42],"408":[2,4,3],"409":[2,4,85],"410":[2,4,42],"411":[2,1,1],"412":[1,2,2],"413":[2,2,17],"414":[2,4,46],"415":[3,4,34],"416":[3,4,27],"417":[3,7,82],"418":[4,7,129],"419":[3,4,11],"420":[3,7,32],"421":[4,7,20],"422":[4,9,71],"423":[5,9,82],"424":[2,2,3],"425":[3,4,117],"426":[2,4,40],"427":[3,4,74],"428":[3,4,74],"429":[3,4,104],"430":[3,4,113],"431":[3,4,90],"432":[3,4,47],"433":[4,7,13],"434":[3,4,24],"435":[4,7,148],"436":[3,7,7],"437":[4,8,165],"438":[3,8,176],"439":[4,7,107],"440":[3,4,60],"441":[4,7,83],"442":[3,7,107],"443":[2,1,1],"444":[2,2,17],"445":[1,4,16],"446":[1,4,3],"447":[2,2,20],"448":[4,2,123],"449":[5,6,38],"450":[5,6,6],"451":[1,10,32],"452":[7,6,6],"453":[1,12,36],"454":[4,6,8],"455":[1,9,28],"456":[4,6,8],"457":[1,6,33],"458":[1,1,1],"459":[2,1,1],"460":[2,1,1],"461":[2,1,1],"462":[2,1,1],"463":[2,1,1],"464":[1,2,16],"465":[2,2,50],"466":[2,4,18],"467":[2,4,22],"468":[2,4,16],"469":[2,4,4],"470":[3,6,26],"471":[3,6,17],"472":[3,6,17],"473":[2,4,10],"474":[2,2,46],"475":[2,4,68],"476":[2,4,3],"477":[3,6,21],"478":[2,6,92],"479":[3,6,78],"480":[3,6,121],"481":[3,6,2],"482":[2,4,13],"483":[3,6,57],"484":[3,6,144],"485":[1,8,141],"486":[1,8,43],"487":[2,6,37],"488":[3,7,1],"489":[1,9,64],"490":[1,9,96],"491":[1,9,173],"492":[3,7,92],"493":[3,6,1],"494":[2,4,48],"495":[2,2,76],"496":[2,4,37],"497":[2,6,2],"498":[3,6,58],"499":[3,6,105],"500":[3,6,65],"501":[2,4,6],"502":[3,6,157],"503":[2,6,98],"504":[2,6,119],"505":[3,6,286],"506":[2,4,34],"507":[2,2,56],"508":[2,4,1],"509":[2,6,1],"510":[2,7,53],"511":[3,7,117],"512":[3,7,46],"513":[3,6,11],"514":[3,8,125],"515":[3,8,74],"516":[2,4,1],"517":[3,6,162],"518":[2,6,28],"519":[2,4,16],"520":[2,1,1],"521":[2,2,1],"522":[2,4,15],"523":[2,4,18],"524":[2,2,1],"525":[2,4,34],"526":[2,4,19],"527":[2,2,1],"528":[2,4,25],"529":[2,4,7],"530":[3,6,14],"531":[2,6,7],"532":[4,4,19],"533":[2,4,20],"534":[2,4,13],"535":[4,6,8],"536":[4,6,10],"537":[4,6,12],"538":[4,6,14],"539":[3,6,11],"540":[2,4,33],"541":[4,6,18],"542":[5,6,9],"543":[4,6,22],"544":[4,6,21],"545":[2,4,26],"546":[3,6,9],"547":[3,6,5],"548":[3,6,9],"549":[3,6,7],"550":[3,6,11],"551":[1,1,1],"552":[2,1,1],"553":[1,1,1],"554":[2,1,1],"555":[2,1,1],"556":[2,1,1],"557":[2,2,2],"558":[2,2,44],"559":[2,2,1],"560":[2,2,82],"561":[3,2,1],"562":[2,4,4],"563":[2,4,53],"564":[2,4,14],"565":[2,1,1],"566":[2,2,1],"567":[2,4,3],"568":[2,4,3],"569":[2,2,1],"570":[2,4,31],"571":[2,4,1],"572":[4,6,36],"573":[2,6,37],"574":[2,2,1],"575":[2,4,17],"576":[4,4,4],"577":[2,4,5],"578":[2,2,2],"579":[2,4,12],"580":[2,4,77],"581":[2,4,36],"582":[2,4,62],"583":[2,4,47],"584":[2,4,88],"585":[2,4,69],"586":[2,4,9],"587":[2,2,8],"588":[2,4,5],"589":[2,6,28],"590":[3,6,4],"591":[3,6,2],"592":[3,6,1],"593":[2,2,1],"594":[2,4,3],"595":[2,4,60],"596":[2,4,49],"597":[2,4,67],"598":[2,4,152],"599":[2,4,1],"600":[5,6,41],"601":[3,6,62],"602":[2,4,45],"603":[2,2,3],"604":[2,4,13],"605":[2,4,24],"606":[2,4,70],"607":[2,4,1],"608":[3,6,47],"609":[3,6,47],"610":[3,6,17],"611":[2,4,114],"612":[2,4,36],"613":[2,4,44],"614":[3,2,1],"615":[4,5,32],"616":[2,5,5],"617":[2,5,67],"618":[2,2,1],"619":[2,4,20],"620":[2,4,27],"621":[2,4,3],"622":[2,4,32],"623":[2,2,1],"624":[2,4,7],"625":[2,4,16],"626":[2,4,1],"627":[7,6,35],"628":[3,6,7],"629":[2,6,58],"630":[4,7,10],"631":[4,7,36],"632":[3,7,2],"633":[4,6,4],"634":[2,4,1],"635":[7,6,47],"636":[3,6,2],"637":[3,6,8],"638":[3,6,4],"639":[3,6,1],"640":[4,8,4],"641":[5,8,47],"642":[4,8,5],"643":[3,8,43],"644":[3,8,30],"645":[2,4,1],"646":[3,6,4],"647":[3,6,19],"648":[4,4,11],"649":[2,2,15],"650":[2,4,5],"651":[2,4,1],"652":[3,6,18],"653":[2,6,18],"654":[3,6,1],"655":[6,8,49],"656":[3,8,17],"657":[2,4,1],"658":[3,6,23],"659":[3,6,1],"660":[7,8,88],"661":[3,8,5],"662":[3,8,7],"663":[2,6,1],"664":[4,7,5],"665":[3,7,6],"666":[4,7,3],"667":[3,4,1],"668":[3,7,43],"669":[4,7,3],"670":[6,9,45],"671":[3,9,33],"672":[4,9,5],"673":[4,9,28],"674":[4,9,13],"675":[3,7,56],"676":[2,2,1],"677":[2,4,4],"678":[2,4,16],"679":[2,4,9],"680":[2,4,52],"681":[2,2,1],"682":[4,4,4],"683":[4,4,2],"684":[5,4,11],"685":[4,4,5],"686":[5,4,31],"687":[5,4,11],"688":[4,4,38],"689":[4,4,38],"690":[2,2,10],"691":[2,4,8],"692":[2,6,43],"693":[3,6,1],"694":[3,8,45],"695":[3,8,57],"696":[4,8,116],"697":[2,4,1],"698":[3,6,8],"699":[2,6,6],"700":[2,4,1],"701":[3,6,12],"702":[3,6,3],"703":[2,2,10],"704":[2,4,88],"705":[2,4,1],"706":[3,6,5],"707":[2,6,3],"708":[3,7,49],"709":[3,7,18],"710":[3,7,6],"711":[2,4,1],"712":[3,6,19],"713":[3,6,44],"714":[2,6,34],"715":[2,2,1],"716":[3,4,17],"717":[4,4,11]},"averageFieldLength":[3.5055710306406747,4.486072423398329,28.68941504178273],"storedFields":{"0":{"title":"Java JVM深入理解","titles":[]},"1":{"title":"一、Java内存区域","titles":["Java JVM深入理解"]},"2":{"title":"1 JVM 的主要组成部分及其作用？","titles":["Java JVM深入理解","一、Java内存区域"]},"3":{"title":"2  JVM 运行时数据区","titles":["Java JVM深入理解","一、Java内存区域"]},"4":{"title":"3 深拷贝和浅拷贝","titles":["Java JVM深入理解","一、Java内存区域"]},"5":{"title":"4 说一下堆栈的区别？","titles":["Java JVM深入理解","一、Java内存区域"]},"6":{"title":"5 队列和栈是什么？有什么区别？","titles":["Java JVM深入理解","一、Java内存区域"]},"7":{"title":"二、HotSpot虚拟机对象探秘","titles":["Java JVM深入理解"]},"8":{"title":"1 对象的创建","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘"]},"9":{"title":"2 为对象分配内存","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘"]},"10":{"title":"3 处理并发安全问题","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘"]},"11":{"title":"4 对象的访问定位","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘"]},"12":{"title":"4.1 句柄访问","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘","4 对象的访问定位"]},"13":{"title":"4.2 直接指针","titles":["Java JVM深入理解","二、HotSpot虚拟机对象探秘","4 对象的访问定位"]},"14":{"title":"三、内存溢出异常","titles":["Java JVM深入理解"]},"15":{"title":"1 Java会存在内存泄漏吗？请简单描述","titles":["Java JVM深入理解","三、内存溢出异常"]},"16":{"title":"四、垃圾收集器","titles":["Java JVM深入理解"]},"17":{"title":"1 简述Java垃圾回收机制","titles":["Java JVM深入理解","四、垃圾收集器"]},"18":{"title":"2 GC是什么？为什么要GC","titles":["Java JVM深入理解","四、垃圾收集器"]},"19":{"title":"3 垃圾回收的优点和原理。并考虑2种回收机制","titles":["Java JVM深入理解","四、垃圾收集器"]},"20":{"title":"4 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？","titles":["Java JVM深入理解","四、垃圾收集器"]},"21":{"title":"5 Java 中都有哪些引用类型？","titles":["Java JVM深入理解","四、垃圾收集器"]},"22":{"title":"6 怎么判断对象是否可以被回收？","titles":["Java JVM深入理解","四、垃圾收集器"]},"23":{"title":"7 在Java中，对象什么时候可以被垃圾回收","titles":["Java JVM深入理解","四、垃圾收集器"]},"24":{"title":"8 JVM中的永久代中会发生垃圾回收吗","titles":["Java JVM深入理解","四、垃圾收集器"]},"25":{"title":"9 说一下 JVM 有哪些垃圾回收算法？","titles":["Java JVM深入理解","四、垃圾收集器"]},"26":{"title":"9.1 标记-清除算法","titles":["Java JVM深入理解","四、垃圾收集器","9 说一下 JVM 有哪些垃圾回收算法？"]},"27":{"title":"9.2 复制算法","titles":["Java JVM深入理解","四、垃圾收集器","9 说一下 JVM 有哪些垃圾回收算法？"]},"28":{"title":"9.3 标记-整理算法","titles":["Java JVM深入理解","四、垃圾收集器","9 说一下 JVM 有哪些垃圾回收算法？"]},"29":{"title":"9.4 分代收集算法","titles":["Java JVM深入理解","四、垃圾收集器","9 说一下 JVM 有哪些垃圾回收算法？"]},"30":{"title":"10 JVM 有哪些垃圾回收器？","titles":["Java JVM深入理解","四、垃圾收集器"]},"31":{"title":"11 详细介绍一下 CMS 垃圾回收器？","titles":["Java JVM深入理解","四、垃圾收集器"]},"32":{"title":"12 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？","titles":["Java JVM深入理解","四、垃圾收集器"]},"33":{"title":"13 简述分代垃圾回收器是怎么工作的？","titles":["Java JVM深入理解","四、垃圾收集器"]},"34":{"title":"Java基础","titles":[]},"35":{"title":"一、Java语言理解","titles":["Java基础"]},"36":{"title":"1 JVM、JRE和JDK的关系","titles":["Java基础","一、Java语言理解"]},"37":{"title":"2 Java语言有哪些特点","titles":["Java基础","一、Java语言理解"]},"38":{"title":"3 什么是字节码？采用字节码的最大好处是什么","titles":["Java基础","一、Java语言理解"]},"39":{"title":"4 什么是Java程序的主类？应用程序和小程序的主类有何不同？","titles":["Java基础","一、Java语言理解"]},"40":{"title":"5 Java应用程序与小程序之间有那些差别？","titles":["Java基础","一、Java语言理解"]},"41":{"title":"6 Java和C++的区别","titles":["Java基础","一、Java语言理解"]},"42":{"title":"7 Oracle JDK 和 OpenJDK 的对比","titles":["Java基础","一、Java语言理解"]},"43":{"title":"二、Java基础语法","titles":["Java基础"]},"44":{"title":"1 数据类型","titles":["Java基础","二、Java基础语法"]},"45":{"title":"1.1 Java有哪些数据类型","titles":["Java基础","二、Java基础语法","1 数据类型"]},"46":{"title":"1.2 switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上","titles":["Java基础","二、Java基础语法","1 数据类型"]},"47":{"title":"1.3 float f=3.4;是否正确","titles":["Java基础","二、Java基础语法","1 数据类型"]},"48":{"title":"1.4 short s1 = 1; s1 = s1 + 1;有错吗?","titles":["Java基础","二、Java基础语法","1 数据类型"]},"49":{"title":"2 Java编码方案和特点","titles":["Java基础","二、Java基础语法"]},"50":{"title":"3 访问修饰符","titles":["Java基础","二、Java基础语法"]},"51":{"title":"4 运算符","titles":["Java基础","二、Java基础语法"]},"52":{"title":"5 关键字","titles":["Java基础","二、Java基础语法"]},"53":{"title":"5.1 final 有什么用？","titles":["Java基础","二、Java基础语法","5 关键字"]},"54":{"title":"5.2 final finally finalize区别","titles":["Java基础","二、Java基础语法","5 关键字"]},"55":{"title":"5.3 this与super的区别","titles":["Java基础","二、Java基础语法","5 关键字"]},"56":{"title":"5.4 static","titles":["Java基础","二、Java基础语法","5 关键字"]},"57":{"title":"6 流程控制语句","titles":["Java基础","二、Java基础语法"]},"58":{"title":"三、面向对象","titles":["Java基础"]},"59":{"title":"1 面向对象和面向过程的区别","titles":["Java基础","三、面向对象"]},"60":{"title":"2 面向对象三大特性","titles":["Java基础","三、面向对象"]},"61":{"title":"2.1 什么是多态机制？Java语言是如何实现多态的？","titles":["Java基础","三、面向对象","2 面向对象三大特性"]},"62":{"title":"2.2 面向对象五大基本原则是什么","titles":["Java基础","三、面向对象","2 面向对象三大特性"]},"63":{"title":"3 类与接口","titles":["Java基础","三、面向对象"]},"64":{"title":"3.1 抽象类和接口的对比","titles":["Java基础","三、面向对象","3 类与接口"]},"65":{"title":"3.2 普通类和抽象类有哪些区别？","titles":["Java基础","三、面向对象","3 类与接口"]},"66":{"title":"3.3 抽象类能使用 final 修饰吗？","titles":["Java基础","三、面向对象","3 类与接口"]},"67":{"title":"3.4 创建一个对象用什么关键字？对象实例与对象引用有何不同？","titles":["Java基础","三、面向对象","3 类与接口"]},"68":{"title":"4 变量与方法","titles":["Java基础","三、面向对象"]},"69":{"title":"4.1 成员变量与局部变量的区别有哪些","titles":["Java基础","三、面向对象","4 变量与方法"]},"70":{"title":"4.2 在Java中定义一个不做事且没有参数的构造方法的作用","titles":["Java基础","三、面向对象","4 变量与方法"]},"71":{"title":"4.3 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？","titles":["Java基础","三、面向对象","4 变量与方法"]},"72":{"title":"4.4 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？","titles":["Java基础","三、面向对象","4 变量与方法"]},"73":{"title":"4.5 构造方法有哪些特性？","titles":["Java基础","三、面向对象","4 变量与方法"]},"74":{"title":"4.6 静态变量和实例变量区别","titles":["Java基础","三、面向对象","4 变量与方法"]},"75":{"title":"4.7 静态变量与普通变量区别","titles":["Java基础","三、面向对象","4 变量与方法"]},"76":{"title":"4.8 静态方法和实例方法有何不同？","titles":["Java基础","三、面向对象","4 变量与方法"]},"77":{"title":"4.9 在一个静态方法内调用一个非静态成员为什么是非法的？","titles":["Java基础","三、面向对象","4 变量与方法"]},"78":{"title":"4.10 什么是方法的返回值？返回值的作用是什么？","titles":["Java基础","三、面向对象","4 变量与方法"]},"79":{"title":"5 内部类","titles":["Java基础","三、面向对象"]},"80":{"title":"5.1 什么是内部类？","titles":["Java基础","三、面向对象","5 内部类"]},"81":{"title":"5.2 内部类的分类有哪些","titles":["Java基础","三、面向对象","5 内部类"]},"82":{"title":"5.2.1 静态内部类","titles":["Java基础","三、面向对象","5 内部类","5.2 内部类的分类有哪些"]},"83":{"title":"5.2.2 成员内部类","titles":["Java基础","三、面向对象","5 内部类","5.2 内部类的分类有哪些"]},"84":{"title":"5.2.3 局部内部类","titles":["Java基础","三、面向对象","5 内部类","5.2 内部类的分类有哪些"]},"85":{"title":"5.2.4 匿名内部类","titles":["Java基础","三、面向对象","5 内部类","5.2 内部类的分类有哪些"]},"86":{"title":"5.3 内部类的优点","titles":["Java基础","三、面向对象","5 内部类"]},"87":{"title":"5.4 内部类有哪些应用场景","titles":["Java基础","三、面向对象","5 内部类"]},"88":{"title":"5.5 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？","titles":["Java基础","三、面向对象","5 内部类"]},"89":{"title":"5.6 内部类相关，看程序说出运行结果","titles":["Java基础","三、面向对象","5 内部类"]},"90":{"title":"6 重写与重载","titles":["Java基础","三、面向对象"]},"91":{"title":"6.1 构造器（constructor）是否可被重写（override）","titles":["Java基础","三、面向对象","6 重写与重载"]},"92":{"title":"6.2 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？","titles":["Java基础","三、面向对象","6 重写与重载"]},"93":{"title":"7 对象相等判断","titles":["Java基础","三、面向对象"]},"94":{"title":"7.1 == 和 equals 的区别是什么","titles":["Java基础","三、面向对象","7 对象相等判断"]},"95":{"title":"7.2 hashCode 与 equals (重要)","titles":["Java基础","三、面向对象","7 对象相等判断"]},"96":{"title":"7.3 对象的相等与指向他们的引用相等，两者有什么不同？","titles":["Java基础","三、面向对象","7 对象相等判断"]},"97":{"title":"8 值传递","titles":["Java基础","三、面向对象"]},"98":{"title":"8.1 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递","titles":["Java基础","三、面向对象","8 值传递"]},"99":{"title":"8.2 为什么 Java 中只有值传递","titles":["Java基础","三、面向对象","8 值传递"]},"100":{"title":"值传递和引用传递有什么区别","titles":["Java基础","三、面向对象","8 值传递"]},"101":{"title":"9 Java包","titles":["Java基础","三、面向对象"]},"102":{"title":"9.1 JDK 中常用的包有哪些","titles":["Java基础","三、面向对象","9 Java包"]},"103":{"title":"9.2 import java和javax有什么区别","titles":["Java基础","三、面向对象","9 Java包"]},"104":{"title":"三、IO流","titles":["Java基础"]},"105":{"title":"1 java 中 IO 流分为几种?","titles":["Java基础","三、IO流"]},"106":{"title":"2 BIO,NIO,AIO 有什么区别?","titles":["Java基础","三、IO流"]},"107":{"title":"3 Files的常用方法都有哪些？","titles":["Java基础","三、IO流"]},"108":{"title":"四、反射","titles":["Java基础"]},"109":{"title":"1 什么是反射机制？","titles":["Java基础","四、反射"]},"110":{"title":"2 反射机制优缺点","titles":["Java基础","四、反射"]},"111":{"title":"3 反射机制的应用场景有哪些？","titles":["Java基础","四、反射"]},"112":{"title":"4 Java获取反射的三种方法","titles":["Java基础","四、反射"]},"113":{"title":"五、常用API","titles":["Java基础"]},"114":{"title":"1 String相关","titles":["Java基础","五、常用API"]},"115":{"title":"1.1 字符型常量和字符串常量的区别","titles":["Java基础","五、常用API","1 String相关"]},"116":{"title":"1.2 什么是字符串常量池？","titles":["Java基础","五、常用API","1 String相关"]},"117":{"title":"1.3 String 是最基本的数据类型吗","titles":["Java基础","五、常用API","1 String相关"]},"118":{"title":"1.4 String有哪些特性","titles":["Java基础","五、常用API","1 String相关"]},"119":{"title":"1.5 String为什么是不可变的吗？","titles":["Java基础","五、常用API","1 String相关"]},"120":{"title":"1.6 String真的是不可变的吗？","titles":["Java基础","五、常用API","1 String相关"]},"121":{"title":"1.7 是否可以继承 String 类","titles":["Java基础","五、常用API","1 String相关"]},"122":{"title":"1.8 String str=&quot;i&quot;与 String str=new String(“i”)一样吗？","titles":["Java基础","五、常用API","1 String相关"]},"123":{"title":"1.9 String s = new String(“xyz”);创建了几个字符串对象","titles":["Java基础","五、常用API","1 String相关"]},"124":{"title":"1.10 如何将字符串反转？","titles":["Java基础","五、常用API","1 String相关"]},"125":{"title":"1.11 数组有没有 length()方法？String 有没有 length()方法","titles":["Java基础","五、常用API","1 String相关"]},"126":{"title":"1.12 String 类的常用方法都有那些？","titles":["Java基础","五、常用API","1 String相关"]},"127":{"title":"1.13 在使用 HashMap 的时候，用 String 做 key 有什么好处？","titles":["Java基础","五、常用API","1 String相关"]},"128":{"title":"1.14 String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的","titles":["Java基础","五、常用API","1 String相关"]},"129":{"title":"1.15 String、StringBuffer、StringBuilder三者区别是什么？","titles":["Java基础","五、常用API","1 String相关"]},"130":{"title":"六、包装类相关","titles":["Java基础","五、常用API"]},"131":{"title":"1 自动装箱与拆箱","titles":["Java基础","五、常用API","六、包装类相关"]},"132":{"title":"2 int 和 Integer 有什么区别","titles":["Java基础","五、常用API","六、包装类相关"]},"133":{"title":"3 Integer a= 127 与 Integer b = 127相等吗","titles":["Java基础","五、常用API","六、包装类相关"]},"134":{"title":"Java并发编程","titles":[]},"135":{"title":"一、并发编程基础知识","titles":["Java并发编程"]},"136":{"title":"1 并发编程的优缺点","titles":["Java并发编程","一、并发编程基础知识"]},"137":{"title":"1.1 为什么要使用并发编程（并发编程的优点）","titles":["Java并发编程","一、并发编程基础知识","1 并发编程的优缺点"]},"138":{"title":"1.2 并发编程有什么缺点","titles":["Java并发编程","一、并发编程基础知识","1 并发编程的优缺点"]},"139":{"title":"1.3 并发编程三要素是什么？在 Java 程序中怎么保证多线程的运行安全？","titles":["Java并发编程","一、并发编程基础知识","1 并发编程的优缺点"]},"140":{"title":"1.4 并行和并发有什么区别？","titles":["Java并发编程","一、并发编程基础知识","1 并发编程的优缺点"]},"141":{"title":"1.5 什么是多线程，多线程的优劣？","titles":["Java并发编程","一、并发编程基础知识","1 并发编程的优缺点"]},"142":{"title":"2 线程和进程区别","titles":["Java并发编程","一、并发编程基础知识"]},"143":{"title":"2.1 什么是线程和进程?","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"144":{"title":"2.2 进程与线程的区别","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"145":{"title":"2.3 什么是上下文切换?","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"146":{"title":"2.4 守护线程和用户线程有什么区别呢？","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"147":{"title":"2.5 如何在 Windows 和 Linux 上查找哪个线程cpu利用率最高？","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"148":{"title":"2.6 什么是线程死锁","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"149":{"title":"2.7 形成死锁的四个必要条件是什么","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"150":{"title":"2.8 如何避免线程死锁","titles":["Java并发编程","一、并发编程基础知识","2 线程和进程区别"]},"151":{"title":"3 创建线程的四种方式","titles":["Java并发编程","一、并发编程基础知识"]},"152":{"title":"3.1 创建线程有哪几种方式？","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"153":{"title":"3.2 说一下 runnable 和 callable 有什么区别？","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"154":{"title":"3.3 线程的 run()和 start()有什么区别？","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"155":{"title":"3.4 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"156":{"title":"3.5 什么是 Callable 和 Future?","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"157":{"title":"3.6 什么是 FutureTask","titles":["Java并发编程","一、并发编程基础知识","3 创建线程的四种方式"]},"158":{"title":"4 线程的状态和基本操作","titles":["Java并发编程","一、并发编程基础知识"]},"159":{"title":"4.1 说说线程的生命周期及五种基本状态？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"160":{"title":"4.2 Java 中用到的线程调度算法是什么？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"161":{"title":"4.3 线程的调度策略","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"162":{"title":"4.4 什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"163":{"title":"4.5 请说出与线程同步以及线程调度相关的方法。","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"164":{"title":"4.6 sleep() 和 wait() 有什么区别？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"165":{"title":"4.7 你是如何调用 wait() 方法的？使用 if 块还是循环？为什么？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"166":{"title":"4.8 为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"167":{"title":"4.9 为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"168":{"title":"4.10 Thread 类中的 yield 方法有什么作用？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"169":{"title":"4.11 为什么 Thread 类的 sleep()和 yield ()方法是静态的？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"170":{"title":"4.12 线程的 sleep()方法和 yield()方法有什么区别？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"171":{"title":"4.13 如何停止一个正在运行的线程？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"172":{"title":"4.14 Java 中 interrupted 和 isInterrupted 方法的区别？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"173":{"title":"4.15 什么是阻塞式方法？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"174":{"title":"4.16 Java 中你怎样唤醒一个阻塞的线程？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"175":{"title":"4.17 notify() 和 notifyAll() 有什么区别？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"176":{"title":"4.18 如何在两个线程间共享数据？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"177":{"title":"4.19 Java 如何实现多线程之间的通讯和协作？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"178":{"title":"4.20 同步方法和同步块，哪个是更好的选择？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"179":{"title":"4.21 什么是线程同步和线程互斥，有哪几种实现方式？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"180":{"title":"4.22 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"181":{"title":"4.23 如果你提交任务时，线程池队列已满，这时会发生什么","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"182":{"title":"4.24 什么叫线程安全？servlet 是线程安全吗?","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"183":{"title":"4.25 在 Java 程序中怎么保证多线程的运行安全？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"184":{"title":"4.26 你对线程优先级的理解是什么？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"185":{"title":"4.27 线程类的构造方法、静态块是被哪个线程调用的","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"186":{"title":"4.28 Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"187":{"title":"4.29 一个线程运行时发生异常会怎样？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"188":{"title":"4.30 Java 线程数过多会造成什么异常？","titles":["Java并发编程","一、并发编程基础知识","4 线程的状态和基本操作"]},"189":{"title":"二、并发理论","titles":["Java并发编程"]},"190":{"title":"1 Java内存模型","titles":["Java并发编程","二、并发理论"]},"191":{"title":"1.1 Java中垃圾回收有什么目的？什么时候进行垃圾回收？","titles":["Java并发编程","二、并发理论","1 Java内存模型"]},"192":{"title":"1.2 如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？","titles":["Java并发编程","二、并发理论","1 Java内存模型"]},"193":{"title":"1.3 finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？","titles":["Java并发编程","二、并发理论","1 Java内存模型"]},"194":{"title":"2 重排序与数据依赖性","titles":["Java并发编程","二、并发理论"]},"195":{"title":"2.1 为什么代码会重排序？","titles":["Java并发编程","二、并发理论","2 重排序与数据依赖性"]},"196":{"title":"2.2 as-if-serial规则和happens-before规则的区别","titles":["Java并发编程","二、并发理论"]},"197":{"title":"三、并发关键字","titles":["Java并发编程"]},"198":{"title":"1 synchronized","titles":["Java并发编程","三、并发关键字"]},"199":{"title":"1.1 synchronized 的作用？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"200":{"title":"1.2 说说自己是怎么使用 synchronized 关键字，在项目中用到了吗","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"201":{"title":"1.3 说一下 synchronized 底层实现原理？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"202":{"title":"1.4 什么是自旋","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"203":{"title":"1.5 多线程中 synchronized 锁升级的原理是什么？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"204":{"title":"1.6 线程 B 怎么知道线程 A 修改了变量","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"205":{"title":"1.7 当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"206":{"title":"1.8 synchronized、volatile、CAS 比较","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"207":{"title":"1.9 synchronized 和 Lock 有什么区别？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"208":{"title":"1.10 synchronized 和 ReentrantLock 区别是什么？","titles":["Java并发编程","三、并发关键字","1 synchronized"]},"209":{"title":"2 volatile","titles":["Java并发编程","三、并发关键字"]},"210":{"title":"2.1 volatile 关键字的作用","titles":["Java并发编程","三、并发关键字","2 volatile"]},"211":{"title":"2.2 Java 中能创建 volatile 数组吗？","titles":["Java并发编程","三、并发关键字","2 volatile"]},"212":{"title":"2.3 volatile 变量和 atomic 变量有什么不同？","titles":["Java并发编程","三、并发关键字","2 volatile"]},"213":{"title":"2.4 volatile 能使得一个非原子操作变成原子操作吗？","titles":["Java并发编程","三、并发关键字","2 volatile"]},"214":{"title":"2.5 volatile 修饰符的有过什么实践？","titles":["Java并发编程","三、并发关键字","2 volatile"]},"215":{"title":"2.6 synchronized 和 volatile 的区别是什么？","titles":["Java并发编程","三、并发关键字","2 volatile"]},"216":{"title":"3 final","titles":["Java并发编程","三、并发关键字"]},"217":{"title":"3.1 什么是不可变对象，它对写并发应用有什么帮助？","titles":["Java并发编程","三、并发关键字","3 final"]},"218":{"title":"四、Lock体系","titles":["Java并发编程"]},"219":{"title":"1 Lock简介与初识AQS","titles":["Java并发编程","四、Lock体系"]},"220":{"title":"1.1 Java Concurrency API 中的 Lock 接口(Lock interface)是什么？对比同步它有什么优势？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"221":{"title":"1.2 乐观锁和悲观锁的理解及如何实现，有哪些实现方式？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"222":{"title":"1.3 什么是 CAS","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"223":{"title":"1.4 CAS 的会产生什么问题？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"224":{"title":"1.5 什么是死锁？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"225":{"title":"1.6 产生死锁的条件是什么？怎么防止死锁？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"226":{"title":"1.7 死锁与活锁的区别，死锁与饥饿的区别？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"227":{"title":"1.8 多线程锁的升级原理是什么？","titles":["Java并发编程","四、Lock体系","1 Lock简介与初识AQS"]},"228":{"title":"2 AQS(AbstractQueuedSynchronizer)详解与源码分析","titles":["Java并发编程","四、Lock体系"]},"229":{"title":"2.1 AQS 介绍","titles":["Java并发编程","四、Lock体系","2 AQS(AbstractQueuedSynchronizer)详解与源码分析"]},"230":{"title":"2.2 AQS 原理分析","titles":["Java并发编程","四、Lock体系","2 AQS(AbstractQueuedSynchronizer)详解与源码分析"]},"231":{"title":"3 ReentrantLock(重入锁)实现原理与公平锁非公平锁区别","titles":["Java并发编程","四、Lock体系"]},"232":{"title":"3.1 什么是可重入锁（ReentrantLock）？","titles":["Java并发编程","四、Lock体系","3 ReentrantLock(重入锁)实现原理与公平锁非公平锁区别"]},"233":{"title":"4 读写锁ReentrantReadWriteLock源码分析","titles":["Java并发编程","四、Lock体系"]},"234":{"title":"4.1 ReadWriteLock 是什么","titles":["Java并发编程","四、Lock体系","4 读写锁ReentrantReadWriteLock源码分析"]},"235":{"title":"五、并发容器","titles":["Java并发编程"]},"236":{"title":"1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析","titles":["Java并发编程","五、并发容器"]},"237":{"title":"1.1 什么是ConcurrentHashMap？","titles":["Java并发编程","五、并发容器","1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析"]},"238":{"title":"1.2 Java 中 ConcurrentHashMap 的并发度是什么？","titles":["Java并发编程","五、并发容器","1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析"]},"239":{"title":"1.3 什么是并发容器的实现？","titles":["Java并发编程","五、并发容器","1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析"]},"240":{"title":"1.4 Java 中的同步集合与并发集合有什么区别？","titles":["Java并发编程","五、并发容器","1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析"]},"241":{"title":"1.5 SynchronizedMap 和 ConcurrentHashMap 有什么区别？","titles":["Java并发编程","五、并发容器","1 并发容器之ConcurrentHashMap详解(JDK1.8版本)与源码分析"]},"242":{"title":"2 并发容器之CopyOnWriteArrayList详解","titles":["Java并发编程","五、并发容器"]},"243":{"title":"2.1 CopyOnWriteArrayList 是什么，可以用于什么应用场景？有哪些优缺点？","titles":["Java并发编程","五、并发容器","2 并发容器之CopyOnWriteArrayList详解"]},"244":{"title":"3 并发容器之ThreadLocal详解","titles":["Java并发编程","五、并发容器"]},"245":{"title":"3.1 ThreadLocal 是什么？有哪些使用场景？","titles":["Java并发编程","五、并发容器","3 并发容器之ThreadLocal详解"]},"246":{"title":"3.2 什么是线程局部变量？","titles":["Java并发编程","五、并发容器","3 并发容器之ThreadLocal详解"]},"247":{"title":"4 ThreadLocal内存泄漏分析与解决方案","titles":["Java并发编程","五、并发容器"]},"248":{"title":"4.1 ThreadLocal造成内存泄漏的原因？","titles":["Java并发编程","五、并发容器","4 ThreadLocal内存泄漏分析与解决方案"]},"249":{"title":"4.2 ThreadLocal内存泄漏解决方案？","titles":["Java并发编程","五、并发容器","4 ThreadLocal内存泄漏分析与解决方案"]},"250":{"title":"5 并发容器之BlockingQueue详解","titles":["Java并发编程","五、并发容器"]},"251":{"title":"5.1 什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？","titles":["Java并发编程","五、并发容器","5 并发容器之BlockingQueue详解"]},"252":{"title":"六、线程池","titles":["Java并发编程"]},"253":{"title":"1 Executors类创建四种常见线程池","titles":["Java并发编程","六、线程池"]},"254":{"title":"1.1 什么是线程池？有哪几种创建方式？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"255":{"title":"1.2 线程池有什么优点？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"256":{"title":"1.3 线程池都有哪些状态？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"257":{"title":"1.4 什么是 Executor 框架？为什么使用 Executor 框架？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"258":{"title":"1.5 在 Java 中 Executor 和 Executors 的区别？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"259":{"title":"1.6 线程池中 submit() 和 execute() 方法有什么区别？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"260":{"title":"1.7 什么是线程组，为什么在 Java 中不推荐使用？","titles":["Java并发编程","六、线程池","1 Executors类创建四种常见线程池"]},"261":{"title":"2 线程池之ThreadPoolExecutor详解","titles":["Java并发编程","六、线程池"]},"262":{"title":"2.1 Executors和ThreaPoolExecutor创建线程池的区别","titles":["Java并发编程","六、线程池","2 线程池之ThreadPoolExecutor详解"]},"263":{"title":"2.2 你知道怎么创建线程池吗？","titles":["Java并发编程","六、线程池","2 线程池之ThreadPoolExecutor详解"]},"264":{"title":"2.3 ThreadPoolExecutor构造函数重要参数分析","titles":["Java并发编程","六、线程池","2 线程池之ThreadPoolExecutor详解"]},"265":{"title":"2.4 ThreadPoolExecutor饱和策略","titles":["Java并发编程","六、线程池","2 线程池之ThreadPoolExecutor详解"]},"266":{"title":"2.5 一个简单的线程池Demo:Runnable+ThreadPoolExecutor","titles":["Java并发编程","六、线程池","2 线程池之ThreadPoolExecutor详解"]},"267":{"title":"3 线程池之ScheduledThreadPoolExecutor详解","titles":["Java并发编程","六、线程池"]},"268":{"title":"4 FutureTask详解","titles":["Java并发编程","六、线程池"]},"269":{"title":"七、原子操作类","titles":["Java并发编程"]},"270":{"title":"1 什么是原子操作？在 Java Concurrency API 中有哪些原子类(atomic classes)？","titles":["Java并发编程","七、原子操作类"]},"271":{"title":"2 说一下 atomic 的原理？","titles":["Java并发编程","七、原子操作类"]},"272":{"title":"八、并发工具","titles":["Java并发编程"]},"273":{"title":"1 并发工具之CountDownLatch与CyclicBarrier","titles":["Java并发编程","八、并发工具"]},"274":{"title":"1.1 在 Java 中 CycliBarriar 和 CountdownLatch 有什么区别？","titles":["Java并发编程","八、并发工具","1 并发工具之CountDownLatch与CyclicBarrier"]},"275":{"title":"2 并发工具之Semaphore与Exchanger","titles":["Java并发编程","八、并发工具"]},"276":{"title":"2.1 Semaphore 有什么作用","titles":["Java并发编程","八、并发工具","2 并发工具之Semaphore与Exchanger"]},"277":{"title":"2.2 什么是线程间交换数据的工具Exchanger","titles":["Java并发编程","八、并发工具","2 并发工具之Semaphore与Exchanger"]},"278":{"title":"2.3 常用的并发工具类有哪些？","titles":["Java并发编程","八、并发工具","2 并发工具之Semaphore与Exchanger"]},"279":{"title":"Java异常","titles":[]},"280":{"title":"一、Java异常认知","titles":["Java异常"]},"281":{"title":"1 Java异常简介","titles":["Java异常","一、Java异常认知"]},"282":{"title":"2 Java异常架构","titles":["Java异常","一、Java异常认知"]},"283":{"title":"2.1 Throwable","titles":["Java异常","一、Java异常认知","2 Java异常架构"]},"284":{"title":"2.2 Error（错误）","titles":["Java异常","一、Java异常认知","2 Java异常架构"]},"285":{"title":"2.3 Exception（异常）","titles":["Java异常","一、Java异常认知","2 Java异常架构"]},"286":{"title":"2.3.1 运行时异常","titles":["Java异常","一、Java异常认知","2 Java异常架构","2.3 Exception（异常）"]},"287":{"title":"2.3.2 编译时异常","titles":["Java异常","一、Java异常认知","2 Java异常架构","2.3 Exception（异常）"]},"288":{"title":"2.4 受检异常与非受检异常","titles":["Java异常","一、Java异常认知","2 Java异常架构"]},"289":{"title":"3 Java异常关键字","titles":["Java异常","一、Java异常认知"]},"290":{"title":"二、Java异常处理","titles":["Java异常"]},"291":{"title":"1 声明异常","titles":["Java异常","二、Java异常处理"]},"292":{"title":"2 抛出异常","titles":["Java异常","二、Java异常处理"]},"293":{"title":"3 捕获异常","titles":["Java异常","二、Java异常处理"]},"294":{"title":"4 如何选择异常类型","titles":["Java异常","二、Java异常处理"]},"295":{"title":"5 常见异常处理方式","titles":["Java异常","二、Java异常处理"]},"296":{"title":"5.1 直接抛出异常","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"297":{"title":"5.2 封装异常再抛出","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"298":{"title":"5.3 捕获异常","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"299":{"title":"5.4 自定义异常","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"300":{"title":"5.5 try-catch-finally","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"301":{"title":"5.6 try-with-resource","titles":["Java异常","二、Java异常处理","5 常见异常处理方式"]},"302":{"title":"三、Java异常常见面试题","titles":["Java异常"]},"303":{"title":"1 Error 和 Exception 区别是什么？","titles":["Java异常","三、Java异常常见面试题"]},"304":{"title":"2 运行时异常和一般异常(受检异常)区别是什么？","titles":["Java异常","三、Java异常常见面试题"]},"305":{"title":"3 JVM 是如何处理异常的？","titles":["Java异常","三、Java异常常见面试题"]},"306":{"title":"4 throw 和 throws 的区别是什么？","titles":["Java异常","三、Java异常常见面试题"]},"307":{"title":"5 final、finally、finalize 有什么区别？","titles":["Java异常","三、Java异常常见面试题"]},"308":{"title":"6 NoClassDefFoundError 和 ClassNotFoundException 区别？","titles":["Java异常","三、Java异常常见面试题"]},"309":{"title":"7 try-catch-finally 中哪个部分可以省略？","titles":["Java异常","三、Java异常常见面试题"]},"310":{"title":"8 try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？","titles":["Java异常","三、Java异常常见面试题"]},"311":{"title":"9 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。","titles":["Java异常","三、Java异常常见面试题"]},"312":{"title":"10 常见的 RuntimeException 有哪些？","titles":["Java异常","三、Java异常常见面试题"]},"313":{"title":"11 Java常见异常有哪些","titles":["Java异常","三、Java异常常见面试题"]},"314":{"title":"四、Java异常处理最佳实践","titles":["Java异常"]},"315":{"title":"1 在 finally 块中清理资源或者使用 try-with-resource 语句","titles":["Java异常","四、Java异常处理最佳实践"]},"316":{"title":"1.1 使用 finally 代码块","titles":["Java异常","四、Java异常处理最佳实践","1 在 finally 块中清理资源或者使用 try-with-resource 语句"]},"317":{"title":"1.2 Java 7 的 try-with-resource 语法","titles":["Java异常","四、Java异常处理最佳实践","1 在 finally 块中清理资源或者使用 try-with-resource 语句"]},"318":{"title":"2 优先明确的异常","titles":["Java异常","四、Java异常处理最佳实践"]},"319":{"title":"3 对异常进行文档说明","titles":["Java异常","四、Java异常处理最佳实践"]},"320":{"title":"4 使用描述性消息抛出异常","titles":["Java异常","四、Java异常处理最佳实践"]},"321":{"title":"5 优先捕获最具体的异常","titles":["Java异常","四、Java异常处理最佳实践"]},"322":{"title":"6 不要捕获 Throwable 类","titles":["Java异常","四、Java异常处理最佳实践"]},"323":{"title":"7 不要忽略异常","titles":["Java异常","四、Java异常处理最佳实践"]},"324":{"title":"8 不要记录并抛出异常","titles":["Java异常","四、Java异常处理最佳实践"]},"325":{"title":"9 包装异常时不要抛弃原始的异常","titles":["Java异常","四、Java异常处理最佳实践"]},"326":{"title":"10 不要使用异常控制程序的流程","titles":["Java异常","四、Java异常处理最佳实践"]},"327":{"title":"11 使用标准异常","titles":["Java异常","四、Java异常处理最佳实践"]},"328":{"title":"12 异常会影响性能","titles":["Java异常","四、Java异常处理最佳实践"]},"329":{"title":"13 总结","titles":["Java异常","四、Java异常处理最佳实践"]},"330":{"title":"14 异常处理-阿里巴巴Java开发手册","titles":["Java异常","四、Java异常处理最佳实践"]},"331":{"title":"Java集合框架","titles":[]},"332":{"title":"一、集合框架理解","titles":["Java集合框架"]},"333":{"title":"1 什么是集合","titles":["Java集合框架","一、集合框架理解"]},"334":{"title":"2 集合的特点","titles":["Java集合框架","一、集合框架理解"]},"335":{"title":"3 集合和数组的区别","titles":["Java集合框架","一、集合框架理解"]},"336":{"title":"4 使用集合框架的好处","titles":["Java集合框架","一、集合框架理解"]},"337":{"title":"5 常用的集合类有哪些？","titles":["Java集合框架","一、集合框架理解"]},"338":{"title":"6 List，Set，Map三者的区别？List、Set、Map 是否继承自 Collection 接口？List、Map、Set 三个接口存取元素时，各有什么特点？","titles":["Java集合框架","一、集合框架理解"]},"339":{"title":"7 集合框架底层数据结构","titles":["Java集合框架","一、集合框架理解"]},"340":{"title":"8 哪些集合类是线程安全的？","titles":["Java集合框架","一、集合框架理解"]},"341":{"title":"9 Java集合的快速失败机制 “fail-fast”？","titles":["Java集合框架","一、集合框架理解"]},"342":{"title":"10 怎么确保一个集合不能被修改？","titles":["Java集合框架","一、集合框架理解"]},"343":{"title":"二、Collection接口","titles":["Java集合框架"]},"344":{"title":"1 List接口","titles":["Java集合框架","二、Collection接口"]},"345":{"title":"1.1 迭代器 Iterator 是什么？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"346":{"title":"1.2 Iterator 怎么使用？有什么特点？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"347":{"title":"1.3 如何边遍历边移除 Collection 中的元素？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"348":{"title":"1.4 Iterator 和 ListIterator 有什么区别？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"349":{"title":"1.5 遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List 遍历的最佳实践是什么？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"350":{"title":"1.6 说一下 ArrayList 的优缺点","titles":["Java集合框架","二、Collection接口","1 List接口"]},"351":{"title":"1.7 如何实现数组和 List 之间的转换？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"352":{"title":"1.8 ArrayList 和 LinkedList 的区别是什么？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"353":{"title":"1.9 ArrayList 和 Vector 的区别是什么？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"354":{"title":"1.10 插入数据时，ArrayList、LinkedList、Vector谁速度较快？阐述 ArrayList、Vector、LinkedList 的存储性能和特性？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"355":{"title":"1.11 多线程场景下如何使用 ArrayList？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"356":{"title":"1.12 为什么 ArrayList 的 elementData 加上 transient 修饰？","titles":["Java集合框架","二、Collection接口","1 List接口"]},"357":{"title":"1.13 List 和 Set 的区别","titles":["Java集合框架","二、Collection接口","1 List接口"]},"358":{"title":"2 Set接口","titles":["Java集合框架","二、Collection接口"]},"359":{"title":"2.1 说一下 HashSet 的实现原理？","titles":["Java集合框架","二、Collection接口","2 Set接口"]},"360":{"title":"2.2 HashSet如何检查重复？HashSet是如何保证数据不可重复的？","titles":["Java集合框架","二、Collection接口","2 Set接口"]},"361":{"title":"2.3 HashSet与HashMap的区别","titles":["Java集合框架","二、Collection接口","2 Set接口"]},"362":{"title":"3 Queue","titles":["Java集合框架","二、Collection接口"]},"363":{"title":"3.1 BlockingQueue是什么？","titles":["Java集合框架","二、Collection接口","3 Queue"]},"364":{"title":"3.2 在 Queue 中 poll()和 remove()有什么区别？","titles":["Java集合框架","二、Collection接口","3 Queue"]},"365":{"title":"三、Map接口","titles":["Java集合框架"]},"366":{"title":"1 说一下 HashMap 的实现原理？","titles":["Java集合框架","三、Map接口"]},"367":{"title":"2 HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现","titles":["Java集合框架","三、Map接口"]},"368":{"title":"2.1 JDK1.8之前","titles":["Java集合框架","三、Map接口","2 HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现"]},"369":{"title":"2.2 JDK1.8之后","titles":["Java集合框架","三、Map接口","2 HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现"]},"370":{"title":"2.3 JDK1.7 VS JDK1.8 比较","titles":["Java集合框架","三、Map接口","2 HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现"]},"371":{"title":"3 HashMap的put方法的具体流程","titles":["Java集合框架","三、Map接口"]},"372":{"title":"4 HashMap的扩容操作是怎么实现的？","titles":["Java集合框架","三、Map接口"]},"373":{"title":"5 HashMap是怎么解决哈希冲突的？","titles":["Java集合框架","三、Map接口"]},"374":{"title":"5.1 什么是哈希？","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"375":{"title":"5.2 什么是哈希冲突？","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"376":{"title":"5.3 HashMap的数据结构","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"377":{"title":"5.4 hash()函数","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"378":{"title":"5.5 JDK1.8新增红黑树","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"379":{"title":"5.6 HashMap总结","titles":["Java集合框架","三、Map接口","5 HashMap是怎么解决哈希冲突的？"]},"380":{"title":"6 能否使用任何类作为 Map 的 key？","titles":["Java集合框架","三、Map接口"]},"381":{"title":"7 为什么HashMap中String、Integer这样的包装类适合作为K？","titles":["Java集合框架","三、Map接口"]},"382":{"title":"8 如果使用Object作为HashMap的Key，应该怎么办呢？","titles":["Java集合框架","三、Map接口"]},"383":{"title":"9 HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？","titles":["Java集合框架","三、Map接口"]},"384":{"title":"10 HashMap 的长度为什么是2的幂次方","titles":["Java集合框架","三、Map接口"]},"385":{"title":"11 HashMap 与 HashTable 有什么区别？","titles":["Java集合框架","三、Map接口"]},"386":{"title":"12 如何决定使用 HashMap 还是 TreeMap？","titles":["Java集合框架","三、Map接口"]},"387":{"title":"13 HashMap 和 ConcurrentHashMap 的区别","titles":["Java集合框架","三、Map接口"]},"388":{"title":"14 ConcurrentHashMap 和 Hashtable 的区别？","titles":["Java集合框架","三、Map接口"]},"389":{"title":"15 ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？","titles":["Java集合框架","三、Map接口"]},"390":{"title":"四、辅助工具类","titles":["Java集合框架"]},"391":{"title":"1 Array 和 ArrayList 有何区别？","titles":["Java集合框架","四、辅助工具类"]},"392":{"title":"2 如何实现 Array 和 List 之间的转换？","titles":["Java集合框架","四、辅助工具类"]},"393":{"title":"3 comparable 和 comparator的区别？","titles":["Java集合框架","四、辅助工具类"]},"394":{"title":"4 Collection 和 Collections 有什么区别？","titles":["Java集合框架","四、辅助工具类"]},"395":{"title":"5 TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？","titles":["Java集合框架","四、辅助工具类"]},"396":{"title":"文档列表","titles":[]},"397":{"title":"1.","titles":["文档列表"]},"398":{"title":"三方调用框架-OpenFeign","titles":[]},"399":{"title":"前言","titles":["三方调用框架-OpenFeign"]},"400":{"title":"一、OpenFeign是什么？","titles":["三方调用框架-OpenFeign"]},"401":{"title":"二、OpenFeign调用如何拦截请求","titles":["三方调用框架-OpenFeign"]},"402":{"title":"三、OpenFeign快速开始","titles":["三方调用框架-OpenFeign"]},"403":{"title":"1 导入依赖","titles":["三方调用框架-OpenFeign","三、OpenFeign快速开始"]},"404":{"title":"2 启动OpenFeign","titles":["三方调用框架-OpenFeign","三、OpenFeign快速开始"]},"405":{"title":"3 编写具体调用接口","titles":["三方调用框架-OpenFeign","三、OpenFeign快速开始"]},"406":{"title":"四、解决三方调用发生的跨域","titles":["三方调用框架-OpenFeign"]},"407":{"title":"1 域","titles":["三方调用框架-OpenFeign","四、解决三方调用发生的跨域"]},"408":{"title":"2 SpringMVC解决跨域问题","titles":["三方调用框架-OpenFeign","四、解决三方调用发生的跨域"]},"409":{"title":"3 gateway网关解决跨域问题","titles":["三方调用框架-OpenFeign","四、解决三方调用发生的跨域"]},"410":{"title":"4 Nginx配置解决跨域问题","titles":["三方调用框架-OpenFeign","四、解决三方调用发生的跨域"]},"411":{"title":"分布式流量控制框架-Sentinel","titles":[]},"412":{"title":"前言","titles":["分布式流量控制框架-Sentinel"]},"413":{"title":"一、Sentinel的基本概念","titles":["分布式流量控制框架-Sentinel"]},"414":{"title":"1.1 ProcessorSlotChain","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念"]},"415":{"title":"1.2 Node","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念"]},"416":{"title":"1.3 Entry","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念"]},"417":{"title":"1.3.1 自定义资源","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.3 Entry"]},"418":{"title":"1.3.2 基于注解标记资源","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.3 Entry"]},"419":{"title":"1.4 Context","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念"]},"420":{"title":"1.4.1 什么是Context","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.4 Context"]},"421":{"title":"1.4.2 Context的初始化","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.4 Context"]},"422":{"title":"1.4.2.2 AbstractSentinelInterceptor","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.4 Context","1.4.2 Context的初始化"]},"423":{"title":"1.4.2.3 ContextUtil","titles":["分布式流量控制框架-Sentinel","一、Sentinel的基本概念","1.4 Context","1.4.2 Context的初始化"]},"424":{"title":"二、ProcessorSlotChain执行流程","titles":["分布式流量控制框架-Sentinel"]},"425":{"title":"2.1 入口","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"426":{"title":"2.2 DefaultProcessorSlotChain","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"427":{"title":"2.3 NodeSelectorSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"428":{"title":"2.4 ClusterBuilderSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"429":{"title":"2.5 StatisticSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"430":{"title":"2.6 AuthoritySlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"431":{"title":"2.7 SystemSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"432":{"title":"2.8 ParamFlowSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"433":{"title":"2.8.1 令牌桶","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.8 ParamFlowSlot"]},"434":{"title":"2.9 FlowSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"435":{"title":"2.9.1 核心流程","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.9 FlowSlot"]},"436":{"title":"2.9.2 滑动时间窗口","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.9 FlowSlot"]},"437":{"title":"2.9.2.1 时间窗口请求量统计","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.9 FlowSlot","2.9.2 滑动时间窗口"]},"438":{"title":"2.9.2.2 滑动窗口QPS计算","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.9 FlowSlot","2.9.2 滑动时间窗口"]},"439":{"title":"2.9.3 漏桶","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.9 FlowSlot"]},"440":{"title":"2.10 DegradeSlot","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程"]},"441":{"title":"2.10.1 CircuitBreaker","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.10 DegradeSlot"]},"442":{"title":"2.10.2 触发断路器","titles":["分布式流量控制框架-Sentinel","二、ProcessorSlotChain执行流程","2.10 DegradeSlot"]},"443":{"title":"分布式消息框架-RabbitMQ","titles":[]},"444":{"title":"一、什么是RabbitMQ","titles":["分布式消息框架-RabbitMQ"]},"445":{"title":"优点","titles":["分布式消息框架-RabbitMQ","一、什么是RabbitMQ"]},"446":{"title":"缺点","titles":["分布式消息框架-RabbitMQ","一、什么是RabbitMQ"]},"447":{"title":"二、RabbitMQ运作模式","titles":["分布式消息框架-RabbitMQ"]},"448":{"title":"三、RabbitMQ的五种运行模式（快速开始）","titles":["分布式消息框架-RabbitMQ"]},"449":{"title":"1 简单模式（Simple）：一个生产者，一个消费者","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"450":{"title":"2 工作队列模式（Work Queue）： 多个消费者竞争消息","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"451":{"title":"特点","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）","2 工作队列模式（Work Queue）： 多个消费者竞争消息"]},"452":{"title":"3 发布/订阅模式（Publish/Subscribe）：一个生产者，多个消费者","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"453":{"title":"特点","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）","3 发布/订阅模式（Publish/Subscribe）：一个生产者，多个消费者"]},"454":{"title":"4 路由模式（Routing）：根据路由键将消息转发到对应队列","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"455":{"title":"特点","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）","4 路由模式（Routing）：根据路由键将消息转发到对应队列"]},"456":{"title":"5 通配符模式（Topics）：使用通配符匹配路由键","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"457":{"title":"通配符规则","titles":["分布式消息框架-RabbitMQ","三、RabbitMQ的五种运行模式（快速开始）"]},"458":{"title":"文档列表","titles":[]},"459":{"title":"1.","titles":["文档列表"]},"460":{"title":"2.","titles":["文档列表"]},"461":{"title":"3.","titles":["文档列表"]},"462":{"title":"4.","titles":["文档列表"]},"463":{"title":"服务注册和发现-Nacos","titles":[]},"464":{"title":"前言","titles":["服务注册和发现-Nacos"]},"465":{"title":"一、项目使用Nacos前置操作","titles":["服务注册和发现-Nacos"]},"466":{"title":"1 下载Nacos源码","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作"]},"467":{"title":"2 编写Demo工程","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作"]},"468":{"title":"3 导入Nacos源码","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作"]},"469":{"title":"4 proto编译","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作"]},"470":{"title":"4.1 什么是protobuf","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作","4 proto编译"]},"471":{"title":"4.2 安装protoc","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作","4 proto编译"]},"472":{"title":"4.3 编译proto","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作","4 proto编译"]},"473":{"title":"5 运行","titles":["服务注册和发现-Nacos","一、项目使用Nacos前置操作"]},"474":{"title":"二、服务注册","titles":["服务注册和发现-Nacos"]},"475":{"title":"1 服务注册接口","titles":["服务注册和发现-Nacos","二、服务注册"]},"476":{"title":"2 客户端","titles":["服务注册和发现-Nacos","二、服务注册"]},"477":{"title":"2.1 NacosServiceRegistryAutoConfiguration","titles":["服务注册和发现-Nacos","二、服务注册","2 客户端"]},"478":{"title":"2.2 NacosAutoServiceRegistration","titles":["服务注册和发现-Nacos","二、服务注册","2 客户端"]},"479":{"title":"2.3 NacosServiceRegistry","titles":["服务注册和发现-Nacos","二、服务注册","2 客户端"]},"480":{"title":"2.4 NacosNamingService","titles":["服务注册和发现-Nacos","二、服务注册","2 客户端"]},"481":{"title":"2.5 客户端注册的流程图","titles":["服务注册和发现-Nacos","二、服务注册","2 客户端"]},"482":{"title":"3 服务端","titles":["服务注册和发现-Nacos","二、服务注册"]},"483":{"title":"3.1 InstanceController","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端"]},"484":{"title":"3.2 ServiceManager","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端"]},"485":{"title":"更服务列表","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.2 ServiceManager"]},"486":{"title":"Nacos集群一致性","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.2 ServiceManager"]},"487":{"title":"3.3 DistroConsistencyServiceImpl","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端"]},"488":{"title":"3.3.1 更新本地实例列表","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.3 DistroConsistencyServiceImpl"]},"489":{"title":"放入阻塞队列","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.3 DistroConsistencyServiceImpl","3.3.1 更新本地实例列表"]},"490":{"title":"Notifier异步更新","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.3 DistroConsistencyServiceImpl","3.3.1 更新本地实例列表"]},"491":{"title":"覆盖实例列表","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.3 DistroConsistencyServiceImpl","3.3.1 更新本地实例列表"]},"492":{"title":"3.3.2 集群数据同步","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端","3.3 DistroConsistencyServiceImpl"]},"493":{"title":"3.4 服务端流程图","titles":["服务注册和发现-Nacos","二、服务注册","3 服务端"]},"494":{"title":"4 总结","titles":["服务注册和发现-Nacos","二、服务注册"]},"495":{"title":"三、服务心跳","titles":["服务注册和发现-Nacos"]},"496":{"title":"1 客户端","titles":["服务注册和发现-Nacos","三、服务心跳"]},"497":{"title":"1.1 BeatInfo","titles":["服务注册和发现-Nacos","三、服务心跳","1 客户端"]},"498":{"title":"1.2 BeatReactor","titles":["服务注册和发现-Nacos","三、服务心跳","1 客户端"]},"499":{"title":"1.3 BeatTask","titles":["服务注册和发现-Nacos","三、服务心跳","1 客户端"]},"500":{"title":"1.4 发送心跳","titles":["服务注册和发现-Nacos","三、服务心跳","1 客户端"]},"501":{"title":"2 服务端","titles":["服务注册和发现-Nacos","三、服务心跳"]},"502":{"title":"2.1 InstanceController","titles":["服务注册和发现-Nacos","三、服务心跳","2 服务端"]},"503":{"title":"2.2 处理心跳请求","titles":["服务注册和发现-Nacos","三、服务心跳","2 服务端"]},"504":{"title":"3.3 心跳异常检测","titles":["服务注册和发现-Nacos","三、服务心跳","2 服务端"]},"505":{"title":"3.4 主动健康检测","titles":["服务注册和发现-Nacos","三、服务心跳","2 服务端"]},"506":{"title":"3 总结","titles":["服务注册和发现-Nacos","三、服务心跳"]},"507":{"title":"四、服务发现","titles":["服务注册和发现-Nacos"]},"508":{"title":"1 客户端","titles":["服务注册和发现-Nacos","四、服务发现"]},"509":{"title":"1.1 定时更新服务列表","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端"]},"510":{"title":"1.1.1 NacosNamingService","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端","1.1 定时更新服务列表"]},"511":{"title":"1.1.2 HostReactor","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端","1.1 定时更新服务列表"]},"512":{"title":"1.1.3 ServerProxy","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端","1.1 定时更新服务列表"]},"513":{"title":"1.2 处理服务变更通知","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端"]},"514":{"title":"1.2.1 PushReceiver","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端","1.2 处理服务变更通知"]},"515":{"title":"1.2.2 HostReactor","titles":["服务注册和发现-Nacos","四、服务发现","1 客户端","1.2 处理服务变更通知"]},"516":{"title":"2 服务端","titles":["服务注册和发现-Nacos","四、服务发现"]},"517":{"title":"2.1 拉取服务列表接口","titles":["服务注册和发现-Nacos","四、服务发现","2 服务端"]},"518":{"title":"2.2 发布服务变更的UDP通知","titles":["服务注册和发现-Nacos","四、服务发现","2 服务端"]},"519":{"title":"3 总结","titles":["服务注册和发现-Nacos","四、服务发现"]},"520":{"title":"代码管理工具-Git","titles":[]},"521":{"title":"一、 前言","titles":["代码管理工具-Git"]},"522":{"title":"1 什么是Git","titles":["代码管理工具-Git","一、 前言"]},"523":{"title":"2 使用Git能做什么","titles":["代码管理工具-Git","一、 前言"]},"524":{"title":"二、Git概述","titles":["代码管理工具-Git"]},"525":{"title":"1 Git简介","titles":["代码管理工具-Git","二、Git概述"]},"526":{"title":"2 Git下载与安装","titles":["代码管理工具-Git","二、Git概述"]},"527":{"title":"三、Git常用命令","titles":["代码管理工具-Git"]},"528":{"title":"1 Git全局设置","titles":["代码管理工具-Git","三、Git常用命令"]},"529":{"title":"2 获取Git仓库","titles":["代码管理工具-Git","三、Git常用命令"]},"530":{"title":"2.1 在本地初始化Git仓库","titles":["代码管理工具-Git","三、Git常用命令","2 获取Git仓库"]},"531":{"title":"2.2 从远程仓库克隆","titles":["代码管理工具-Git","三、Git常用命令","2 获取Git仓库"]},"532":{"title":"3 工作区、暂存区、版本库","titles":["代码管理工具-Git","三、Git常用命令"]},"533":{"title":"4 Git工作区中文件的状态","titles":["代码管理工具-Git","三、Git常用命令"]},"534":{"title":"5 本地仓库操作","titles":["代码管理工具-Git","三、Git常用命令"]},"535":{"title":"5.1 git status","titles":["代码管理工具-Git","三、Git常用命令","5 本地仓库操作"]},"536":{"title":"5.2 git add","titles":["代码管理工具-Git","三、Git常用命令","5 本地仓库操作"]},"537":{"title":"5.3 git reset","titles":["代码管理工具-Git","三、Git常用命令","5 本地仓库操作"]},"538":{"title":"5.4 git commit","titles":["代码管理工具-Git","三、Git常用命令","5 本地仓库操作"]},"539":{"title":"5.5 git log","titles":["代码管理工具-Git","三、Git常用命令","5 本地仓库操作"]},"540":{"title":"6 远程仓库操作","titles":["代码管理工具-Git","三、Git常用命令"]},"541":{"title":"6.1 git remote","titles":["代码管理工具-Git","三、Git常用命令","6 远程仓库操作"]},"542":{"title":"6.2 git remote add","titles":["代码管理工具-Git","三、Git常用命令","6 远程仓库操作"]},"543":{"title":"6.4 git push","titles":["代码管理工具-Git","三、Git常用命令","6 远程仓库操作"]},"544":{"title":"6.5 git pull","titles":["代码管理工具-Git","三、Git常用命令","6 远程仓库操作"]},"545":{"title":"7 分支操作","titles":["代码管理工具-Git","三、Git常用命令"]},"546":{"title":"7.1 查看分支","titles":["代码管理工具-Git","三、Git常用命令","7 分支操作"]},"547":{"title":"7.2 创建分支","titles":["代码管理工具-Git","三、Git常用命令","7 分支操作"]},"548":{"title":"7.3 切换分支","titles":["代码管理工具-Git","三、Git常用命令","7 分支操作"]},"549":{"title":"7.4 推送至远程仓库分支","titles":["代码管理工具-Git","三、Git常用命令","7 分支操作"]},"550":{"title":"7.5 合并分支","titles":["代码管理工具-Git","三、Git常用命令","7 分支操作"]},"551":{"title":"文档列表","titles":[]},"552":{"title":"1.","titles":["文档列表"]},"553":{"title":"文档列表","titles":[]},"554":{"title":"1.","titles":["文档列表"]},"555":{"title":"1.","titles":["文档列表"]},"556":{"title":"容器化技术-Docker","titles":[]},"557":{"title":"一、镜像结构","titles":["容器化技术-Docker"]},"558":{"title":"二、构建自定义镜像","titles":["容器化技术-Docker"]},"559":{"title":"三、网络","titles":["容器化技术-Docker"]},"560":{"title":"四、部署Java项目","titles":["容器化技术-Docker"]},"561":{"title":"五、Docker-Compose","titles":["容器化技术-Docker"]},"562":{"title":"1 概述","titles":["容器化技术-Docker","五、Docker-Compose"]},"563":{"title":"2 配置文件","titles":["容器化技术-Docker","五、Docker-Compose"]},"564":{"title":"3 常用命令","titles":["容器化技术-Docker","五、Docker-Compose"]},"565":{"title":"数据缓存技术-Redis","titles":[]},"566":{"title":"一、现有项目的缺陷","titles":["数据缓存技术-Redis"]},"567":{"title":"1 数据缓存","titles":["数据缓存技术-Redis","一、现有项目的缺陷"]},"568":{"title":"2 分布式Session","titles":["数据缓存技术-Redis","一、现有项目的缺陷"]},"569":{"title":"二、Redis介绍与安装","titles":["数据缓存技术-Redis"]},"570":{"title":"1 概述","titles":["数据缓存技术-Redis","二、Redis介绍与安装"]},"571":{"title":"2 安装","titles":["数据缓存技术-Redis","二、Redis介绍与安装"]},"572":{"title":"2.1 基于tar.gz安装","titles":["数据缓存技术-Redis","二、Redis介绍与安装","2 安装"]},"573":{"title":"2.2 基于Docker安装","titles":["数据缓存技术-Redis","二、Redis介绍与安装","2 安装"]},"574":{"title":"三、Redis的客户端工具","titles":["数据缓存技术-Redis"]},"575":{"title":"1 命令行客户端","titles":["数据缓存技术-Redis","三、Redis的客户端工具"]},"576":{"title":"2 图形化客户端【windows版本】","titles":["数据缓存技术-Redis","三、Redis的客户端工具"]},"577":{"title":"3 Java客户端","titles":["数据缓存技术-Redis","三、Redis的客户端工具"]},"578":{"title":"四、Redis的五种数据类型","titles":["数据缓存技术-Redis"]},"579":{"title":"1 五种数据类型","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"580":{"title":"2 string","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"581":{"title":"3 hash","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"582":{"title":"4 list","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"583":{"title":"5 set","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"584":{"title":"6 zset","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"585":{"title":"7 通用命令","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"586":{"title":"8 查看redis性能的命令","titles":["数据缓存技术-Redis","四、Redis的五种数据类型"]},"587":{"title":"五、Redis核心配置文件","titles":["数据缓存技术-Redis"]},"588":{"title":"1 带着配置去运行Redis的服务","titles":["数据缓存技术-Redis","五、Redis核心配置文件"]},"589":{"title":"1.1 修改redis的配置文件","titles":["数据缓存技术-Redis","五、Redis核心配置文件","1 带着配置去运行Redis的服务"]},"590":{"title":"1.2 通过命令行客户端工具操作redis","titles":["数据缓存技术-Redis","五、Redis核心配置文件","1 带着配置去运行Redis的服务"]},"591":{"title":"1.3 远程客户端工具","titles":["数据缓存技术-Redis","五、Redis核心配置文件","1 带着配置去运行Redis的服务"]},"592":{"title":"1.4 将来使用Java操作Redis时也需要密码","titles":["数据缓存技术-Redis","五、Redis核心配置文件","1 带着配置去运行Redis的服务"]},"593":{"title":"六、Jedis","titles":["数据缓存技术-Redis"]},"594":{"title":"1 概述","titles":["数据缓存技术-Redis","六、Jedis"]},"595":{"title":"2 快速入门","titles":["数据缓存技术-Redis","六、Jedis"]},"596":{"title":"3 JedisPool的使用","titles":["数据缓存技术-Redis","六、Jedis"]},"597":{"title":"4 JedisPool工具类封装","titles":["数据缓存技术-Redis","六、Jedis"]},"598":{"title":"5 五种数据类型的使用","titles":["数据缓存技术-Redis","六、Jedis"]},"599":{"title":"6 Jedis如何保存一个Java对象","titles":["数据缓存技术-Redis","六、Jedis"]},"600":{"title":"6.1 string存储【json】","titles":["数据缓存技术-Redis","六、Jedis","6 Jedis如何保存一个Java对象"]},"601":{"title":"6.2 字节存储","titles":["数据缓存技术-Redis","六、Jedis","6 Jedis如何保存一个Java对象"]},"602":{"title":"7 Jedis的管道操作","titles":["数据缓存技术-Redis","六、Jedis"]},"603":{"title":"七、SpringBoot整合Redis","titles":["数据缓存技术-Redis"]},"604":{"title":"1 导入依赖","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"605":{"title":"2 配置文件","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"606":{"title":"3 测试代码","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"607":{"title":"4 序列化器","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"608":{"title":"4.1 默认情况下","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis","4 序列化器"]},"609":{"title":"4.2 指定使用序列化器","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis","4 序列化器"]},"610":{"title":"4.3 StringRedisTemplate","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis","4 序列化器"]},"611":{"title":"5 操作其他数据类型","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"612":{"title":"6 存储对象","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"613":{"title":"7 管道操作","titles":["数据缓存技术-Redis","七、SpringBoot整合Redis"]},"614":{"title":"八、docker-compose搭建redis使用配置文件","titles":["数据缓存技术-Redis"]},"615":{"title":"1 docker-compose.yml文件","titles":["数据缓存技术-Redis","八、docker-compose搭建redis使用配置文件"]},"616":{"title":"2 redis配置文件","titles":["数据缓存技术-Redis","八、docker-compose搭建redis使用配置文件"]},"617":{"title":"3 搭建springboot工程测试","titles":["数据缓存技术-Redis","八、docker-compose搭建redis使用配置文件"]},"618":{"title":"九、Redis事务","titles":["数据缓存技术-Redis"]},"619":{"title":"1 MySQL中事务","titles":["数据缓存技术-Redis","九、Redis事务"]},"620":{"title":"2 Redis事务","titles":["数据缓存技术-Redis","九、Redis事务"]},"621":{"title":"3 事务的使用","titles":["数据缓存技术-Redis","九、Redis事务"]},"622":{"title":"4 Java代码实现redis事务","titles":["数据缓存技术-Redis","九、Redis事务"]},"623":{"title":"十、Redis持久化","titles":["数据缓存技术-Redis"]},"624":{"title":"1 持久化概述","titles":["数据缓存技术-Redis","十、Redis持久化"]},"625":{"title":"2 持久化机制","titles":["数据缓存技术-Redis","十、Redis持久化"]},"626":{"title":"3 RDB机制","titles":["数据缓存技术-Redis","十、Redis持久化"]},"627":{"title":"3.1 redis.conf【196行-263行】","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制"]},"628":{"title":"3.2 触发RDB机制的情况","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制"]},"629":{"title":"3.3 RDB机制准备工作","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制"]},"630":{"title":"3.3.1 正常停止容器时，触发RDB","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制","3.3 RDB机制准备工作"]},"631":{"title":"3.3.2 执行save或者bgsave，触发RDB","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制","3.3 RDB机制准备工作"]},"632":{"title":"3.3.3 满足配置文件的规则，触发RDB","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制","3.3 RDB机制准备工作"]},"633":{"title":"3.4 dump.rdb文件加载时机","titles":["数据缓存技术-Redis","十、Redis持久化","3 RDB机制"]},"634":{"title":"4 AOF机制","titles":["数据缓存技术-Redis","十、Redis持久化"]},"635":{"title":"4.1 redis.conf【679行-806行】","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制"]},"636":{"title":"4.2 AOF文件存储的内容","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制"]},"637":{"title":"4.3 触发AOF规则","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制"]},"638":{"title":"4.4 appendonly.aof文件加载时机","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制"]},"639":{"title":"4.5 AOF机制演示","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制"]},"640":{"title":"4.5.1 删除容器","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制","4.5 AOF机制演示"]},"641":{"title":"4.5.2 向redis.conf文件中增加如下内容","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制","4.5 AOF机制演示"]},"642":{"title":"4.5.3 启动redis容器","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制","4.5 AOF机制演示"]},"643":{"title":"4.5.4 AOF机制演示效果","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制","4.5 AOF机制演示"]},"644":{"title":"4.6 AOF文件的重写规则","titles":["数据缓存技术-Redis","十、Redis持久化","4 AOF机制","4.5 AOF机制演示"]},"645":{"title":"5 混合持久化","titles":["数据缓存技术-Redis","十、Redis持久化"]},"646":{"title":"5.1 概述","titles":["数据缓存技术-Redis","十、Redis持久化","5 混合持久化"]},"647":{"title":"5.2 混合持久化实现","titles":["数据缓存技术-Redis","十、Redis持久化","5 混合持久化"]},"648":{"title":"6 RDB、AOF、混合持久化的选择","titles":["数据缓存技术-Redis","十、Redis持久化"]},"649":{"title":"十一、Redis高可用","titles":["数据缓存技术-Redis"]},"650":{"title":"1 实现高可用的三种机制","titles":["数据缓存技术-Redis","十一、Redis高可用"]},"651":{"title":"2 主从架构","titles":["数据缓存技术-Redis","十一、Redis高可用"]},"652":{"title":"2.1 主从架构原理与功能","titles":["数据缓存技术-Redis","十一、Redis高可用","2 主从架构"]},"653":{"title":"2.2 数据同步的原理","titles":["数据缓存技术-Redis","十一、Redis高可用","2 主从架构"]},"654":{"title":"2.3 搭建主从架构","titles":["数据缓存技术-Redis","十一、Redis高可用","2 主从架构"]},"655":{"title":"2.3.1 创建一个目录docker_master_slave用来搭建主从架构","titles":["数据缓存技术-Redis","十一、Redis高可用","2 主从架构","2.3 搭建主从架构"]},"656":{"title":"2.3.2 进入到三个容器的内部","titles":["数据缓存技术-Redis","十一、Redis高可用","2 主从架构","2.3 搭建主从架构"]},"657":{"title":"3 哨兵模式","titles":["数据缓存技术-Redis","十一、Redis高可用"]},"658":{"title":"3.1 哨兵的作用","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式"]},"659":{"title":"3.2 搭建哨兵模式","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式"]},"660":{"title":"3.2.1 在docker_master_slave同目录下创建一个docker_sentinel目录","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.2 搭建哨兵模式"]},"661":{"title":"3.2.2 启动容器","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.2 搭建哨兵模式"]},"662":{"title":"3.2.3 查看哨兵启动情况与哨兵监控主从架构的信息","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.2 搭建哨兵模式"]},"663":{"title":"3.3 测试选举","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式"]},"664":{"title":"3.3.1 停止redis-master容器","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.3 测试选举"]},"665":{"title":"3.3.2 过10几秒再次查看从节点容器的信息","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.3 测试选举"]},"666":{"title":"3.3.3 当redis-master重新启动后，就会变成从节点加入到主从架构中","titles":["数据缓存技术-Redis","十一、Redis高可用","3 哨兵模式","3.3 测试选举"]},"667":{"title":"4 redis-cluster","titles":["数据缓存技术-Redis","十一、Redis高可用"]},"668":{"title":"4.1 原理","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster"]},"669":{"title":"4.2 redis-cluster搭建","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster"]},"670":{"title":"4.2.1 docker-compose.yml","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster","4.2 redis-cluster搭建"]},"671":{"title":"4.2.2 redis配置文件","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster","4.2 redis-cluster搭建"]},"672":{"title":"4.2.3 启动容器","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster","4.2 redis-cluster搭建"]},"673":{"title":"4.2.4 搭建redis-cluster","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster","4.2 redis-cluster搭建"]},"674":{"title":"4.2.5 连接集群并向集群中插入数据","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster","4.2 redis-cluster搭建"]},"675":{"title":"4.3 Java连接redis集群","titles":["数据缓存技术-Redis","十一、Redis高可用","4 redis-cluster"]},"676":{"title":"十二、Redis淘汰策略","titles":["数据缓存技术-Redis"]},"677":{"title":"1 概述","titles":["数据缓存技术-Redis","十二、Redis淘汰策略"]},"678":{"title":"2 会删除哪些key","titles":["数据缓存技术-Redis","十二、Redis淘汰策略"]},"679":{"title":"3 什么时候删除key","titles":["数据缓存技术-Redis","十二、Redis淘汰策略"]},"680":{"title":"4 淘汰策略","titles":["数据缓存技术-Redis","十二、Redis淘汰策略"]},"681":{"title":"十三、Redis应用场景","titles":["数据缓存技术-Redis"]},"682":{"title":"1 热点数据缓存【list】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"683":{"title":"2 分布式Session【string】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"684":{"title":"3 计数器【string[incr]】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"685":{"title":"4 排行榜【zset】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"686":{"title":"5 分布式锁【string[setnx]】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"687":{"title":"6 分布式ID【string[incr]】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"688":{"title":"7 购物车【hash】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"689":{"title":"8 微关系【set】","titles":["数据缓存技术-Redis","十三、Redis应用场景"]},"690":{"title":"十四、使用Redis可能碰到的问题","titles":["数据缓存技术-Redis"]},"691":{"title":"1 缓存穿透","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题"]},"692":{"title":"1.1 缓存穿透伪代码","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","1 缓存穿透"]},"693":{"title":"1.2 如何解决缓存穿透","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","1 缓存穿透"]},"694":{"title":"1.2.1 简单解决","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","1 缓存穿透","1.2 如何解决缓存穿透"]},"695":{"title":"1.2.2 布隆过滤器","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","1 缓存穿透","1.2 如何解决缓存穿透"]},"696":{"title":"1.2.3 具体实现","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","1 缓存穿透","1.2 如何解决缓存穿透"]},"697":{"title":"2 缓存击穿","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题"]},"698":{"title":"2.1 概述","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","2 缓存击穿"]},"699":{"title":"2.2 解决","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","2 缓存击穿"]},"700":{"title":"3 缓存雪崩","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题"]},"701":{"title":"3.1 概述","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","3 缓存雪崩"]},"702":{"title":"3.2 解决","titles":["数据缓存技术-Redis","十四、使用Redis可能碰到的问题","3 缓存雪崩"]},"703":{"title":"十五、热点数据key的重建问题","titles":["数据缓存技术-Redis"]},"704":{"title":"1 案例演示","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题"]},"705":{"title":"2 解决方案","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题"]},"706":{"title":"2.1 加锁","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","2 解决方案"]},"707":{"title":"2.2 分布式锁","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","2 解决方案"]},"708":{"title":"2.2.1 加分布式锁","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","2 解决方案","2.2 分布式锁"]},"709":{"title":"2.2.2 上述加锁操作有没有问题？","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","2 解决方案","2.2 分布式锁"]},"710":{"title":"2.3 考虑两个问题","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","2 解决方案","2.2 分布式锁"]},"711":{"title":"3 redission实现分布式锁","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题"]},"712":{"title":"3.1 原理","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","3 redission实现分布式锁"]},"713":{"title":"3.2 代码实现","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","3 redission实现分布式锁"]},"714":{"title":"3.3 红锁问题及解决","titles":["数据缓存技术-Redis","十五、热点数据key的重建问题","3 redission实现分布式锁"]},"715":{"title":"十六、redis的多路复用","titles":["数据缓存技术-Redis"]},"716":{"title":"1 redis是单线程吗？","titles":["数据缓存技术-Redis","十六、redis的多路复用"]},"717":{"title":"2 redis这个读写操作是单线程的，那为什么还那么快？","titles":["数据缓存技术-Redis","十六、redis的多路复用"]}},"dirtCount":0,"index":[["红锁问题及解决",{"0":{"714":1}}],["红黑二叉树节点",{"2":{"388":1}}],["红黑二叉树",{"2":{"388":1}}],["红黑树中的算法",{"2":{"384":1}}],["红黑树长度大致相同",{"2":{"384":1}}],["红黑树算法请参考",{"2":{"370":1}}],["红黑树",{"2":{"339":2}}],["延长锁到30s",{"2":{"712":1}}],["误删锁问题",{"2":{"709":1}}],["误删锁",{"2":{"709":1}}],["误差率为3",{"2":{"696":1}}],["案例演示",{"0":{"704":1}}],["京东秒杀",{"2":{"701":1}}],["京东购物车",{"2":{"688":1}}],["感觉就像出现了雪崩",{"2":{"701":1}}],["感兴趣的话可以看看源码",{"2":{"230":1}}],["鹿晗跟关晓彤官宣是情侣关系",{"2":{"698":1}}],["布隆过滤器就是一个大型的位数组和几个不一样的无偏",{"2":{"695":1}}],["布隆过滤器的名称",{"2":{"696":1}}],["布隆过滤器的原理",{"2":{"695":2}}],["布隆过滤器的作用",{"2":{"695":1}}],["布隆过滤器",{"0":{"695":1},"2":{"695":1,"696":1}}],["布尔型",{"2":{"45":1}}],["别想攻击我",{"2":{"694":1}}],["别人提供或者提前创建",{"2":{"448":1}}],["点赞",{"2":{"689":2}}],["点击右键打开git",{"2":{"530":1}}],["点击ok即可",{"2":{"468":1}}],["点击进入后",{"2":{"466":1}}],["微博微关系",{"2":{"689":2}}],["微信点赞",{"2":{"689":1}}],["微关系",{"0":{"689":1}}],["微服务的父工程",{"2":{"467":1}}],["商品总数",{"2":{"688":1}}],["商品数量",{"2":{"688":1}}],["商品数量为value",{"2":{"688":1}}],["商品id",{"2":{"688":1}}],["商品id为field",{"2":{"688":1}}],["商业软件",{"2":{"42":1}}],["购物车操作",{"2":{"688":1}}],["购物车",{"0":{"688":1}}],["报2",{"2":{"686":1}}],["报数",{"2":{"686":1}}],["苹果实际数量已经变成1了",{"2":{"686":1}}],["苹果实际数量是1个",{"2":{"686":1}}],["苹果实际数量是2个",{"2":{"686":1}}],["苹果总共3个",{"2":{"686":1}}],["战力排行榜",{"2":{"685":1}}],["财富排行榜",{"2":{"685":1}}],["某游戏的等级排行榜",{"2":{"685":1}}],["某网红的直播间打赏排行榜",{"2":{"685":1}}],["某些时候有局限",{"2":{"234":1}}],["某些情况下",{"2":{"42":1}}],["阅读一次",{"2":{"684":1}}],["场景",{"2":{"682":1}}],["热点数据key的重建问题",{"0":{"703":1},"1":{"704":1,"705":1,"706":1,"707":1,"708":1,"709":1,"710":1,"711":1,"712":1,"713":1,"714":1}}],["热点数据永不过期",{"2":{"699":1,"702":1}}],["热点数据",{"2":{"682":1,"703":1}}],["热点数据缓存",{"0":{"682":1}}],["热点规则判断采用了令牌桶算法来实现参数限流",{"2":{"433":1}}],["热点规则判断",{"2":{"432":1}}],["淘汰策略",{"0":{"680":1},"2":{"680":1}}],["惰性删除",{"2":{"679":1}}],["过期的key会不会删除",{"2":{"678":1}}],["过10几秒再次查看从节点容器的信息",{"0":{"665":1}}],["及配置文件内容涉及的端口即可",{"2":{"671":1}}],["及其子类外",{"2":{"288":1}}],["及其子类之外的异常",{"2":{"287":1,"304":1}}],["投票超过半数则认为该节点挂了",{"2":{"668":1}}],["投票达到2则表示master以及挂掉了",{"2":{"660":1}}],["停止redis",{"0":{"664":1}}],["停止执行",{"2":{"159":1}}],["谁的数据新",{"2":{"658":1}}],["谁的数据多",{"2":{"658":1}}],["谁当主节点",{"2":{"658":2}}],["谁抢到就是谁的",{"2":{"230":1}}],["监控master节点及重新选举主节点都需要时间",{"2":{"665":1}}],["监控主从架构的主节点是否宕机",{"2":{"658":1}}],["监听的是servicechangeevent",{"2":{"518":1}}],["监听服务列表用到的key",{"2":{"484":1}}],["监听spring容器启动过程中的事件",{"2":{"478":1}}],["哨兵监控主从架构的信息",{"2":{"662":1}}],["哨兵配置文件",{"2":{"660":1}}],["哨兵就会监控到",{"2":{"658":1}}],["哨兵的作用",{"0":{"658":1}}],["哨兵模式",{"0":{"657":1},"1":{"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1},"2":{"650":1,"658":1}}],["搭建redis",{"0":{"673":1},"2":{"668":1}}],["搭建哨兵模式",{"0":{"659":1},"1":{"660":1,"661":1,"662":1}}],["搭建主从架构",{"0":{"654":1},"1":{"655":1,"656":1}}],["搭建springboot工程测试",{"0":{"617":1}}],["全量复制",{"2":{"652":1,"653":2}}],["全局平均",{"2":{"431":1}}],["全局",{"2":{"431":4}}],["全局的跨域处理",{"2":{"409":1}}],["达到100m",{"2":{"644":1}}],["手动释放锁",{"2":{"712":1}}],["手动重写",{"2":{"644":1}}],["手动锁",{"2":{"183":1}}],["混合持久化的选择",{"0":{"648":1}}],["混合持久化实现",{"0":{"647":1}}],["混合持久化是集成rdb和aof的优点",{"2":{"646":1}}],["混合持久化",{"0":{"645":1},"1":{"646":1,"647":1},"2":{"625":1,"635":1,"641":1}}],["混淆",{"2":{"125":1}}],["十六",{"0":{"715":1},"1":{"716":1,"717":1}}],["十五",{"0":{"703":1},"1":{"704":1,"705":1,"706":1,"707":1,"708":1,"709":1,"710":1,"711":1,"712":1,"713":1,"714":1}}],["十四",{"0":{"690":1},"1":{"691":1,"692":1,"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1,"700":1,"701":1,"702":1}}],["十三",{"0":{"681":1},"1":{"682":1,"683":1,"684":1,"685":1,"686":1,"687":1,"688":1,"689":1}}],["十二",{"0":{"676":1},"1":{"677":1,"678":1,"679":1,"680":1}}],["十一",{"0":{"649":1},"1":{"650":1,"651":1,"652":1,"653":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1,"667":1,"668":1,"669":1,"670":1,"671":1,"672":1,"673":1,"674":1,"675":1}}],["十",{"0":{"623":1},"1":{"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1,"645":1,"646":1,"647":1,"648":1}}],["演示缓存穿透",{"2":{"692":1}}],["演示",{"2":{"620":1}}],["持久化机制的配置信息在redis",{"2":{"625":1}}],["持久化机制",{"0":{"625":1}}],["持久化概述",{"0":{"624":1}}],["持久性",{"2":{"619":1}}],["持有独占锁",{"2":{"224":1}}],["持有独占锁a",{"2":{"224":1}}],["持有资源",{"2":{"148":2}}],["九",{"0":{"618":1},"1":{"619":1,"620":1,"621":1,"622":1}}],["泰斯特名字",{"2":{"617":1}}],["印黑设备",{"2":{"612":1}}],["浙江杭州印打有限公司",{"2":{"612":1}}],["杭州",{"2":{"610":1}}],["杭州小层有限公司",{"2":{"600":1,"601":1}}],["效果",{"2":{"609":1}}],["效率又提升n倍",{"2":{"389":1}}],["效率非常低下",{"2":{"388":1}}],["效率高一点",{"2":{"385":1}}],["效率",{"2":{"385":1}}],["效率要高",{"2":{"352":1}}],["效率低于",{"2":{"223":1}}],["效率低的原因",{"2":{"199":1}}],["效率低下",{"2":{"199":1}}],["效率不高",{"2":{"25":1}}],["激光机",{"2":{"601":1}}],["激活环境为",{"2":{"560":1}}],["压力机",{"2":{"600":1,"601":1}}],["压缩",{"2":{"5":2}}],["层压机",{"2":{"600":1}}],["层面对synchronized",{"2":{"199":1}}],["归还连接到连接池",{"2":{"596":1}}],["李四",{"2":{"596":1}}],["带着配置去运行redis的服务",{"0":{"588":1},"1":{"589":1,"590":1,"591":1,"592":1}}],["带参方法",{"2":{"220":1}}],["慎重",{"2":{"585":2}}],["毫秒",{"2":{"585":1}}],["差集",{"2":{"583":1}}],["差别不大",{"2":{"506":1}}],["右压栈",{"2":{"582":2}}],["右边增加数据",{"2":{"582":1}}],["右边的表达式会被直接短路掉",{"2":{"51":1}}],["求大key中小key的数量",{"2":{"581":1}}],["图形化客户端",{"0":{"576":1}}],["图形界面",{"2":{"526":1}}],["完整语法",{"2":{"575":1}}],["完成对服务列表的更新",{"2":{"513":1}}],["完成对实例状态更新后",{"2":{"484":1}}],["完成集群初识化",{"2":{"505":1}}],["完成服务的初始化",{"2":{"505":1}}],["完成服务注册",{"2":{"480":1}}],["完成",{"2":{"484":1}}],["完成后可以直接发送各种类型数据",{"2":{"448":1}}],["完成后再将头指针替换为新的数据",{"2":{"241":1}}],["完成规则判断",{"2":{"420":1}}],["完成资源",{"2":{"418":1}}],["完成之前",{"2":{"214":1}}],["英文",{"2":{"570":1}}],["官网",{"2":{"570":1}}],["官方对从",{"2":{"199":1}}],["餐馆王app搞抢购活动",{"2":{"567":1}}],["现有项目的缺陷",{"0":{"566":1},"1":{"567":1,"568":1}}],["现在返回就是10",{"2":{"580":1}}],["现在返回就是",{"2":{"580":1}}],["现在返回就是25",{"2":{"580":1}}],["现在返回就是21",{"2":{"580":1}}],["现在就是hangzhouxiaoshan",{"2":{"580":1}}],["现在已经不太建议使用",{"2":{"340":1}}],["现在几乎所有的",{"2":{"270":1}}],["现在却能同时有",{"2":{"241":1}}],["现在的系统动不动就要求百万级甚至千万级的并发量",{"2":{"137":1}}],["现在",{"2":{"64":1}}],["测试选举",{"0":{"663":1},"1":{"664":1,"665":1,"666":1}}],["测试代码",{"0":{"606":1},"2":{"609":1,"617":1,"675":1}}],["测试",{"2":{"560":1,"573":2}}],["部分复制",{"2":{"653":2}}],["部分源码",{"2":{"360":1}}],["部署5个redis节点",{"2":{"714":1}}],["部署时",{"2":{"686":1}}],["部署nginx容器",{"2":{"560":1}}],["部署前端应用",{"2":{"560":1}}],["部署应用",{"2":{"560":1}}],["部署java应用",{"2":{"560":1}}],["部署java项目",{"0":{"560":1}}],["拷贝jar包",{"2":{"558":1}}],["$2",{"2":{"643":1}}],["$8",{"2":{"643":1}}],["$4",{"2":{"643":6}}],["$3",{"2":{"643":9}}],["$1",{"2":{"643":2}}],["$6",{"2":{"643":2}}],["$",{"2":{"560":2}}],["$tz",{"2":{"558":2}}],["$$",{"2":{"38":2}}],["构建mysql容器",{"2":{"560":1}}],["构建镜像",{"2":{"558":1}}],["构建自定义镜像",{"0":{"558":1}}],["构造函数中传入的",{"2":{"276":1}}],["构造函数中请求栈的大小",{"2":{"188":1}}],["构造函数自定义参数的方式来创建线程池",{"2":{"266":1}}],["构造器不能被继承",{"2":{"91":1}}],["构造器",{"0":{"91":1}}],["构造方法有哪些特性",{"0":{"73":1}}],["镜像名",{"2":{"558":1}}],["镜像是分层存储的",{"2":{"557":1}}],["镜像结构",{"0":{"557":1}}],["合并分支就是将两个分支的文件进行合并处理",{"2":{"550":1}}],["合并分支",{"0":{"550":1},"2":{"545":1}}],["合理的做法是至少要记录异常的信息",{"2":{"323":1}}],["认证通过后会将用户名和密码保存到windows系统中",{"2":{"543":1}}],["认证通过才可以推送",{"2":{"543":1}}],["认为客户端加锁成功",{"2":{"714":1}}],["认为master不可用",{"2":{"660":1}}],["认为java程序设计语言对对象采用的是引用调用",{"2":{"99":1}}],["认为这两个对象相等",{"2":{"94":1}}],["克隆的仓库服务器的默认名字",{"2":{"541":1}}],["邮箱",{"2":{"539":1}}],["未使用布隆过滤器",{"2":{"695":1}}],["未登录",{"2":{"688":1}}],["未修改状态",{"2":{"533":1}}],["未被纳入版本控制",{"2":{"533":1}}],["未跟踪",{"2":{"533":1}}],["日志信息和文件版本信息等",{"2":{"532":1}}],["日常开发中使用的比较多",{"2":{"85":1}}],["暂存区是一个临时保存修改文件的地方",{"2":{"532":1}}],["暂存区",{"0":{"532":1},"2":{"532":1}}],["暂时放弃对",{"2":{"159":1}}],["命令创建本地仓库时默认会创建一个master分支",{"2":{"545":1}}],["命令的作用是从远程仓库获取最新版本并合并到本地仓库",{"2":{"544":1}}],["命令的作用是查看提交日志",{"2":{"539":1}}],["命令的作用是将暂存区的文件修改提交到版本库",{"2":{"538":1}}],["命令的作用是将暂存区的文件取消暂存或者是切换到指定版本",{"2":{"537":1}}],["命令的作用是将文件的修改加入暂存区",{"2":{"536":1}}],["命令",{"2":{"536":1,"541":1}}],["命令后的输出也会不同",{"2":{"535":1}}],["命令用于查看文件状态",{"2":{"535":1}}],["命令格式",{"2":{"531":1,"536":1,"538":1,"543":1,"544":1,"550":1}}],["命令行客户端",{"0":{"575":1}}],["命令行中执行下面命令",{"2":{"528":1}}],["命令行",{"2":{"526":1}}],["命名空间id",{"2":{"475":1,"507":1}}],["干什么的",{"2":{"525":1}}],["推送完成后可以在网站查看远程仓库",{"2":{"549":1}}],["推送完成后可以到远程仓库中查看文件的变化",{"2":{"543":1}}],["推送至远程仓库分支命令格式",{"2":{"549":1}}],["推送至远程仓库分支",{"0":{"549":1},"2":{"545":1}}],["推送本地仓库内容",{"2":{"540":2}}],["推送到远程仓库",{"2":{"540":1}}],["推送",{"2":{"525":1}}],["推荐在单线程环境下使用",{"2":{"385":1}}],["推荐使用右压栈",{"2":{"582":1}}],["推荐使用",{"2":{"385":1}}],["推荐使用线程池",{"2":{"260":1}}],["推荐的做法就是",{"2":{"349":1}}],["推荐业界已定义过的自定义异常",{"2":{"330":1}}],["推荐",{"2":{"330":3}}],["推荐jvm实现为原子操作",{"2":{"213":1}}],["仓库",{"2":{"525":2}}],["仓库分为两种",{"2":{"525":1}}],["仓库来存储和管理这些文件",{"2":{"525":1}}],["远程客户端工具",{"0":{"591":1}}],["远程名",{"2":{"542":1}}],["远程分支名",{"2":{"540":1}}],["远程服务器上的",{"2":{"525":1}}],["远程仓库简称",{"2":{"543":1,"544":1,"549":1}}],["远程仓库操作",{"0":{"540":1},"1":{"541":1,"542":1,"543":1,"544":1}}],["远程仓库地址",{"2":{"531":1,"540":1,"542":1}}],["远程仓库时什么",{"2":{"525":1}}],["远程仓库",{"2":{"525":1,"540":2}}],["远程备份",{"2":{"523":1}}],["远程调用返回对象时",{"2":{"330":1}}],["版本号",{"2":{"537":1}}],["版本库中存储了很多配置信息",{"2":{"532":1}}],["版本库",{"0":{"532":1},"2":{"532":1}}],["版本",{"2":{"523":1,"558":1}}],["版本切换",{"2":{"523":1}}],["剔除故障服务",{"2":{"519":1}}],["待移除的实例",{"2":{"515":1}}],["待更新完成",{"2":{"511":1}}],["拉取",{"2":{"525":1}}],["拉取服务列表接口",{"0":{"517":1}}],["拉取的数据是否已经过期",{"2":{"515":1}}],["拉链法",{"2":{"339":1,"368":1}}],["地址与api接口一致",{"2":{"512":1}}],["准备工作",{"2":{"573":1}}],["准备好要构建镜像的dockerfile文件",{"2":{"558":1}}],["准备接收变更数据",{"2":{"514":1}}],["准备线程池",{"2":{"514":1}}],["准备请求参数",{"2":{"512":1}}],["准备一个map",{"2":{"491":1}}],["立即去nacos读取",{"2":{"511":1}}],["立即更新服务列表",{"2":{"511":1}}],["立刻再拉取一条",{"2":{"451":1}}],["格式",{"2":{"511":1}}],["格式为",{"2":{"480":1}}],["缓存雪崩",{"0":{"700":1},"1":{"701":1,"702":1}}],["缓存击穿",{"0":{"697":1},"1":{"698":1,"699":1}}],["缓存穿透解决方案二",{"2":{"696":1}}],["缓存穿透解决方案一",{"2":{"694":1}}],["缓存穿透伪代码",{"0":{"692":1}}],["缓存穿透",{"0":{"691":1},"1":{"692":1,"693":1,"694":1,"695":1,"696":1}}],["缓存中大量的key在同一时间过期",{"2":{"701":1}}],["缓存中某一个热点数据的key突然过期",{"2":{"698":1}}],["缓存中没有",{"2":{"690":1,"708":1}}],["缓存中有",{"2":{"511":1,"690":1}}],["缓存的一个步骤",{"2":{"690":1}}],["缓存是一个map",{"2":{"511":1}}],["缓存导致的可见性问题",{"2":{"139":1}}],["批量处理集合中的任务",{"2":{"505":1}}],["心跳周期5秒",{"2":{"506":1}}],["心跳周期的默认值在com",{"2":{"498":1}}],["心跳间隔超过30秒则从服务列表删除",{"2":{"506":1}}],["心跳间隔超过15秒则标记为不健康",{"2":{"506":1}}],["心跳间隔",{"2":{"504":1}}],["心跳异常检测",{"0":{"504":1}}],["心跳的任务封装在beattask这个类中",{"2":{"499":1}}],["心跳超时时间",{"2":{"480":1,"504":1}}],["周期为2000",{"2":{"506":1}}],["周期为",{"2":{"498":1}}],["互不干扰",{"2":{"545":1}}],["互不影响",{"2":{"494":1}}],["互斥",{"2":{"179":1}}],["互斥量",{"2":{"179":1}}],["互斥条件",{"2":{"149":1,"225":1}}],["外层key是namespace",{"2":{"494":1}}],["外部对引用对象的改变会反映到所对应的对象上",{"2":{"99":1}}],["外部类变量",{"2":{"89":2}}],["外部类",{"2":{"50":2,"82":1}}],["移除指定key的生存时间",{"2":{"585":1}}],["移除count个的value值",{"2":{"582":1}}],["移除要删除的实例",{"2":{"491":1}}],["移动当前数据库中对应的key到其他数据库",{"2":{"585":1}}],["移动文件",{"2":{"107":1}}],["移动时都存活的对象",{"2":{"33":1}}],["信息到",{"2":{"489":1}}],["信号量",{"2":{"179":1,"276":2,"278":2}}],["肯定是null",{"2":{"485":1}}],["拿锁失败",{"2":{"712":1}}],["拿锁成功",{"2":{"708":1}}],["拿苹果",{"2":{"686":1}}],["拿不到则抛异常",{"2":{"484":1}}],["拿到锁之后",{"2":{"712":1}}],["拿到苹果",{"2":{"686":2}}],["拿到创建好的service",{"2":{"484":1}}],["拿到",{"2":{"156":1}}],["环境",{"2":{"480":1}}],["环绕增强",{"2":{"418":1}}],["组名称",{"2":{"480":1}}],["组织请求参数",{"2":{"480":1,"500":1}}],["组中还可以有线程",{"2":{"260":1}}],["拼接得到新的服务名",{"2":{"480":1}}],["☆☆☆☆开始注册☆☆☆☆",{"2":{"478":1}}],["权重",{"2":{"475":1,"479":1}}],["权重等等信息",{"2":{"474":1}}],["否",{"2":{"475":8,"486":1,"495":2,"507":4}}],["否则认为加锁失败",{"2":{"714":1}}],["否则返回0",{"2":{"584":1}}],["否则就数组无法被gc回收",{"2":{"372":1}}],["否则就选择非受检异常",{"2":{"304":1}}],["否则进入扩容元素重排逻辑",{"2":{"372":1}}],["否则进行链表的插入操作",{"2":{"371":1}}],["否则转向⑤",{"2":{"371":1}}],["否则转向④",{"2":{"371":1}}],["否则执行resize",{"2":{"371":1}}],["否则建议用",{"2":{"349":1}}],["否则抛出异常",{"2":{"341":1}}],["否则只需要在方法签名中声明让调用者去处理",{"2":{"324":1}}],["否则也要在方法签名中用",{"2":{"306":1}}],["否则会导致编译错误",{"2":{"291":1}}],["否则会抛出",{"2":{"146":1}}],["否则编译不通过",{"2":{"288":1}}],["否则不能通过编译",{"2":{"287":1}}],["否则处理器不做任何操作",{"2":{"221":1}}],["否则",{"2":{"179":1,"325":1}}],["健康检测逻辑定义在healthcheckprocessor",{"2":{"505":1}}],["健康状态",{"2":{"474":1}}],["健壮性",{"2":{"37":1}}],["集成后在idea中可以看到git相关图标",{"2":{"522":1}}],["集群",{"2":{"686":1}}],["集群ip",{"2":{"674":1}}],["集群信息",{"2":{"673":1}}],["集群信息的文件",{"2":{"671":1}}],["集群的总线端口",{"2":{"671":1}}],["集群的对外port",{"2":{"671":1}}],["集群的对外ip地址",{"2":{"671":1}}],["集群中包含多个实例",{"2":{"494":1}}],["集群中除自己以外的其它节点",{"2":{"492":1}}],["集群数据同步等",{"2":{"716":1}}],["集群数据同步",{"0":{"492":1}}],["集群名拼接",{"2":{"511":1}}],["集群名",{"2":{"475":1}}],["集群名称",{"2":{"474":1,"480":1,"507":1}}],["集合二",{"2":{"584":1}}],["集合一",{"2":{"584":1}}],["集合名称",{"2":{"584":1}}],["集合名",{"2":{"584":1}}],["集合类的一个顶级接口",{"2":{"394":1}}],["集合使用自动装箱来减少编码工作量",{"2":{"391":1}}],["集合",{"2":{"348":1,"491":1,"505":1}}],["集合在被遍历期间如果内容发生变化",{"2":{"341":1}}],["集合容器在不断向上抽取过程中",{"2":{"335":1}}],["集合存储的对象可以是不同数据类型",{"2":{"335":1}}],["集合只能存储引用数据类型",{"2":{"335":1}}],["集合可变长度的",{"2":{"335":1}}],["集合和数组的区别",{"0":{"335":1}}],["集合用于存储对象",{"2":{"334":1}}],["集合的特点主要有如下两点",{"2":{"334":1}}],["集合的特点",{"0":{"334":1}}],["集合接口的具体实现",{"2":{"333":1}}],["集合框架中的",{"2":{"345":1}}],["集合框架底层数据结构",{"0":{"339":1}}],["集合框架通过提供有用的数据结构和算法使你能集中注意力于你的程序的重要部分上",{"2":{"333":1}}],["集合框架是为表示和操作集合而规定的一种统一的标准的体系结构",{"2":{"333":1}}],["集合框架",{"2":{"333":1}}],["集合框架理解",{"0":{"332":1},"1":{"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1}}],["集合里的元素即使isnotempty",{"2":{"330":1}}],["起到环境隔离的作用",{"2":{"474":1}}],["安装成功后",{"2":{"573":1}}],["安装gcc环境和make指令",{"2":{"572":1}}],["安装",{"0":{"571":1},"1":{"572":1,"573":1},"2":{"576":1}}],["安装完成后可以在任意目录下点击鼠标右键",{"2":{"526":1}}],["安装protoc",{"0":{"471":1}}],["安全设置",{"2":{"660":1}}],["安全方面也有保障",{"2":{"251":1}}],["安全性",{"2":{"37":1}}],["订单号如果使用的是时间戳",{"2":{"687":1}}],["订单微服务",{"2":{"467":1}}],["订阅服务消息",{"2":{"511":1}}],["订阅服务信息",{"2":{"510":1}}],["订阅等功能",{"2":{"480":1}}],["订阅模式",{"0":{"452":1},"1":{"453":1},"2":{"519":1}}],["项目父目录",{"2":{"467":1}}],["项目使用nacos注入名为配置文件中spring",{"2":{"465":1}}],["项目使用nacos前置操作",{"0":{"465":1},"1":{"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1}}],["国内比较常见的有",{"2":{"464":1}}],["绑定binding",{"2":{"448":1}}],["绑定binding配置",{"2":{"448":1}}],["绑定配置",{"2":{"448":1}}],["绑定对象",{"2":{"109":2}}],["密码",{"2":{"448":1}}],["耦合低",{"2":{"445":1}}],["切换数据库",{"2":{"585":1}}],["切换分支命令格式",{"2":{"548":1}}],["切换分支",{"0":{"548":1},"2":{"545":1}}],["切换到指定版本命令格式",{"2":{"537":1}}],["切换到",{"2":{"442":1}}],["切点是添加了",{"2":{"418":1}}],["累加计算",{"2":{"442":1}}],["累加求和",{"2":{"438":1}}],["触发aof规则",{"0":{"637":1}}],["触发aof的规则",{"2":{"635":1,"641":1}}],["触发次数就会很多",{"2":{"635":1,"641":1}}],["触发rdb",{"0":{"630":1,"631":1,"632":1}}],["触发rdb机制的情况",{"0":{"628":1}}],["触发rdb机制的规则",{"2":{"627":1,"629":1}}],["触发断路器",{"0":{"442":1}}],["触发",{"2":{"441":1}}],["断路器打开",{"2":{"441":1}}],["断言规则",{"2":{"409":1}}],["醒来后继续执行",{"2":{"439":1}}],["拒绝",{"2":{"439":1}}],["漏桶",{"0":{"439":1}}],["漏桶算法",{"2":{"434":1}}],["距离当前时间1秒内的",{"2":{"438":1}}],["窗口开始时间",{"2":{"438":1}}],["窗口的请求阈值",{"2":{"438":1}}],["÷",{"2":{"438":1}}],["走node",{"2":{"438":1}}],["覆盖实例列表",{"0":{"491":1}}],["覆盖旧窗口并返回",{"2":{"437":1}}],["覆盖旧窗口",{"2":{"437":1}}],["覆盖最初的window",{"2":{"437":1}}],["角标归0",{"2":{"437":1}}],["滑动窗口的最大间隔",{"2":{"438":1}}],["滑动窗口的时间间隔",{"2":{"437":2}}],["滑动窗口时间范围内",{"2":{"438":1}}],["滑动窗口时间间隔",{"2":{"438":1}}],["滑动窗口范围内",{"2":{"438":2}}],["滑动窗口qps计算",{"0":{"438":1}}],["滑动窗口内的",{"2":{"437":1}}],["滑动时间窗口的功能分两部分来看",{"2":{"436":1}}],["滑动时间窗口",{"0":{"436":1},"1":{"437":1,"438":1}}],["滑动时间窗口算法",{"2":{"434":1}}],["秒杀10000件商品",{"2":{"701":1}}],["秒",{"2":{"437":1}}],["秒不执行任务",{"2":{"254":1}}],["略",{"2":{"435":1,"514":1}}],["阈值小于等于",{"2":{"439":1}}],["阈值",{"2":{"435":1}}],["阈值类型",{"2":{"435":1}}],["刚好对应表单参数",{"2":{"435":1}}],["刚开始的时候",{"2":{"103":1}}],["排行榜",{"0":{"685":1}}],["排队等待模式",{"2":{"435":1,"438":1,"439":1}}],["排队等待效果",{"2":{"434":1}}],["排队等待",{"2":{"434":1,"435":2}}],["排序等",{"2":{"333":1}}],["快速入门",{"0":{"595":1}}],["快速开始",{"0":{"448":1},"1":{"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1}}],["快速失败",{"2":{"434":2,"435":2,"438":1,"439":1}}],["快速的检索出对应的",{"2":{"95":1}}],["链路模式",{"2":{"434":2,"435":1}}],["链表节点",{"2":{"388":1}}],["链表结构转树形结构",{"2":{"371":1}}],["链表的特点是",{"2":{"367":1,"376":1}}],["链表散列",{"2":{"366":1}}],["链表则是主要为了解决哈希冲突而存在的",{"2":{"339":2,"388":1}}],["令牌桶",{"0":{"433":1}}],["含义是每隔duration时间长度内",{"2":{"432":1}}],["含义上",{"2":{"115":1}}],["校验规则",{"2":{"435":1}}],["校验的逻辑定义在flowrulechecker的canpasscheck方法中",{"2":{"435":1}}],["校验",{"2":{"431":3}}],["校验黑白名单",{"2":{"430":1}}],["逐个规则做校验",{"2":{"435":1}}],["逐个判断",{"2":{"430":1,"440":1}}],["逐渐的扩展成为",{"2":{"103":1}}],["黑名单",{"2":{"430":1}}],["黑白名单校验的逻辑",{"2":{"430":1}}],["白名单",{"2":{"430":1}}],["责任链就建立起来了",{"2":{"426":1}}],["责任链中的slot也分为两大类",{"2":{"414":1}}],["依旧会以aof形式的把redis命令追加到新的aof文件中",{"2":{"647":1}}],["依赖",{"2":{"465":1}}],["依赖倒置原则dip",{"2":{"62":1}}],["依次返回得到数据",{"2":{"580":1}}],["依次是",{"2":{"429":1}}],["依次类推",{"2":{"426":1}}],["入口在2",{"2":{"505":1}}],["入口",{"0":{"425":1},"2":{"558":1}}],["入口节点",{"2":{"423":1}}],["入口节点为空",{"2":{"423":1}}],["验证下processorslotchain的执行流程",{"2":{"424":1}}],["验证当前用户",{"2":{"401":1}}],["判空",{"2":{"423":1,"428":1}}],["判断key在布隆过滤器中是否存在",{"2":{"696":1}}],["判断key是否存在",{"2":{"585":1}}],["判断数据库有没有这个数据时",{"2":{"694":1}}],["判断主节点是否挂了",{"2":{"658":1}}],["判断元素是否在集合中",{"2":{"583":1}}],["判断元素是否存在的依据",{"2":{"360":1}}],["判断小key是否存在",{"2":{"581":1}}],["判断缓存是否存在",{"2":{"511":1}}],["判断心跳间隔",{"2":{"504":1}}],["判断心跳结果",{"2":{"499":1}}],["判断cluster是否存在",{"2":{"491":1}}],["判断实例是否包含clustername",{"2":{"491":1}}],["判断实际存在的键值对数量size是否超多了最大容量threshold",{"2":{"371":1}}],["判断委托对象",{"2":{"486":1}}],["判断服务中是否包含要注册的实例的cluster信息",{"2":{"485":1}}],["判断服务的",{"2":{"478":1}}],["判断serviceid是否为空",{"2":{"479":1}}],["判断是否需要订阅服务信息",{"2":{"510":1}}],["判断是否需求切换状态",{"2":{"442":1}}],["判断是否是临时实例",{"2":{"486":1,"489":1,"496":1}}],["判断是否为临时实例",{"2":{"480":1}}],["判断是否已经完成",{"2":{"157":1}}],["判断异常比例是否超出阈值",{"2":{"442":1}}],["判断状态机状态",{"2":{"441":1}}],["判断这个小窗口是否在",{"2":{"438":1}}],["判断的关键就是int",{"2":{"438":1}}],["判断",{"2":{"438":1,"441":1,"504":1}}],["判断规则",{"2":{"435":1}}],["判断时会用",{"2":{"422":1}}],["判断限流规则",{"2":{"413":1}}],["判断table",{"2":{"371":2}}],["判断键值对数组table",{"2":{"371":1}}],["判断当前的key已经存在的情况下",{"2":{"371":1}}],["判断链表长度是否大于8",{"2":{"371":1}}],["判断链表中结点的key值与插入的元素的key值是否相等",{"2":{"371":1}}],["判断链表的长度是否达到转化红黑树的临界值",{"2":{"371":1}}],["判断该链表尾部指针是不是空的",{"2":{"371":1}}],["判断该链为红黑树",{"2":{"371":1}}],["判断条件谓词是否得到满足",{"2":{"165":1}}],["判断两个对象是不是同一个对象",{"2":{"94":1}}],["名称2",{"2":{"584":1}}],["名称1",{"2":{"584":1}}],["名称",{"2":{"475":1,"495":1,"507":1}}],["名称就是当前请求的controller方法的映射路径",{"2":{"422":1}}],["名字与类名相同",{"2":{"73":1}}],["授权规则",{"2":{"422":1}}],["维持着入口节点",{"2":{"420":1}}],["维护着对象的指针",{"2":{"11":1}}],["贯穿一次调用链路中的所有资源",{"2":{"420":1}}],["业务中需要访问user",{"2":{"467":1}}],["业务2",{"2":{"415":1}}],["业务1",{"2":{"415":1}}],["响应时间",{"2":{"414":1}}],["限流拦截要看flowslot中的逻辑",{"2":{"437":1}}],["限流规则检测",{"2":{"435":1}}],["限流",{"2":{"414":1,"699":1}}],["限流等问题",{"2":{"106":1}}],["熔断降级规则判断",{"2":{"440":1}}],["熔断规则是否满足",{"2":{"413":1}}],["熔断等功能",{"2":{"413":1}}],["qf",{"2":{"597":1}}],["qa",{"2":{"560":2}}],["qq",{"2":{"528":1}}],["q",{"2":{"457":6}}],["qps校验",{"2":{"431":1}}],["qps",{"2":{"413":1,"414":1,"431":2,"435":2,"438":1}}],["quicktest",{"2":{"595":1}}],["querylist",{"2":{"511":1,"512":1}}],["queryorderbyid",{"2":{"417":1}}],["query访问了service中的资源",{"2":{"415":1}}],["queues",{"2":{"449":1}}],["queuename",{"2":{"449":2}}],["queuebinding",{"2":{"448":1}}],["queuebuilder",{"2":{"448":1}}],["queue2",{"2":{"448":2}}],["queue1绑定到fanout",{"2":{"448":1}}],["queue1",{"2":{"448":1,"449":2,"455":1,"457":1}}],["queue三种子接口",{"2":{"338":1}}],["queue",{"0":{"362":1,"364":1,"450":1},"1":{"363":1,"364":1,"451":1},"2":{"159":1,"251":1,"266":2,"364":5,"447":1,"448":4}}],["quot",{"0":{"122":2},"2":{"20":6,"76":4,"120":6,"122":2,"123":2,"286":4,"528":4}}],["统计进入某个资源的请求次数",{"2":{"429":1}}],["统计某个资源的访问数据",{"2":{"413":1}}],["统计数据构建部分",{"2":{"414":1}}],["统计数据",{"2":{"413":1}}],["统一遍历集合的接口",{"2":{"349":1}}],["降级等判断",{"2":{"429":1}}],["降级规则",{"2":{"413":1}}],["降级",{"2":{"413":1,"414":1,"699":1}}],["降低哈希碰撞概率也使得数据分布更平均",{"2":{"383":1}}],["降低资源消耗",{"2":{"255":1}}],["降低了程序的性能",{"2":{"234":1}}],["降低稳定性jvm",{"2":{"188":1}}],["隔离性",{"2":{"445":1,"619":1}}],["隔离规则",{"2":{"413":1}}],["隔离",{"2":{"413":1}}],["隔开",{"2":{"298":1}}],["针对不同的请求参数值分别统计qps的限流方式",{"2":{"432":1}}],["针对当前路由生效",{"2":{"409":1}}],["针对整个类有效",{"2":{"69":1}}],["路由模式使用directexchange交换机",{"2":{"455":1}}],["路由模式",{"0":{"454":1},"1":{"455":1}}],["路由key",{"2":{"453":1}}],["路由的目标服务",{"2":{"409":1}}],["路由的唯一标识",{"2":{"409":1}}],["路由表",{"2":{"409":1}}],["网关",{"2":{"409":1}}],["网络连接和磁盘文件",{"2":{"289":1}}],["网络",{"0":{"559":1},"2":{"106":1}}],["浏览器只是针对同源策略的一种实现",{"2":{"407":1}}],["端口等",{"2":{"479":1}}],["端口不同",{"2":{"407":1}}],["端口",{"2":{"407":1,"448":1,"465":1}}],["协议不同",{"2":{"407":1}}],["协议",{"2":{"407":1}}],["域由三部分组成",{"2":{"407":1}}],["域",{"0":{"407":1}}],["导入redission依赖",{"2":{"696":1}}],["导入后的项目结构",{"2":{"468":1}}],["导入nacos源码",{"0":{"468":1}}],["导入依赖转换工具包",{"2":{"448":1}}],["导入依赖",{"0":{"403":1,"604":1},"2":{"409":1,"595":1}}],["导致其他线程没有办法拿到锁",{"2":{"709":1}}],["导致数据库宕机",{"2":{"691":1}}],["导致一直无法执行的状态",{"2":{"226":1}}],["导致一直重复尝试",{"2":{"226":1}}],["导致效率变低",{"2":{"28":1}}],["往常spring自带的restteamplate太过繁琐",{"2":{"400":1}}],["往往效率",{"2":{"340":1}}],["服务变更事件",{"2":{"518":1}}],["服务发现",{"0":{"507":1},"1":{"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1}}],["服务发送心跳",{"2":{"480":1}}],["服务心跳",{"0":{"495":1},"1":{"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1}}],["服务的实例列表",{"2":{"490":1}}],["服务的实例列表change事件",{"2":{"490":1}}],["服务的端口",{"2":{"478":1}}],["服务唯一标识",{"2":{"484":1}}],["服务端代码分两部分",{"2":{"501":1}}],["服务端流程图",{"0":{"493":1}}],["服务端",{"0":{"482":1,"501":1,"516":1},"1":{"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"502":1,"503":1,"504":1,"505":1,"517":1,"518":1}}],["服务状态设置为运行状态",{"2":{"478":1}}],["服务名称",{"2":{"480":1}}],["服务名",{"2":{"475":1,"495":1,"507":1,"511":1}}],["服务实例port",{"2":{"475":1}}],["服务实例ip",{"2":{"475":1}}],["服务调用者必须利用负载均衡的算法",{"2":{"465":1}}],["服务注册这一节中",{"2":{"496":1}}],["服务注册接口",{"0":{"475":1}}],["服务注册到nacos以后",{"2":{"474":1}}],["服务注册",{"0":{"474":1},"1":{"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1}}],["服务注册发现",{"2":{"465":1}}],["服务注册和发现",{"0":{"463":1},"1":{"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1},"2":{"399":1}}],["服务器内部错误",{"2":{"475":1,"495":1,"507":1}}],["服务器",{"2":{"245":1,"246":1}}],["文章id",{"2":{"684":2}}],["文档列表",{"0":{"396":1,"458":1,"551":1,"553":1},"1":{"397":1,"459":1,"460":1,"461":1,"462":1,"552":1,"554":1,"555":1}}],["文件名",{"2":{"537":1,"538":1}}],["文件的状态会随着我们执行git的命令发生变化",{"2":{"533":1}}],["文件配置",{"2":{"495":1}}],["文件打印到标准输出或错误文件中",{"2":{"186":1}}],["文件",{"0":{"186":1},"2":{"186":1,"560":1}}],["序列化器",{"0":{"607":1},"1":{"608":1,"609":1,"610":1}}],["序列化操作会对选择对应的序列化器来操作",{"2":{"606":1}}],["序列化失败",{"2":{"330":1}}],["序",{"2":{"395":1}}],["行排",{"2":{"395":1}}],["行为还是同步的",{"2":{"106":1}}],["行为模型应该总是通过接口而不是抽象类定义",{"2":{"64":1}}],["搜索以及线程安全等各种操作",{"2":{"394":1}}],["搜索所走过的路径称为引用链",{"2":{"22":1}}],["帮助类",{"2":{"394":1}}],["帮助子类做初始化工作",{"2":{"71":1}}],["辅助工具类",{"0":{"390":1},"1":{"391":1,"392":1,"393":1,"394":1,"395":1}}],["附加源码",{"2":{"389":1}}],["附加功能",{"2":{"255":1}}],["考虑两个问题",{"0":{"710":1},"2":{"710":1}}],["考虑了同步的问题",{"2":{"388":1}}],["考虑不同线程之间的数据同步和防止死锁",{"2":{"179":1}}],["竞争会越来越激烈效率越低",{"2":{"388":1}}],["竞争成功则继续执行",{"2":{"175":1}}],["替代",{"2":{"385":2}}],["替换",{"2":{"349":1}}],["替换一个元素",{"2":{"348":1}}],["②",{"2":{"388":1}}],["②创建时如果给定了容量初始值",{"2":{"385":1}}],["②spring框架也用到很多反射机制",{"2":{"111":1}}],["①",{"2":{"388":1}}],["①创建时如果不指定容量初始值",{"2":{"385":1}}],["①我们在使用jdbc连接数据库时使用class",{"2":{"111":1}}],["吧",{"2":{"385":1}}],["次方",{"2":{"384":1}}],["约有40亿个映射空间",{"2":{"383":1}}],["~2",{"2":{"383":1}}],["~",{"2":{"383":1}}],["~15",{"2":{"128":1,"129":1}}],["遵守了hashmap内部的规范",{"2":{"381":1}}],["遵循获取写锁",{"2":{"234":1}}],["拥有更好的性能",{"2":{"380":1}}],["输入info",{"2":{"656":1}}],["输入的redis命令出现了语法错误",{"2":{"620":1}}],["输入值不一定相同",{"2":{"374":1}}],["输出",{"2":{"311":1}}],["输出结果",{"2":{"148":1,"150":1}}],["散列值的空间通常远小于输入的空间",{"2":{"374":1}}],["散列",{"2":{"374":1}}],["散列表存储的是键值对",{"2":{"95":1}}],["造成大量的请求无法从缓存中获取数据",{"2":{"698":1,"701":1}}],["造成了资源浪费",{"2":{"451":1}}],["造成正常功能受影响",{"2":{"407":1}}],["造成lowhead",{"2":{"372":1}}],["造成永久阻塞",{"2":{"149":1}}],["见注1",{"2":{"372":2}}],["旧版本要这个属性",{"2":{"563":1}}],["旧实例列表不受影响",{"2":{"484":1}}],["旧数组的桶下标赋给临时变量e",{"2":{"372":1}}],["旧的容量为0",{"2":{"372":1}}],["zhangsan",{"2":{"629":1,"643":2}}],["zhangfei",{"2":{"611":1}}],["zhaoyun",{"2":{"611":1}}],["zhao",{"2":{"418":1}}],["zrank",{"2":{"584":1}}],["zrangebyscore",{"2":{"584":5}}],["zrange",{"2":{"584":3}}],["zremrangebyscore",{"2":{"584":1}}],["zrem",{"2":{"584":1}}],["zrevrangebyscorewithscores",{"2":{"598":1}}],["zrevrangebyscore",{"2":{"584":1}}],["zscore",{"2":{"584":1}}],["zsetoperations",{"2":{"611":3}}],["zsettest",{"2":{"598":1,"611":1}}],["zset的基本使用",{"2":{"598":1}}],["zset操作",{"2":{"584":1}}],["zset",{"0":{"584":1,"685":1},"2":{"579":1,"611":1}}],["zinterstore",{"2":{"584":2}}],["zincrby",{"2":{"584":1}}],["zip",{"2":{"466":1}}],["zcard",{"2":{"584":1}}],["zadd",{"2":{"584":2,"598":4}}],["zxvf",{"2":{"572":1}}],["zoneinfo",{"2":{"558":1}}],["zero",{"2":{"372":1}}],["z对象造型",{"2":{"60":1}}],["扩展信息",{"2":{"475":1}}],["扩展功能方便",{"2":{"445":1}}],["扩展后node对象的位置要么在原位置",{"2":{"372":1}}],["扩容之后需要重新去计算其hash值",{"2":{"372":1}}],["扩容优化",{"2":{"370":1}}],["扩容每次会增加",{"2":{"353":1}}],["扩容",{"2":{"353":1}}],["转",{"2":{"392":2}}],["转向③",{"2":{"371":1}}],["转向⑥",{"2":{"371":1}}],["转数组",{"2":{"351":1}}],["记录日志",{"2":{"505":2}}],["记录日志并再次抛出的逻辑",{"2":{"324":1}}],["记录当前",{"2":{"478":1}}],["记录请求来源",{"2":{"428":1}}],["记录在",{"2":{"425":1}}],["记录的是当前资源被访问的所有统计数据之和",{"2":{"415":1}}],["记录e的value",{"2":{"371":1}}],["节点key存在",{"2":{"371":1}}],["节省了一次指针定位的时间开销",{"2":{"13":1}}],["桶中已经存在元素",{"2":{"371":1}}],["桶为空",{"2":{"371":1}}],["^",{"2":{"371":1,"377":1,"383":3}}],["质量之后",{"2":{"371":1}}],["位",{"2":{"371":1}}],["位置的数据变成",{"2":{"223":1}}],["寻址困难",{"2":{"367":1,"376":1}}],["寻址容易",{"2":{"367":1,"376":1}}],["保存实例的instanceid",{"2":{"485":1}}],["保存实例列表",{"2":{"485":1}}],["保存数据有两种比较简单的数据结构",{"2":{"367":1,"376":1}}],["保险起见",{"2":{"439":1}}],["保证集群一致性",{"2":{"484":1}}],["保证key的不可更改性",{"2":{"381":1}}],["保证程序代码更加优雅",{"2":{"281":1}}],["保证多线程环境下变量的可见性",{"2":{"215":1}}],["保证了原子性",{"2":{"210":1}}],["保证在多线程环境下也能正常运行",{"2":{"200":1}}],["检测异常只会标记为不健康",{"2":{"506":1}}],["检测逻辑定义在healthchecktask这个类中",{"2":{"505":1}}],["检测文件路径是否存在",{"2":{"107":1}}],["检查用户是否点过赞",{"2":{"689":1}}],["检查新加入实例的状态",{"2":{"491":1}}],["检查超时参数是否异常",{"2":{"480":1}}],["检索元素效率低下",{"2":{"357":1}}],["阐述",{"0":{"354":1}}],["插入元素过程",{"2":{"389":1}}],["插入元素的时候",{"2":{"350":1}}],["插入成功后",{"2":{"371":1}}],["插入后回调",{"2":{"371":1}}],["插入和删除困难",{"2":{"367":1,"376":1}}],["插入和删除不会引起元素位置改变",{"2":{"357":1}}],["插入删除元素效率低",{"2":{"357":1}}],["插入速度较快",{"2":{"354":1}}],["插入数据时",{"0":{"354":1}}],["倍",{"2":{"353":1}}],["补充",{"2":{"352":1}}],["综上",{"2":{"360":1}}],["综上所述使用线程池框架",{"2":{"255":1}}],["综上所述",{"2":{"166":1,"329":1}}],["综合来说",{"2":{"352":1}}],["向全部节点发送释放锁请求",{"2":{"714":1}}],["向布隆过滤器插入key",{"2":{"696":1}}],["向布隆过滤器询问",{"2":{"695":1}}],["向布隆过滤器中添加",{"2":{"695":1}}],["向缓存中放一个无用数据",{"2":{"694":1}}],["向redis中写入数据",{"2":{"643":1,"647":1}}],["向redis",{"0":{"641":1}}],["向有序集合中增加元素",{"2":{"584":1}}],["向list中增加数据",{"2":{"582":1}}],["向hashset",{"2":{"360":1}}],["向前",{"2":{"348":1}}],["向上转型",{"2":{"61":2}}],["边遍历边修改",{"2":{"347":1}}],["迭代器遍历",{"2":{"349":1}}],["迭代器允许调用者在迭代过程中移除元素",{"2":{"345":1}}],["迭代器取代了",{"2":{"345":1}}],["迭代器",{"0":{"345":1}}],["迭代器在遍历时直接访问集合中的内容",{"2":{"341":1}}],["遍历注册表中的集群",{"2":{"505":1}}],["遍历要更新的实例",{"2":{"491":1}}],["遍历要现有的实例列表",{"2":{"485":1}}],["遍历实例列表",{"2":{"485":1}}],["遍历断路器",{"2":{"440":1}}],["遍历规则并判断",{"2":{"430":1}}],["遍历结束",{"2":{"372":1}}],["遍历链表",{"2":{"372":1}}],["遍历新数组的所有桶下标",{"2":{"372":1}}],["遍历过程中若发现key已经存在直接覆盖value即可",{"2":{"371":1}}],["遍历table",{"2":{"371":1}}],["遍历",{"2":{"349":1,"435":1,"438":2,"490":1,"492":1}}],["遍历方式有以下几种",{"2":{"349":1}}],["遍历的最佳实践是什么",{"0":{"349":1}}],["遍历一个",{"0":{"349":1}}],["遍历下一个元素之前",{"2":{"341":1}}],["遍历当前使用的区域",{"2":{"27":1}}],["枚举",{"2":{"340":1}}],["页面响应速度",{"2":{"340":1}}],["增量复制",{"2":{"652":1,"653":2}}],["增量垃圾回收",{"2":{"19":1}}],["增删操作要影响数组内的其他数据的下标",{"2":{"352":1}}],["增加数量",{"2":{"688":1}}],["增加请求头",{"2":{"409":1}}],["增加配置2",{"2":{"409":1}}],["增加配置1",{"2":{"409":1}}],["增加和删除效率",{"2":{"352":1}}],["增加了一条双向链表",{"2":{"339":1}}],["双十一大促期间",{"2":{"506":1}}],["双倍扩容阀值threshold",{"2":{"372":1}}],["双向链表也叫双链表",{"2":{"352":1}}],["双向循环链表",{"2":{"339":1}}],["双重校验锁实现对象单例",{"2":{"200":1}}],["唯一",{"2":{"338":1,"339":2}}],["元素是instance类型",{"2":{"494":1}}],["元素时",{"2":{"360":1}}],["元素",{"2":{"356":1}}],["元素都有索引",{"2":{"338":1,"357":1}}],["元素可以重复",{"2":{"338":1,"357":1}}],["元素存入集合的顺序和取出的顺序一致",{"2":{"338":1,"357":1}}],["元信息",{"2":{"8":1}}],["各种异常处理就省略了",{"2":{"429":1}}],["各有什么特点",{"0":{"338":1}}],["各个分支相互独立",{"2":{"545":1}}],["各个方法的弊端",{"2":{"262":1}}],["各个线程轮流获得",{"2":{"160":1}}],["各个对象拥有的副本互不影响",{"2":{"75":1}}],["建立本地仓库和远程仓库关系",{"2":{"540":1}}],["建立底层对象",{"2":{"335":1}}],["建议去看看源码",{"2":{"389":1}}],["建议进行npe检查",{"2":{"330":1}}],["建议使用这种",{"2":{"680":1}}],["建议使用",{"2":{"254":1,"265":1}}],["容量变为原来的2倍",{"2":{"385":1}}],["容量变为原来的2n+1",{"2":{"385":1}}],["容量自增长",{"2":{"336":1}}],["容易遗漏",{"2":{"330":1}}],["容器id",{"2":{"660":1}}],["容器名称",{"2":{"564":2,"628":1}}],["容器化技术",{"0":{"556":1},"1":{"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1}}],["容器分为",{"2":{"338":1}}],["容器",{"2":{"254":1,"338":2,"357":2}}],["随便一个节点的端口",{"2":{"674":1}}],["随便进入到一个容器中",{"2":{"673":1}}],["随便跟入一个",{"2":{"437":1}}],["随机弹出指定个数元素",{"2":{"583":1}}],["随机弹出一个元素",{"2":{"583":1}}],["随机",{"2":{"465":1}}],["随机访问效率",{"2":{"352":1}}],["随机访问的场景",{"2":{"350":1}}],["随意复制和粘贴代码",{"2":{"330":1}}],["随着对象的消失而消失",{"2":{"69":2}}],["随着对象的创建而存在",{"2":{"69":2}}],["加分布式锁",{"0":{"708":1}}],["加锁失败",{"2":{"714":1}}],["加锁成功",{"2":{"714":2}}],["加锁",{"0":{"706":1},"2":{"706":1}}],["加",{"2":{"439":1}}],["加入暂存区后再执行",{"2":{"536":1}}],["加入我们某个bucket下对应的链表有n个元素",{"2":{"378":1}}],["加入自己的理解的error",{"2":{"330":1}}],["加上costtime",{"2":{"439":1}}],["加上",{"0":{"356":1}}],["加了final",{"2":{"88":1}}],["跨平台的数据传输格式",{"2":{"470":1}}],["跨平台性",{"2":{"36":1}}],["跨域示例",{"2":{"407":1}}],["跨应用间rpc调用优先考虑使用result方式",{"2":{"330":1}}],["级联调用obj",{"2":{"330":1}}],["级别从低到高依次为",{"2":{"227":1}}],["防止npe",{"2":{"330":2}}],["防止死锁可以采用以下的方法",{"2":{"225":1}}],["仲裁机制可能导致引入非预期的版本使类的方法签名不匹配",{"2":{"330":1}}],["捕捉异常必须使用throwable类来进行拦截",{"2":{"330":1}}],["捕获标准异常并包装为自定义异常是一个很常见的做法",{"2":{"325":1}}],["捕获然后丢弃并且+finally扫尾处理",{"2":{"309":1}}],["捕获异常与抛异常",{"2":{"330":1}}],["捕获异常是为了处理它",{"2":{"330":1}}],["捕获异常",{"0":{"293":1,"298":1}}],["稳定代码指的是无论如何不会出错的代码",{"2":{"330":1}}],["条件控制",{"2":{"330":1}}],["强制",{"2":{"330":9}}],["强引用",{"2":{"21":1}}],["团队成员才能理解这些通用概念",{"2":{"329":1}}],["作为我们的本地git仓库",{"2":{"530":1}}],["作为参数",{"2":{"325":1}}],["作用于当前对象实例加锁",{"2":{"200":1}}],["作用域",{"2":{"19":2,"69":1}}],["作用",{"2":{"2":1,"371":1}}],["参阅顶层内容",{"2":{"335":1}}],["参考",{"2":{"330":2}}],["参考下方代码",{"2":{"325":1}}],["参数五",{"2":{"598":1}}],["参数四",{"2":{"598":1}}],["参数复杂",{"2":{"562":1}}],["参数三",{"2":{"453":1,"598":1}}],["参数二",{"2":{"453":1,"595":1,"598":1}}],["参数一",{"2":{"453":1,"595":1,"598":1}}],["参数一致",{"2":{"405":1}}],["参数为",{"2":{"423":1}}],["参数结果为被调用client接口包路径",{"2":{"404":1}}],["参数是comparator",{"2":{"395":1}}],["参数的时间单位",{"2":{"264":1}}],["参数的值就是对该对象的引用",{"2":{"98":1}}],["参数自己指定",{"2":{"262":1}}],["参数列表必须相同",{"2":{"92":1}}],["参数类型不同",{"2":{"92":1}}],["删除商品",{"2":{"688":1}}],["删除容器",{"0":{"640":1}}],["删除不存在的key返回0",{"2":{"585":1}}],["删除成功返回1",{"2":{"585":1}}],["删除成功返回删除的个数",{"2":{"584":1}}],["删除key",{"2":{"585":1}}],["删除指定分数区间的元素",{"2":{"584":1}}],["删除",{"2":{"583":1}}],["删除names列表中2个tom",{"2":{"582":1}}],["删除实例",{"2":{"485":1}}],["删除和定位元素这类操作",{"2":{"386":1}}],["删除和插入效率高",{"2":{"357":1}}],["删除元素的时候",{"2":{"350":1}}],["删除了阻止异常抛出的代码",{"2":{"323":1}}],["删除一个文件或目录",{"2":{"107":1}}],["典型的例子是",{"2":{"322":1}}],["声明entry的api示例",{"2":{"416":1}}],["声明",{"2":{"319":1}}],["声明异常还是抛出异常",{"2":{"294":1}}],["声明异常",{"0":{"291":1}}],["添加商品",{"2":{"688":1}}],["添加远程仓库命令格式",{"2":{"542":1}}],["添加远程仓库",{"2":{"540":1}}],["添加当前客户端",{"2":{"517":1}}],["添加心跳任务",{"2":{"496":1}}],["添加新的实例到",{"2":{"491":1}}],["添加新实例到列表中",{"2":{"484":1}}],["添加instanceid到set中",{"2":{"485":1}}],["添加到map中",{"2":{"485":1}}],["添加要注册的实例到service中",{"2":{"484":1}}],["添加入口节点到",{"2":{"423":1}}],["添加元素",{"2":{"388":2}}],["添加进去的值就是作为hashmap",{"2":{"360":1}}],["添加",{"2":{"319":1}}],["本节点密码",{"2":{"655":1}}],["本节我们会学习关于分支的相关命令",{"2":{"545":1}}],["本节我们会学习关于远程仓库的一些操作",{"2":{"540":1}}],["本来address的值是hangzhou",{"2":{"580":1}}],["本质为一个rabbitmq服务器",{"2":{"447":1}}],["本质是arraymetric",{"2":{"438":1}}],["本质要做的就是两件事情",{"2":{"413":1}}],["本次请求的",{"2":{"437":2}}],["本次调用链路的",{"2":{"420":1}}],["本手册明确防止npe是调用者的责任",{"2":{"330":1}}],["本应该使用if语句进行条件判断的情况下",{"2":{"326":1}}],["本文给出几个被很多团队使用的异常处理最佳实践",{"2":{"314":1}}],["本地仓库和远程仓库中都有分支",{"2":{"545":1}}],["本地仓库和远程仓库没有关系",{"2":{"540":1}}],["本地仓库配置的远程仓库都需要一个简称",{"2":{"541":1}}],["本地仓库是通过",{"2":{"540":1}}],["本地仓库是什么",{"2":{"525":1}}],["本地仓库常用命令如下",{"2":{"534":1}}],["本地仓库操作",{"0":{"534":1},"1":{"535":1,"536":1,"537":1,"538":1,"539":1}}],["本地仓库",{"2":{"525":1}}],["本地缓存不存在",{"2":{"515":1}}],["本地方法栈",{"2":{"3":1}}],["本地接口",{"2":{"2":2}}],["怎样处理等等",{"2":{"314":1}}],["怎么创建远程仓库",{"2":{"525":1}}],["怎么创建本地仓库",{"2":{"525":1}}],["怎么使用",{"0":{"346":1}}],["怎么确保一个集合不能被修改",{"0":{"342":1}}],["怎么防止死锁",{"0":{"225":1}}],["怎么知道线程",{"0":{"204":1}}],["怎么判断对象是否可以被回收",{"0":{"22":1}}],["访问次数",{"2":{"429":1}}],["访问order服务",{"2":{"417":1}}],["访问",{"2":{"417":1}}],["访问后回调",{"2":{"371":1}}],["访问null对象的属性",{"2":{"313":1}}],["访问修饰符大于等于父类",{"2":{"92":1}}],["访问修饰符图",{"2":{"50":1}}],["访问修饰符",{"0":{"50":1}}],["索引越界异常",{"2":{"313":1}}],["譬如",{"2":{"313":2}}],["算术条件异常",{"2":{"313":1}}],["算法是可复用的函数",{"2":{"333":1}}],["算法实现的",{"2":{"366":1}}],["算法实现",{"2":{"30":1}}],["算法",{"2":{"28":1,"238":1,"333":1}}],["找到所有临时实例的列表",{"2":{"504":1}}],["找到心跳的这个实例",{"2":{"503":1}}],["找到变化的service",{"2":{"490":1}}],["找到当前时间所在窗口",{"2":{"437":1}}],["找到对应的成员变量",{"2":{"437":1}}],["找不到类异常",{"2":{"313":1}}],["找出cpu耗用厉害的进程pid",{"2":{"147":1}}],["违法访问错误",{"2":{"313":1}}],["空指针异常",{"2":{"313":1}}],["空指针",{"2":{"312":1}}],["空闲列表",{"2":{"8":1,"9":1}}],["抓取",{"2":{"311":1}}],["显示数量",{"2":{"584":1}}],["显然",{"2":{"310":1}}],["显得代码比较繁琐",{"2":{"300":1}}],["扫尾",{"2":{"309":1}}],["扫面那些没有被任何引用的对象",{"2":{"17":1}}],["答",{"2":{"309":1,"310":1,"311":1,"373":1,"381":1,"382":1,"383":1,"384":1,"388":1,"494":4}}],["答案是大部分时候",{"2":{"193":1}}],["引入红黑树进一步降低遍历的时间复杂度",{"2":{"379":1}}],["引入了红黑树",{"2":{"370":1}}],["引起该异常的原因是",{"2":{"308":1}}],["引起的",{"2":{"308":1}}],["引用的逸出",{"2":{"217":1}}],["引用传递",{"2":{"100":1}}],["引用相等",{"2":{"96":1}}],["引用指向的内容是可以改变的",{"2":{"53":1}}],["引用数据类型",{"2":{"45":1,"94":1}}],["引用被释放时计数",{"2":{"22":1}}],["引用计数器法",{"2":{"22":1}}],["引用",{"2":{"13":1,"366":1}}],["引用中存储的是稳定的句柄地址",{"2":{"12":1}}],["引用中存储对象的句柄地址",{"2":{"12":1}}],["受查异常和非受查异常都可以被抛出",{"2":{"306":1}}],["受检异常是exception",{"2":{"304":1}}],["受检异常",{"0":{"304":1},"2":{"288":1}}],["受检异常与非受检异常",{"0":{"288":1}}],["拋出异常对象",{"2":{"306":1}}],["发起请求",{"2":{"512":1}}],["发送ack回执",{"2":{"514":1}}],["发送请求",{"2":{"500":1}}],["发送心跳",{"0":{"500":1},"2":{"499":1}}],["发送某个实例的心跳",{"2":{"495":1}}],["发送到",{"2":{"480":1}}],["发送注册服务实例的请求",{"2":{"480":1}}],["发布实例变更的事件",{"2":{"515":1}}],["发布实例状态变更的事件",{"2":{"504":1}}],["发布服务变更的udp通知",{"0":{"518":1}}],["发布服务变更的通知消息",{"2":{"491":1}}],["发布服务开始注册的事件",{"2":{"478":1}}],["发布注册完成事件",{"2":{"478":1}}],["发布订阅模式",{"2":{"453":1}}],["发布订阅模式使用fanoutexchange交换机",{"2":{"453":1}}],["发布订阅模式的交换机能将消息发送给多个队列",{"2":{"453":1}}],["发布",{"0":{"452":1},"1":{"453":1}}],["发现监听aof文件的内容发生了变化",{"2":{"643":1}}],["发现在data目录下出现了一个dump",{"2":{"630":1}}],["发现服务不存在",{"2":{"505":1}}],["发现等相关的各种接口",{"2":{"482":1}}],["发现等业务",{"2":{"467":1}}],["发现的规约接口",{"2":{"479":1}}],["发现同时对defaultnode和clusternode在做qps统计",{"2":{"437":1}}],["发现它继承了abstractsentinelinterceptor这个类",{"2":{"421":1}}],["发现可以处理异常的代码时",{"2":{"305":1}}],["发挥两者各自的优势",{"2":{"367":1,"376":1}}],["发生异常会自动释放锁",{"2":{"207":1}}],["发生在父子类中",{"2":{"92":1}}],["发生在同一个类中",{"2":{"92":1}}],["发生",{"2":{"21":1}}],["观察当",{"2":{"300":1}}],["子句中使用",{"2":{"322":1}}],["子句中使用它",{"2":{"322":1}}],["子句中打开资源",{"2":{"317":1}}],["子句中调用",{"2":{"300":1}}],["子句依然会执行",{"2":{"300":1}}],["子句是否执行",{"2":{"300":1}}],["子句修改如下",{"2":{"300":1}}],["子类对父类中某些方法进行重新定义",{"2":{"61":1}}],["子类继承父类并重写父类中已有的或抽象的方法",{"2":{"60":1}}],["子类可以替换父类出现在父类能够出现的任何地方",{"2":{"62":1}}],["子类可以用自己的方式实现父类的方法",{"2":{"60":1}}],["子类可以拥有自己属性和方法",{"2":{"60":1}}],["子类拥有父类非",{"2":{"60":1}}],["习惯上",{"2":{"299":1}}],["目标集合",{"2":{"584":1}}],["目标列表",{"2":{"582":1}}],["目前集成在springcloud中",{"2":{"464":1}}],["目前被集成在springcloudalibaba中",{"2":{"464":1}}],["目前被集成在springcloud当中",{"2":{"464":1}}],["目前开源的注册中心框架有很多",{"2":{"464":1}}],["目前主流的访问方式有",{"2":{"11":1}}],["目的是减少碰撞",{"2":{"371":1}}],["目的是避免单条链表过长而影响查询效率",{"2":{"370":1}}],["目的是屏蔽不同数据集合的特点",{"2":{"349":1}}],["目的是为了保证key在哈希表中的唯一性",{"2":{"382":1}}],["目的是为了给调用者提供尽可能多的信息",{"2":{"319":1}}],["目的是为了改变异常的类型",{"2":{"297":1}}],["除非从节点达到读的瓶颈",{"2":{"652":1}}],["除非你确定自己处于一种特殊的情况下能够处理错误",{"2":{"322":1}}],["除",{"2":{"288":1}}],["除了定时更新服务列表的功能外",{"2":{"513":1}}],["除了基本类型",{"2":{"117":1}}],["除了没有名字",{"2":{"85":1}}],["符合预期的异常情况",{"2":{"288":1}}],["经过redis综合测试",{"2":{"680":1}}],["经过计算就得到",{"2":{"673":1}}],["经过前面熟悉nacos",{"2":{"467":1}}],["经常容易出现的",{"2":{"288":1}}],["经典的使用场景是为每个线程分配一个",{"2":{"245":1}}],["倘若既",{"2":{"286":1}}],["特征",{"2":{"582":2,"619":1}}],["特性",{"2":{"315":1}}],["特点",{"0":{"451":1,"453":1,"455":1},"2":{"284":1,"286":1,"287":1,"357":2}}],["特别是它不保证该顺序恒久不变",{"2":{"366":1}}],["特别是前台页面",{"2":{"340":1}}],["特别是一些很耗资源的对象创建和销毁",{"2":{"254":1}}],["特别是集合类",{"2":{"102":1}}],["特别是",{"2":{"99":1}}],["错误代码",{"2":{"475":1,"495":1,"507":1}}],["错误编码",{"2":{"475":1,"495":1,"507":1}}],["错误简短信息",{"2":{"330":1}}],["错误码",{"2":{"330":2}}],["错误的严重程度等",{"2":{"320":1}}],["错误",{"0":{"284":1},"2":{"283":1}}],["屏障才会开门",{"2":{"278":1}}],["倒计时器",{"2":{"278":1}}],["允许多少个请求来访问这条数据",{"2":{"699":1}}],["允许多个线程同时访问",{"2":{"276":1,"278":1}}],["允许守护线程运行",{"2":{"589":1}}],["允许远程连接",{"2":{"589":1}}],["允许执行的时间点",{"2":{"439":1}}],["允许所有源跨域访问",{"2":{"410":1}}],["允许在请求中携带的头信息",{"2":{"409":1}}],["允许的跨域ajax的请求方式",{"2":{"409":1}}],["允许哪些网站的跨域请求",{"2":{"409":2}}],["允许重复",{"2":{"338":1}}],["允许不同",{"2":{"336":1}}],["允许任意数量的读线程并发地访问",{"2":{"239":1}}],["八",{"0":{"272":1,"614":1},"1":{"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"615":1,"616":1,"617":1}}],["意为",{"2":{"270":1}}],["意思是",{"2":{"211":1}}],["七",{"0":{"269":1,"603":1},"1":{"270":1,"271":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1,"611":1,"612":1,"613":1}}],["终止遍历",{"2":{"341":1}}],["终止线程池",{"2":{"266":1}}],["终端执行top命令",{"2":{"147":1}}],["饱和策略为",{"2":{"266":1}}],["饱和策略的话来配置线程池的时候默认使用的是",{"2":{"265":1}}],["饱和策略定义",{"2":{"265":1}}],["影响程序的整体性能",{"2":{"265":1}}],["影响关系",{"2":{"144":1}}],["您不会任务请求",{"2":{"265":1}}],["抛出nosuchmethodexception",{"2":{"330":1}}],["抛出错误",{"2":{"322":1}}],["抛出一个异常又会消耗1~5ms",{"2":{"328":1}}],["抛出一个",{"2":{"318":1}}],["抛出该异常",{"2":{"313":6}}],["抛出的仍然为原始异常",{"2":{"301":1}}],["抛出的异常小于等于父类",{"2":{"92":1}}],["抛出异常",{"0":{"292":1},"2":{"301":1}}],["抛出异常和捕获异常",{"2":{"290":1}}],["抛出",{"2":{"265":1,"281":1}}],["``",{"2":{"265":2}}],["``tryreleaseshared中的一种即可",{"2":{"230":1}}],["甚至是组件化",{"2":{"330":1}}],["甚至",{"2":{"262":2}}],["甚至本书的作者",{"2":{"99":1}}],["​\\t是docker官方考虑到docker命令过多",{"2":{"562":1}}],["​",{"2":{"262":1,"533":3}}],["规则不通过",{"2":{"430":1}}],["规则判断部分",{"2":{"414":1}}],["规则判断",{"2":{"413":1}}],["规则可以解决有序性问题",{"2":{"139":1}}],["规避资源耗尽的风险",{"2":{"262":1}}],["阿里巴巴java开发手册",{"0":{"330":1},"2":{"262":1}}],["复用线程",{"2":{"260":1}}],["复制文件",{"2":{"107":1}}],["复制算法的优点是效率高",{"2":{"32":1}}],["复制算法的执行过程如下图所示",{"2":{"27":1}}],["复制算法",{"0":{"27":1},"2":{"25":1,"30":3}}],["复制",{"2":{"5":1}}],["耗资源的",{"2":{"257":1}}],["框架中提供了一个",{"2":{"349":1}}],["框架可以非常方便的创建一个线程池",{"2":{"257":1}}],["框架是一个根据一组执行策略调用",{"2":{"257":1}}],["框架",{"0":{"257":2}}],["减回来",{"2":{"439":1}}],["减少创建销毁线程的开销",{"2":{"260":1}}],["减少对象创建销毁的开销",{"2":{"255":1}}],["减1",{"2":{"230":1}}],["尤其是对于线程池的原理不是很清楚的情况下",{"2":{"254":1}}],["尤其是产生死锁的四个必要条件",{"2":{"225":1}}],["技术产生的原因",{"2":{"254":1}}],["池化资源",{"2":{"254":1}}],["池化技术的思想主要是为了减少每次获取资源的消耗",{"2":{"254":1}}],["池化技术相比大家已经屡见不鲜了",{"2":{"254":1}}],["客户端依次向这个5个redis实例发起加锁请求",{"2":{"714":1}}],["客户端先获取当前时间戳t1",{"2":{"714":1}}],["客户端1在主机上执行setnx命令",{"2":{"714":1}}],["客户端去访问缓存中没有",{"2":{"691":1}}],["客户端注册的流程图",{"0":{"481":1}}],["客户端",{"0":{"476":1,"496":1,"508":1},"1":{"477":1,"478":1,"479":1,"480":1,"481":1,"497":1,"498":1,"499":1,"500":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1}}],["客户端请求中的语法错误",{"2":{"475":1,"495":1,"507":1}}],["客户端只需要向该接口发送请求",{"2":{"475":1}}],["客户端数据的读取和解析",{"2":{"251":1}}],["客户端和服务器端通过",{"2":{"106":1}}],["放行",{"2":{"435":1}}],["放行到下一个",{"2":{"429":1}}],["放弃了segment臃肿的设计",{"2":{"389":1}}],["放入待更新的服务列表",{"2":{"511":1}}],["放入一个阻塞队列中",{"2":{"505":1}}],["放入datastore",{"2":{"489":1}}],["放入阻塞队列",{"0":{"489":1},"2":{"489":1}}],["放入instance列表",{"2":{"485":1}}],["放入注册表",{"2":{"484":1}}],["放入缓存中",{"2":{"427":1}}],["放入缓存",{"2":{"425":1,"428":1,"511":1,"515":2,"703":1}}],["放入threadlocal",{"2":{"423":1}}],["放入树中",{"2":{"371":1}}],["放入元素时",{"2":{"251":1}}],["放在try语句块之内",{"2":{"289":1}}],["放在常量池中",{"2":{"94":1}}],["永久的持久化",{"2":{"585":1}}],["永久实例",{"2":{"506":1}}],["永久",{"2":{"495":1}}],["永久代",{"2":{"29":1}}],["永远记住",{"2":{"318":1}}],["永远无法被gc",{"2":{"248":1}}],["假如你需要对一个有序的key集合进行遍历",{"2":{"386":1}}],["假如我们不做任何措施的话",{"2":{"248":1}}],["假设存在两个线程",{"2":{"341":1}}],["假设有类a和b",{"2":{"313":1}}],["假设",{"2":{"185":1}}],["打印机",{"2":{"612":1}}],["打印结果",{"2":{"245":1}}],["打开git",{"2":{"526":2}}],["打开浏览器",{"2":{"417":1}}],["打包工具",{"2":{"36":1}}],["启动后",{"2":{"672":1}}],["启动redis服务器",{"2":{"647":1}}],["启动redis容器",{"0":{"642":1}}],["启动容器",{"0":{"661":1,"672":1},"2":{"573":1,"655":1}}],["启动窗口",{"2":{"560":1}}],["启动当前服务注册流程",{"2":{"478":1}}],["启动类",{"2":{"404":1}}],["启动openfeign",{"0":{"404":1}}],["启动了",{"2":{"245":1}}],["启动三个线程",{"2":{"245":1}}],["启动线程",{"2":{"153":1}}],["管道操作",{"0":{"613":1},"2":{"613":2}}],["管道的本质",{"2":{"602":1}}],["管理微服务依赖",{"2":{"467":1}}],["管理",{"2":{"245":1}}],["管我们什么事",{"2":{"59":1}}],["连接断开",{"2":{"717":2}}],["连接集群并向集群中插入数据",{"0":{"674":1}}],["连接redis服务器",{"2":{"656":1}}],["连接池对象",{"2":{"596":1}}],["连接池等等都是对这个思想的应用",{"2":{"254":1}}],["连接的是本地的redis",{"2":{"575":1}}],["连接",{"2":{"245":1}}],["连接网络的子线程等都是用户线程",{"2":{"146":1}}],["工作区",{"0":{"532":1},"2":{"532":1}}],["工作模式多了一些消费者",{"2":{"450":1}}],["工作队列模式",{"0":{"450":1},"1":{"451":1}}],["工作线程的生命周期比任何应用变量的生命周期都要长",{"2":{"245":1,"246":1}}],["工具类的",{"2":{"395":1}}],["工具类的不同方法按照我们的需求创建了不同的线程池",{"2":{"258":1}}],["工具类中的",{"0":{"395":1}}],["工具类创建线程池",{"2":{"152":2}}],["万一数据稍微有点多",{"2":{"243":1}}],["像拷贝数组",{"2":{"243":1}}],["像数据库提供的类似于",{"2":{"221":1}}],["免锁容器",{"2":{"243":1}}],["缺少一个前提条件",{"2":{"243":1}}],["缺点同上",{"2":{"350":1}}],["缺点是只能做简单的遍历",{"2":{"349":1}}],["缺点是内存利用率低",{"2":{"32":1}}],["缺点",{"0":{"446":1},"2":{"25":2,"26":1,"27":1,"28":1,"59":2,"110":1}}],["取样基数",{"2":{"680":1}}],["取消点赞",{"2":{"689":1}}],["取消事务",{"2":{"620":1}}],["取消暂存命令格式",{"2":{"537":1}}],["取消任务等操作",{"2":{"157":1}}],["取而代之的是采用node",{"2":{"389":1}}],["取而代之的是在改变时",{"2":{"241":1}}],["取余",{"2":{"384":1}}],["取余的操作来实现",{"2":{"384":1}}],["取出的数据元素也可能为null",{"2":{"330":1}}],["取出元素",{"2":{"251":1}}],["诸如",{"2":{"241":1}}],["阻止请求",{"2":{"439":1}}],["阻碍了系统的扩展性",{"2":{"240":1}}],["阻塞队列使用最经典的场景就是",{"2":{"251":1}}],["阻塞队列就是生产者存放元素的容器",{"2":{"251":1}}],["阻塞队列常用于生产者和消费者的场景",{"2":{"251":1}}],["阻塞队列",{"2":{"251":1}}],["阻塞队列的实现原理是什么",{"0":{"251":1}}],["阻塞其他线程",{"2":{"215":1}}],["阻塞后当前线程就将之前获取的对象锁释放",{"2":{"174":1}}],["阻塞的同时也将释放该对象的锁",{"2":{"174":1}}],["阻塞的情况分三种",{"2":{"159":1}}],["阻塞式方法是指程序会一直等待该方法完成期间不做其他事情",{"2":{"173":1}}],["阻塞",{"2":{"159":1,"163":1,"704":1}}],["阻塞模式使用就像传统中的支持一样",{"2":{"106":1}}],["何为同步容器",{"2":{"239":1}}],["何谓公平性",{"2":{"232":1}}],["利用线程池",{"2":{"498":1}}],["利用cas算法",{"2":{"387":1}}],["利用key的hashcode重新hash计算出当前对象的元素在数组中的下标",{"2":{"366":1}}],["利用executors",{"2":{"257":1}}],["利用",{"2":{"238":1}}],["利用好多线程机制可以大大提高系统整体的并发能力以及性能",{"2":{"137":1}}],["划分成若干部分来实现它的可扩展性和线程安全",{"2":{"238":1}}],["划分内存时还需要考虑一个问题",{"2":{"8":1}}],["平时涉及高并发如果要用map结构",{"2":{"237":1}}],["平台无关",{"2":{"470":1}}],["平台无关性",{"2":{"37":1}}],["平台类库中包含许多不可变类",{"2":{"217":1}}],["平台",{"2":{"49":1}}],["公平选择性",{"2":{"234":1}}],["公平锁和非公平锁",{"2":{"232":2}}],["公平锁",{"2":{"230":1}}],["满足配置文件的规则",{"0":{"632":1}}],["满足配置文件中的规则",{"2":{"628":1}}],["满足下面规则则会路由到对应的微服务",{"2":{"409":1}}],["满足fifo",{"2":{"232":1}}],["满了",{"2":{"181":1}}],["且每个请求设置超时时间",{"2":{"714":1}}],["且端口号是默认的6379",{"2":{"575":1}}],["且当前该节点不处于移动状态",{"2":{"389":1}}],["且异常的处理效率比条件判断方式要低很多",{"2":{"330":1}}],["且不需要调用者处理",{"2":{"292":1}}],["且有剩余资源",{"2":{"230":1}}],["且无法捕获处理",{"2":{"153":1}}],["正常停止容器",{"2":{"630":1}}],["正常停止容器时",{"0":{"630":1}}],["正常",{"2":{"475":1,"495":1,"507":1}}],["正在被",{"2":{"347":1}}],["正例",{"2":{"330":4}}],["正确就返回ok",{"2":{"580":1}}],["正确的程序在运行过程中",{"2":{"288":1}}],["正确同步的多线程程序是按happens",{"2":{"196":1}}],["正是因为它所具有这个特性",{"2":{"251":1}}],["正数表示成功",{"2":{"230":1}}],["负责请求来源origin的授权规则判断",{"2":{"430":1}}],["负责降级规则",{"2":{"414":1,"429":1}}],["负责限流规则",{"2":{"414":1,"429":1}}],["负责热点参数限流规则",{"2":{"414":1,"429":1}}],["负责系统保护规则",{"2":{"414":1,"429":1}}],["负责授权规则",{"2":{"414":1,"429":1}}],["负责统计实时调用数据",{"2":{"414":1}}],["负责构建某个资源的clusternode",{"2":{"414":1}}],["负责构建簇点链路中的节点",{"2":{"414":1}}],["负责当前进程中程序的执行",{"2":{"143":1}}],["负载均衡器",{"2":{"403":1}}],["负数表示失败",{"2":{"230":1}}],["成功返回的是交集的个数",{"2":{"584":1}}],["成功返回1",{"2":{"580":1}}],["成功则返回true",{"2":{"230":3}}],["成员位置上的非静态类",{"2":{"83":1}}],["成员内部类依赖于外部类的实例",{"2":{"83":1}}],["成员内部类可以访问外部类所有的变量和方法",{"2":{"83":1}}],["成员内部类",{"0":{"83":1},"2":{"81":1}}],["成员变量和局部变量的区别",{"2":{"69":1}}],["成员变量",{"2":{"69":5}}],["成员变量与局部变量的区别有哪些",{"0":{"69":1}}],["成员函数据名",{"2":{"55":1}}],["模拟10个线程同时访问热点数据",{"2":{"704":1}}],["模拟从数据库获取数据向布隆过滤器中插入数据",{"2":{"696":1}}],["模拟从数据库查询",{"2":{"692":1,"696":1}}],["模块结构如下",{"2":{"482":1}}],["模式二",{"2":{"519":1}}],["模式一",{"2":{"519":1}}],["模式",{"2":{"349":1}}],["模板方法模式很经典的一个应用",{"2":{"230":1}}],["模型是无能为力的",{"2":{"106":1}}],["独占该锁并将state+1",{"2":{"230":1}}],["独占方式",{"2":{"230":2}}],["独占",{"2":{"230":1}}],["期望值",{"2":{"230":1}}],["详解与源码分析",{"0":{"228":1},"1":{"229":1,"230":1}}],["详细的可以参见",{"2":{"210":1}}],["详细回答",{"2":{"106":1}}],["详细介绍一下",{"0":{"31":1}}],["轻量级锁和重量级锁状态",{"2":{"227":1}}],["轻量级锁等技术来减少锁操作的开销",{"2":{"199":1}}],["饥饿",{"2":{"226":1}}],["活",{"2":{"226":1}}],["活锁有可能自行解开",{"2":{"226":1}}],["活锁和死锁的区别在于",{"2":{"226":1}}],["活锁",{"2":{"226":1}}],["尝试拿锁",{"2":{"708":1}}],["尝试基于namespaceid和servicename从",{"2":{"502":1}}],["尝试根据参数中的namespaceid",{"2":{"502":1}}],["尝试执行同步任务",{"2":{"492":1}}],["尝试获取服务",{"2":{"505":1}}],["尝试获取servicename",{"2":{"483":1}}],["尝试获取namespaceid",{"2":{"483":1}}],["尝试获取",{"2":{"427":1,"442":1}}],["尝试获取入口节点",{"2":{"423":1}}],["尝试获取context",{"2":{"423":1}}],["尝试获取资源",{"2":{"230":2}}],["尝试加载某类时在内存中找不到该类的定义",{"2":{"308":1}}],["尝试释放资源",{"2":{"230":2}}],["尝试",{"2":{"226":1}}],["预计元素为100000000l",{"2":{"696":1}}],["预期等待时间在阈值范围内",{"2":{"439":1}}],["预期等待时间小于阈值",{"2":{"439":1}}],["预期等待时长",{"2":{"439":2}}],["预期原值",{"2":{"222":1}}],["预热模式",{"2":{"435":1,"438":1,"439":1}}],["预热时长",{"2":{"435":1}}],["预防和",{"2":{"225":1}}],["问题就是",{"2":{"315":1}}],["问题的原子类",{"2":{"270":1}}],["问题",{"2":{"223":2}}],["失败返回0",{"2":{"580":1}}],["失败则返回false",{"2":{"230":3}}],["失败",{"2":{"226":2}}],["失败的线程并不会被挂起",{"2":{"221":1}}],["失败重试来保障更新操作的原子性",{"2":{"10":1}}],["机制",{"2":{"221":1,"341":1}}],["机器可执行的二进制机器码",{"2":{"38":1}}],["乐观锁的实现方式",{"2":{"221":1}}],["乐观锁适用于多读的应用类型",{"2":{"221":1}}],["乐观锁",{"2":{"221":1}}],["乐观锁和悲观锁的理解及如何实现",{"0":{"221":1}}],["写跟性的性能",{"2":{"586":1}}],["写3",{"2":{"563":1}}],["写这里只是以防万一",{"2":{"437":1}}],["写精确域名",{"2":{"409":1}}],["写通配符",{"2":{"409":1}}],["写入注册表并初始化",{"2":{"505":1}}],["写入失败",{"2":{"437":1}}],["写入成功",{"2":{"437":1}}],["写入将导致创建整个底层数组的副本",{"2":{"243":1}}],["写入文件",{"2":{"107":1}}],["写和写之间才会互斥",{"2":{"234":1}}],["写和读",{"2":{"234":1}}],["写锁能够降级成为读锁",{"2":{"234":1}}],["写锁是独占的",{"2":{"234":1}}],["写锁等",{"2":{"221":1}}],["读写分离",{"2":{"243":1}}],["读写锁是用来提升并发程序性能的锁分离技术",{"2":{"234":1}}],["读写锁reentrantreadwritelock源码分析",{"0":{"233":1},"1":{"234":1}}],["读取本地服务列表的缓存",{"2":{"511":1}}],["读取事件",{"2":{"505":1}}],["读取数据的线程不断将数据放入队列",{"2":{"251":1}}],["读取到数据可能还是旧的",{"2":{"243":1}}],["读取操作可以安全地执行",{"2":{"243":1}}],["读取文件时若发生异常",{"2":{"300":1}}],["读取文件",{"2":{"107":1}}],["读和写分开",{"2":{"243":1}}],["读和写",{"2":{"234":1}}],["读和读之间不会互斥",{"2":{"234":1}}],["读数据是不会改变数据的",{"2":{"234":1}}],["读锁和写锁都支持线程重进入",{"2":{"234":1}}],["读锁是共享的",{"2":{"234":1}}],["读锁",{"2":{"221":1}}],["总请求数量",{"2":{"442":1}}],["总计数器",{"2":{"429":1}}],["总是使用2的幂作为哈希表的大小",{"2":{"385":1}}],["总是优先捕获最具体的异常类",{"2":{"321":1}}],["总是尝试寻找最适合你的异常事件的类",{"2":{"318":1}}],["总是假设最坏的情况",{"2":{"221":1}}],["总结",{"0":{"329":1,"494":1,"506":1,"519":1},"2":{"99":1,"155":1,"200":1}}],["悲观锁是将资源锁住",{"2":{"222":1}}],["悲观锁",{"2":{"221":1}}],["定时",{"2":{"712":1}}],["定时去根据指定的淘汰策略来删除key",{"2":{"679":1}}],["定时更新服务列表",{"0":{"509":1},"1":{"510":1,"511":1,"512":1}}],["定时健康检测",{"2":{"505":1}}],["定时向实例发送请求",{"2":{"505":1}}],["定时检测实例心跳是否按期执行",{"2":{"501":1}}],["定时的",{"2":{"220":1}}],["定期执行心跳任务",{"2":{"498":1}}],["定期执行",{"2":{"255":1}}],["定义了一个方法用来处理心跳请求",{"2":{"502":1}}],["定义了一些字符串的基本操作",{"2":{"128":1}}],["定义了register",{"2":{"479":1}}],["定义时区分unchecked",{"2":{"330":1}}],["定义一个distro的同步任务",{"2":{"492":1}}],["定义一个异常类应包含两个构造函数",{"2":{"299":1}}],["定义一个thread类的子类",{"2":{"152":1}}],["定义一些策略",{"2":{"265":1}}],["定义runnable接口实现类myrunnable",{"2":{"152":1}}],["定义在thread类里面啊",{"2":{"166":1}}],["定义在jdk的object",{"2":{"95":1}}],["定义在静态方法中的局部类只能访问外部类的静态变量和方法",{"2":{"84":1}}],["定义在静态方法中的局部类不可以访问外部类的实例变量",{"2":{"84":1}}],["定义在实例方法中的局部类可以访问外部类的所有变量和方法",{"2":{"84":1}}],["定义在方法中的内部类",{"2":{"84":1}}],["定义在类内部",{"2":{"83":1}}],["定义在类内部的静态类",{"2":{"82":1}}],["定义抽象类就是让其他类继承的",{"2":{"66":1}}],["定义",{"2":{"45":1,"50":1,"56":1,"284":1,"286":1,"287":1}}],["禁止指令重排序",{"2":{"215":1}}],["描述",{"2":{"214":1,"475":2,"495":2,"507":2}}],["较复杂",{"2":{"214":1}}],["较大优化",{"2":{"199":1}}],["普通异常如果选择捕获",{"2":{"309":1}}],["普通同步方法",{"2":{"208":1}}],["普通类可以直接实例化",{"2":{"65":1}}],["普通类不能包含抽象方法",{"2":{"65":1}}],["普通类和抽象类有哪些区别",{"0":{"65":1}}],["概述",{"0":{"562":1,"570":1,"594":1,"646":1,"677":1,"698":1,"701":1}}],["概念是",{"2":{"208":1}}],["概括来说就是",{"2":{"145":1}}],["早期的实现比较低效",{"2":{"208":1}}],["早期版本中",{"2":{"199":1}}],["却无法办到",{"2":{"207":1}}],["轮询",{"2":{"204":1,"465":1}}],["修改docker",{"2":{"629":1}}],["修改redis的配置文件",{"0":{"589":1}}],["修改配置",{"2":{"560":1}}],["修改orderservice类的queryorderbyid方法",{"2":{"417":1}}],["修改",{"2":{"347":1,"560":2,"647":1}}],["修改了相应的方法签名",{"2":{"330":1}}],["修改了变量",{"0":{"204":1}}],["修改某个类的域",{"2":{"313":1}}],["修饰符的有过什么实践",{"0":{"214":1}}],["修饰符要求执行方法时要获得对象的锁",{"2":{"205":1}}],["修饰时",{"2":{"210":1}}],["修饰修改变量的方法",{"2":{"204":1}}],["修饰变量",{"2":{"204":1}}],["修饰变量表示该变量是一个常量不能被重新赋值",{"2":{"307":1}}],["修饰变量表",{"2":{"54":1}}],["修饰代码块",{"2":{"200":1}}],["修饰静态方法",{"2":{"200":1}}],["修饰实例方法",{"2":{"200":1}}],["修饰",{"0":{"356":1},"2":{"180":1,"212":1,"354":1,"385":1}}],["修饰吗",{"0":{"66":1}}],["修饰类",{"2":{"56":1}}],["修饰类表示该类不能被继承",{"2":{"54":1,"307":1}}],["修饰成员方法",{"2":{"56":1}}],["修饰成员变量",{"2":{"56":1}}],["修饰方法表示该方法不能被重写",{"2":{"54":1,"307":1}}],["设定时区",{"2":{"558":1}}],["设计者综合考虑了速度",{"2":{"371":1}}],["设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好",{"2":{"62":1}}],["设置锁的有效时间",{"2":{"713":1}}],["设置redis服务器信息",{"2":{"696":1}}],["设置连接工厂",{"2":{"609":1}}],["设置密码",{"2":{"589":2,"595":1}}],["设置已经存在的key的过期时间",{"2":{"585":1}}],["设置小key",{"2":{"581":1}}],["设置多值",{"2":{"581":1}}],["设置多个键值对",{"2":{"580":1}}],["设置key",{"2":{"580":1}}],["设置值",{"2":{"580":1,"581":1}}],["设置用户信息",{"2":{"528":1}}],["设置实例为永久实例",{"2":{"495":1}}],["设置为新的",{"2":{"427":1}}],["设置为其线程",{"2":{"203":1}}],["设置请求来源",{"2":{"423":1}}],["设置",{"2":{"417":1}}],["设置同步状态的值",{"2":{"230":1}}],["设置超时时间",{"2":{"225":1}}],["既然是基于责任链模式",{"2":{"426":1}}],["既然是线程放弃对象锁",{"2":{"166":1}}],["既然",{"2":{"202":1,"208":1}}],["计算key对应的value的长度",{"2":{"580":1}}],["计算请求的异常比例",{"2":{"442":1}}],["计算本次请求",{"2":{"439":1}}],["计算两次请求之间允许的最小时间间隔",{"2":{"439":1}}],["计算目前为止滑动窗口内已经存在的请求量",{"2":{"438":1}}],["计算当前时间所在窗口的开始时间",{"2":{"437":1}}],["计算当前时间对应的数组角标",{"2":{"437":1}}],["计算出的哈希值可能不在数组大小范围内",{"2":{"383":1}}],["计算出新的数组长度后赋给当前成员变量table",{"2":{"372":1}}],["计算index",{"2":{"371":1}}],["计算下标index",{"2":{"371":1}}],["计算null对象的长度",{"2":{"313":1}}],["计算机通常只有一个",{"2":{"160":1}}],["计数器+1即可",{"2":{"437":1}}],["计数器如何知道当前所在的窗口是哪个呢",{"2":{"437":1}}],["计数器",{"0":{"684":1},"2":{"429":1,"437":1}}],["计数器减一",{"2":{"201":1}}],["计数器加一",{"2":{"201":1}}],["避免了线程切换的开销",{"2":{"717":1}}],["避免脚本重置",{"2":{"660":1}}],["避免并发修改的安全问题",{"2":{"484":1}}],["避免线程安全问题",{"2":{"437":1}}],["避免出现重复的代码",{"2":{"330":1}}],["避免直接抛出new",{"2":{"330":1}}],["避免空指针",{"2":{"330":1}}],["避免抛出一个不明确的异常",{"2":{"318":1}}],["避免堵塞",{"2":{"255":1}}],["避免资源在多线程间共享",{"2":{"245":1}}],["避免死锁",{"2":{"201":1}}],["避免开辟多块空间存储相同的字符串",{"2":{"116":1}}],["反序列化为对象",{"2":{"514":1}}],["反例",{"2":{"330":3}}],["反之即为可变对象",{"2":{"217":1}}],["反汇编",{"2":{"201":1}}],["反汇编指令",{"2":{"201":1}}],["反射是框架设计的灵魂",{"2":{"111":1}}],["反射机制的应用场景有哪些",{"0":{"111":1}}],["反射机制优缺点",{"0":{"110":1}}],["反射相当于一系列解释操作",{"2":{"110":1}}],["反射",{"0":{"108":1},"1":{"109":1,"110":1,"111":1,"112":1}}],["底层具体实现知道吗",{"0":{"389":1}}],["底层数据结构",{"2":{"385":1,"388":1}}],["底层数组中的元素的next引用也相应发生变化",{"2":{"372":1}}],["底层的实现都是使用数组方式存储数据",{"2":{"354":1}}],["底层以数组实现",{"2":{"350":1}}],["底层采用",{"2":{"339":1,"388":1}}],["底层调用的是",{"2":{"208":1}}],["底层原理维护一个计数器",{"2":{"201":1}}],["底层实现原理",{"0":{"201":1}}],["底层就是一个",{"2":{"117":1}}],["初始容量大小和每次扩充容量大小的不同",{"2":{"385":1}}],["初始化布隆过滤器",{"2":{"696":1}}],["初始化入口节点",{"2":{"423":1}}],["初始化默认值",{"2":{"383":1}}],["初始化后hihead代表下标更改的链表头元素",{"2":{"372":1}}],["初始化后",{"2":{"372":1}}],["初始化后lohead",{"2":{"372":1}}],["初始化head指向链表当前元素e",{"2":{"372":2}}],["初始化",{"2":{"200":1,"214":1}}],["初始值",{"2":{"69":1}}],["给定了一个5",{"2":{"680":1}}],["给资源设置监听器",{"2":{"441":1}}],["给出默认容量和threshold",{"2":{"372":1}}],["给我解释一下双重检验锁方式实现单例模式的原理呗",{"2":{"200":1}}],["给垃圾回收器带来压力",{"2":{"188":1}}],["表分为",{"2":{"241":1}}],["表锁等",{"2":{"221":1}}],["表明该锁未被任何线程所持有",{"2":{"201":1}}],["表明这是该类的一个静态资源",{"2":{"200":1}}],["表示创建",{"2":{"673":1}}],["表示集群",{"2":{"673":1}}],["表示集合的抽象数据类型",{"2":{"333":1}}],["表示5秒内mymaster还没活过来",{"2":{"660":1}}],["表示故障转移后",{"2":{"660":1}}],["表示redis监控一个叫做mymaster的运行在192",{"2":{"660":1}}],["表示dockerfile文件所在的路径",{"2":{"558":1}}],["表示为红黑树",{"2":{"371":1}}],["表示不支持",{"2":{"349":1}}],["表示不管是否出现异常",{"2":{"54":1,"307":1}}],["表示运行应用程序中出现了严重的错误",{"2":{"284":1}}],["表示某段代码最多只有",{"2":{"276":1}}],["表示异步计算的结果",{"2":{"258":1}}],["表示能够对共享资源能够重复加锁",{"2":{"232":1}}],["表示未锁定状态",{"2":{"230":1}}],["表示变量在",{"2":{"215":1}}],["表示只有一个线程可以获取作用对象的锁",{"2":{"215":1}}],["表示一个异步运算的任务",{"2":{"157":1}}],["表示",{"2":{"118":1,"286":1,"304":1}}],["表示方法接收的是调用者提供的变量地址",{"2":{"99":1}}],["表示方法接收的是调用者提供的值",{"2":{"99":1}}],["偏向锁",{"2":{"199":1,"227":1}}],["锁",{"2":{"389":1}}],["锁段",{"2":{"238":1}}],["锁降级",{"2":{"234":1}}],["锁可以升级但不能降级",{"2":{"227":1}}],["锁共有4种状态",{"2":{"227":1}}],["锁操作",{"2":{"220":1}}],["锁是括号里面的对象",{"2":{"208":1}}],["锁是当前类的class对象",{"2":{"208":1}}],["锁是当前实例对象",{"2":{"208":1}}],["锁的过期时间",{"2":{"714":1}}],["锁的有效是30s",{"2":{"712":1}}],["锁的方式是稍微细粒度的",{"2":{"388":1}}],["锁的计数器都自增1",{"2":{"208":1}}],["锁的升级的目的",{"2":{"203":1}}],["锁的升级",{"2":{"203":1}}],["锁升级是为了减低了锁带来的性能消耗",{"2":{"203":1}}],["锁升级原理",{"2":{"203":1}}],["锁升级的原理是什么",{"0":{"203":1}}],["锁也可以得到释放",{"2":{"201":1}}],["锁粗化",{"2":{"199":1}}],["锁消除",{"2":{"199":1}}],["锁效率也优化得很不错了",{"2":{"199":1}}],["庆幸的是在",{"2":{"199":1}}],["控制",{"2":{"199":1}}],["控制单元",{"2":{"143":1}}],["决定回收某对象时",{"2":{"193":1}}],["析构函数",{"0":{"193":1}}],["自减指定数量",{"2":{"580":1}}],["自减1",{"2":{"580":1}}],["自增指定数量",{"2":{"580":1}}],["自增1",{"2":{"580":1}}],["自带的",{"2":{"351":1}}],["自平衡的排序二叉树",{"2":{"339":2}}],["自定义镜像",{"2":{"560":1}}],["自定义资源",{"0":{"417":1}}],["自定义异常",{"0":{"299":1}}],["自定义同步器要么是独占方法",{"2":{"230":1}}],["自定义同步器时需要重写下面几个aqs提供的模板方法",{"2":{"230":1}}],["自定义同步器在实现时只需要实现共享资源",{"2":{"230":1}}],["自旋的概率会比较大",{"2":{"223":1}}],["自己可以再次获取自己的内部锁",{"2":{"208":1}}],["自己调用的",{"2":{"185":2}}],["自动重写",{"2":{"644":1}}],["自动装配",{"2":{"421":1}}],["自动装箱与拆箱",{"0":{"131":1}}],["自动解箱抛npe",{"2":{"330":1}}],["自动拆箱有可能产生npe",{"2":{"330":1}}],["自动释放的资源需要是实现了",{"2":{"301":1}}],["自动从内存中清除",{"2":{"15":1}}],["能否使用任何类作为",{"0":{"380":1}}],["能使用父类型的地方一定能使用子类型",{"2":{"311":1}}],["能使得一个非原子操作变成原子操作吗",{"0":{"213":1}}],["能更好的管理线程",{"2":{"255":1}}],["能够达到8w",{"2":{"652":1}}],["能够被监控到",{"2":{"585":1}}],["能够提高运算效率",{"2":{"384":1}}],["能够有效的减少hash碰撞的几率",{"2":{"381":1}}],["能够创建的最大线程大小",{"2":{"254":1}}],["能够正确地处理多个线程之间的共享变量",{"2":{"182":1}}],["能做到最终一致性",{"2":{"243":1}}],["能",{"2":{"211":1}}],["能根据",{"2":{"95":1}}],["默认策略",{"2":{"680":1}}],["默认30秒",{"2":{"504":1}}],["默认5秒一次心跳",{"2":{"498":1}}],["默认5秒",{"2":{"480":1}}],["默认15秒",{"2":{"480":1,"504":1}}],["默认为false",{"2":{"507":1}}],["默认为",{"2":{"437":5,"480":1,"510":1}}],["默认为8",{"2":{"339":1,"369":1,"385":1}}],["默认的方式",{"2":{"435":1,"438":1,"439":1}}],["默认的初始化大小为16",{"2":{"385":1}}],["默认的初始大小为11",{"2":{"385":1}}],["默认分配16个segment",{"2":{"388":1}}],["默认异常处理器打印出异常信息并终止应用程序",{"2":{"305":1}}],["默认处理器为",{"2":{"305":1}}],["默认将hash",{"2":{"241":1}}],["默认值为",{"2":{"238":1}}],["默认情况下在创建仓库后会自动创建一个master分支",{"2":{"543":1}}],["默认情况下",{"0":{"608":1},"2":{"230":1,"416":1,"486":1,"575":1,"653":1}}],["默认",{"2":{"220":1,"234":1}}],["默认是内存",{"2":{"570":1}}],["默认是tcpsupersenseprocessor",{"2":{"505":1}}],["默认是500ms",{"2":{"437":1}}],["默认是sentinel",{"2":{"422":1}}],["默认是",{"2":{"181":1}}],["默认配置是",{"2":{"33":1}}],["没错",{"2":{"444":1}}],["没关系",{"2":{"181":1}}],["没有释放锁",{"2":{"709":1}}],["没有使用管道操作",{"2":{"602":1}}],["没有nil",{"2":{"580":1}}],["没有的话用默认cluster",{"2":{"491":1}}],["没有权限",{"2":{"475":1,"495":1,"507":1}}],["没有异常",{"2":{"442":1}}],["没有对元素个数产生影响",{"2":{"389":1}}],["没有考虑同步",{"2":{"388":1}}],["没有这样的机制",{"2":{"385":1}}],["没有找到可以处理该异常的代码块",{"2":{"305":1}}],["没有找到指定的类异常",{"2":{"287":1}}],["没有用try",{"2":{"286":1}}],["没有通过throws声明抛出它",{"2":{"286":1}}],["没有具体追究",{"2":{"260":1}}],["没有",{"2":{"259":1}}],["没有及时清理threadlocal",{"2":{"249":1}}],["没有被外部强引用的情况下",{"2":{"248":1}}],["没有必要加锁",{"2":{"234":1}}],["没有实例化过才进入加锁代码",{"2":{"200":1}}],["没有返回值",{"2":{"73":1}}],["没有参数的构造方法",{"2":{"70":1}}],["没有默认初始值",{"2":{"69":1}}],["没有面向对象易维护",{"2":{"59":1}}],["没有任何引用链相连时",{"2":{"22":1}}],["确保线程安全",{"2":{"484":1}}],["确保数据不会冲突",{"2":{"445":1}}],["确保一个线程的修改能对其他线程是可见的",{"2":{"210":1}}],["确保一次只能有一个线程执行该部分的代码",{"2":{"180":1}}],["确定元素存放在哪个桶中",{"2":{"371":1}}],["确定唤醒哪个线程",{"2":{"163":1}}],["事务的使用",{"0":{"621":1}}],["事务中的操作都不会执行",{"2":{"620":2}}],["事务中所有的操作",{"2":{"619":1}}],["事务操作",{"2":{"620":1}}],["事务一旦提交",{"2":{"619":1}}],["事务之间相互隔离",{"2":{"619":1}}],["事务开始前到事务结束后",{"2":{"619":1}}],["事务是一个完整执行单元",{"2":{"619":1}}],["事件",{"2":{"179":1,"490":1}}],["事实上",{"2":{"145":1,"333":1}}],["例如repo1",{"2":{"530":1}}],["例如userservice",{"2":{"474":1}}],["例如项目中定义的controller方法就是默认被sentinel保护的资源",{"2":{"413":1}}],["例如像下面这样",{"2":{"355":1}}],["例如删除",{"2":{"349":1}}],["例如查找",{"2":{"333":1}}],["例如在",{"2":{"239":1}}],["例如用",{"2":{"212":1}}],["例如",{"2":{"200":1,"286":1,"318":1,"326":1,"341":1,"415":1,"417":1,"422":1,"484":1,"563":1}}],["例如一个单一的全局变量",{"2":{"179":1}}],["例如模块化的开发",{"2":{"111":1}}],["顾名思义",{"2":{"179":1,"221":1}}],["顾名思义是根据对象的存活周期将内存划分为几块",{"2":{"29":1}}],["消费完成后",{"2":{"451":1}}],["消费者更容易及时发现服务列表的变化",{"2":{"519":1}}],["消费者订阅nacos中的服务列表",{"2":{"519":1}}],["消费者定期主动从nacos拉取服务列表并缓存起来",{"2":{"519":1}}],["消费者代码同简单模式一样",{"2":{"453":1,"455":1,"457":1}}],["消费者之间就变成了一种竞争关系",{"2":{"451":1}}],["消费者出钱买货",{"2":{"444":1}}],["消费者",{"2":{"444":1,"447":1,"449":1,"453":1,"455":1,"457":1}}],["消费者模式",{"2":{"251":1,"363":1}}],["消费者模型",{"0":{"251":1},"2":{"177":1}}],["消费者是从队列里拿元素的线程",{"2":{"251":1}}],["消费者也必须等待",{"2":{"177":1}}],["消息id",{"2":{"689":5}}],["消息设置routingkey时",{"2":{"457":1}}],["消息",{"2":{"453":1}}],["消息队列默认采用轮询的方式将消息平均发送给消费者",{"2":{"451":1}}],["消息者从队列中获取消息并消费",{"2":{"449":1}}],["消耗过多的",{"2":{"188":1}}],["消除",{"2":{"5":1}}],["共享方式",{"2":{"230":2}}],["共享",{"2":{"230":1}}],["共享变量",{"2":{"230":1}}],["共享变量的方式实现线程间的通讯和协作",{"2":{"177":1}}],["共享变量要求变量本身是线程安全的",{"2":{"176":1}}],["共同完成的",{"2":{"144":1}}],["第几个位置",{"2":{"598":1}}],["第几条开始显示",{"2":{"584":1}}],["第一种要求传入的待排序容器中存放的对象比较实现",{"2":{"395":1}}],["第一次来",{"2":{"485":1}}],["第一次为12",{"2":{"372":1}}],["第一次调用",{"2":{"172":1}}],["第一个",{"2":{"321":1}}],["第二种不强制性的要求容器中的元素必须可比较",{"2":{"395":1}}],["第二种代表我们只能使用两个参数版的collections",{"2":{"393":1}}],["第二个处理所有非",{"2":{"321":1}}],["第二次和后面的就返回",{"2":{"172":1}}],["第二版",{"2":{"95":1}}],["调试时很有用",{"2":{"299":1}}],["调度",{"2":{"257":1}}],["调度相关",{"2":{"170":1}}],["调优和监控",{"2":{"255":1}}],["调用了service的processclientbeat方法",{"2":{"502":1}}],["调用consistencyservice",{"2":{"484":1}}],["调用countdownlatch的countdown方法后",{"2":{"274":1}}],["调用来源",{"2":{"420":1}}],["调用自身接口更为便捷只要配置和注解就可以",{"2":{"400":1}}],["调用hashmap的put方法",{"2":{"360":1}}],["调用方如果没有捕获到就会产生运行时错误",{"2":{"330":1}}],["调用null对象的实例方法",{"2":{"313":1}}],["调用该方法的方法中必须包含可处理异常的代码",{"2":{"306":1}}],["调用该方法的线程的状态为将被置为",{"2":{"172":1}}],["调用该方法时",{"2":{"300":1}}],["调用这个对象的方法可以捕获到这个异常并可以对其进行处理",{"2":{"290":1}}],["调用执行自己的线程运行任务",{"2":{"265":1}}],["调用的是",{"2":{"486":1}}],["调用的",{"2":{"185":1}}],["调用后",{"2":{"175":1}}],["调用任意对象的",{"2":{"174":2}}],["调用此方法要处理",{"2":{"163":1}}],["调用以进入到运行状态",{"2":{"159":1}}],["调用",{"2":{"155":2,"200":1,"300":1}}],["调用start",{"2":{"154":1}}],["调用线程对象的start",{"2":{"152":2}}],["调用子类实例的star",{"2":{"152":1}}],["调用静态方法可以无需创建对象",{"2":{"76":1}}],["调用init",{"2":{"40":1}}],["跟",{"2":{"695":1}}],["跟数据库相关的",{"2":{"585":1}}],["跟key相关的",{"2":{"585":1}}],["跟入flowrulechecker",{"2":{"435":1}}],["跟随lotail同步",{"2":{"372":1}}],["跟操作系统",{"2":{"170":1}}],["跟杂货铺似的",{"2":{"62":1}}],["那为什么还那么快",{"0":{"717":1}}],["那为什么是两次扰动呢",{"2":{"384":1}}],["那这个锁就丢失了",{"2":{"714":1}}],["那怎么解决呢",{"2":{"383":1}}],["那就是非复合场景下操作它是线程安全的",{"2":{"243":1}}],["那第一时间想到的就是它",{"2":{"237":1}}],["那也可以把wait",{"2":{"166":1}}],["那么说明布隆过滤器中这个key",{"2":{"695":1}}],["那么uuid是一个随机字符串",{"2":{"687":1}}],["那么在并发性不高的情况下",{"2":{"703":1}}],["那么在插入订单到数据库时",{"2":{"687":1}}],["那么在redis服务启动时",{"2":{"638":1}}],["那么如果一个过期就执行删除操作",{"2":{"678":1}}],["那么过期时间到了",{"2":{"678":1}}],["那么自动重定向到该槽位对应的节点",{"2":{"668":1}}],["那么自动装箱时不会new新的integer对象",{"2":{"133":1}}],["那么会对该key插入到对应的槽位",{"2":{"668":1}}],["那么会有一个新的线程来替代它",{"2":{"254":1}}],["那么整个集群就挂了",{"2":{"668":1}}],["那么进行投票",{"2":{"658":1}}],["那么两从节点就会去跟主节点进行通信",{"2":{"658":1}}],["那么重连上主节点后就会向主节点发起同步数据的请求",{"2":{"653":1}}],["那么单节点的实例就会存在单点故障问题",{"2":{"649":1}}],["那么选择混合持久化",{"2":{"648":1}}],["那么选择aof",{"2":{"648":1}}],["那么选择rdb",{"2":{"648":1}}],["那么是否直接截断后面的内容",{"2":{"635":1,"641":1}}],["那么新写入数据是如何保存到dump",{"2":{"631":1}}],["那么默认选择是jdk序列化器",{"2":{"606":1}}],["那么至少应该能看到",{"2":{"541":1}}],["那么为什么nacos有临时和永久两种实例呢",{"2":{"506":1}}],["那么redis的事务就会自动结束",{"2":{"620":2}}],["那么resize的初始化工作到此结束",{"2":{"372":1}}],["那么rollingcounterinsecond",{"2":{"438":1}}],["那么最近的一个滑动窗口内的2个小窗口就永远不会被覆盖",{"2":{"437":1}}],["那么问题来了",{"2":{"416":1}}],["那么遍历时间复杂度就为o",{"2":{"378":1}}],["那么相当于参与运算的只有hashcode的低位",{"2":{"377":1}}],["那么输入值肯定也不同",{"2":{"374":1}}],["那么处理链表中元素重排",{"2":{"372":1}}],["那么处理树中元素的重排",{"2":{"372":1}}],["那么处理器会自动将该位置值更新为新值",{"2":{"221":1}}],["那么可以将异常包装为自定义异常",{"2":{"324":1}}],["那么可能抛出outofmemoryerror",{"2":{"188":1}}],["那么当强制将o构造为类b的实例时抛出该异常",{"2":{"313":1}}],["那么你可以抛出异常",{"2":{"292":1}}],["那么请等待",{"2":{"276":1}}],["那么线程池会补充一个新线程",{"2":{"254":1}}],["那么线程便会处于该对象的等待池中",{"2":{"175":1}}],["那么它会同步等待另一个线程也执行exchange方法",{"2":{"277":1}}],["那么它到底是如何实现线程安全的",{"2":{"237":1}}],["那么它就提供了比synchronized",{"2":{"208":1}}],["那么锁的获取顺序就应该符合请求上的绝对时间顺序",{"2":{"232":1}}],["那么只有锁在被释放同样的n次之后",{"2":{"232":1}}],["那么就会由hash环其他节点进行投票决定",{"2":{"668":1}}],["那么就会使用指定的序列化器",{"2":{"608":1}}],["那么就会比较耗费性能",{"2":{"350":1}}],["那么就会回收部分空闲",{"2":{"254":1}}],["那么就使用受检异常",{"2":{"304":1}}],["那么就需要通过try",{"2":{"293":1}}],["那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制",{"2":{"230":1}}],["那么就将内存里面的值更新成",{"2":{"222":1}}],["那么就随机选择一个线程",{"2":{"160":1}}],["那么其读写都是原子操作",{"2":{"213":1}}],["那么对其操作可以不是原子的",{"2":{"213":1}}],["那么试图进入",{"2":{"205":1}}],["那么有线程将会被闲置",{"2":{"188":1}}],["那么",{"2":{"185":1,"212":1,"222":1,"232":1,"385":1,"420":1,"437":1,"438":1}}],["那么我举个例子",{"2":{"185":1}}],["那么则会使用拒绝策略rejectedexecutionhandler",{"2":{"181":1}}],["那么生产者就会一直无限等待下去",{"2":{"177":1}}],["那么消费者就无法消费队列中的商品",{"2":{"177":1}}],["那么也得保证复合操作的线程安全性",{"2":{"176":1}}],["那么接下来哪个线程会从就绪状态变成执行状态呢",{"2":{"168":1}}],["那么这个context又是在何时完成初始化的呢",{"2":{"421":1}}],["那么这个时候程序就会抛出",{"2":{"341":1}}],["那么这个部分就放入了监视器的监视区域",{"2":{"180":1}}],["那么这个成员变量就应该定义为静态变量",{"2":{"56":1}}],["那么这里到底是值传递还是引用传递",{"0":{"98":1}}],["那么垃圾收集器就是内存回收的具体实现",{"2":{"30":1}}],["那么java堆对象内部的布局中就必须考虑如何放置访问类型数据的相关信息",{"2":{"13":1}}],["那么浅复制出来的对象也会相应的改变",{"2":{"4":1}}],["任务被封装到了taskprocessor中去执行了",{"2":{"505":1}}],["任务放入阻塞队列",{"2":{"489":1}}],["任务队列为",{"2":{"266":1}}],["任务就会被存放在队列中",{"2":{"264":1}}],["任务可以不需要的等到线程创建就能立即执行",{"2":{"255":1}}],["任务分为n个子线程去执行",{"2":{"230":1}}],["任务或者执行者没有被阻塞",{"2":{"226":1}}],["任务首先会被添加到arrayblockingqueue",{"2":{"181":1}}],["任务从保存到再加载的过程就是一次上下文切换",{"2":{"145":1}}],["任何一个资源必定要执行sphu",{"2":{"425":1}}],["任何集合框架都包含三大块内容",{"2":{"333":1}}],["任何java代码都可以通过throw语句抛出异常",{"2":{"292":1}}],["任何线程局部变量一旦在工作完成后没有释放",{"2":{"245":1,"246":1}}],["任何时刻最多只允许一个线程去使用",{"2":{"179":1}}],["任何对象都可以作为锁",{"2":{"166":1}}],["块处理所有",{"2":{"321":1}}],["块添加到列表的末尾",{"2":{"321":1}}],["块",{"2":{"321":1}}],["块会被执行",{"2":{"321":1}}],["块中清理资源或者使用",{"0":{"315":1},"1":{"316":1,"317":1}}],["块中抛出的",{"2":{"311":1}}],["块能够抓住",{"2":{"311":1}}],["块或方法中被调用",{"2":{"174":1}}],["块还是循环",{"0":{"165":1}}],["块的内容来确保执行关闭或清理资源的逻辑",{"2":{"146":1}}],["超过最大容量就扩容",{"2":{"371":1}}],["超过范围",{"2":{"133":1}}],["超时可以退出防止死锁",{"2":{"225":1}}],["超时后线程会自动苏醒",{"2":{"164":1}}],["唤醒出队等",{"2":{"230":1}}],["唤醒所有处于等待状态的线程",{"2":{"163":1}}],["唤醒一个处于等待状态的线程",{"2":{"163":1}}],["状态变更的事件通知",{"2":{"441":1}}],["状态时",{"2":{"256":1}}],["状态信息通过protected类型的getstate",{"2":{"230":1}}],["状态",{"2":{"163":1,"170":2,"172":1,"442":1}}],["状态的线程分配",{"2":{"162":1}}],["状态超时",{"2":{"159":1}}],["另一个socket才能连接成功",{"2":{"717":1}}],["另一个线程不能使用",{"2":{"388":1}}],["另一个线程能够立刻看到",{"2":{"139":1}}],["另一个加载器又尝试去加载它",{"2":{"308":1}}],["另一种抛出该异常的可能原因是某个类已经由一个类加载器加载至内存中",{"2":{"308":1}}],["另外一个是模拟指针",{"2":{"366":1}}],["另外一个线程有可能会读到之前的值",{"2":{"270":1}}],["另外一个更高优先级线程出现",{"2":{"161":1}}],["另外",{"2":{"180":1,"199":1,"200":1,"220":1,"241":1,"265":1,"271":1,"339":1,"357":1,"385":1,"429":1,"506":1}}],["处于活锁的实体是在不断的改变状态",{"2":{"226":1}}],["处于等待状态的线程可能会收到错误警报和伪唤醒",{"2":{"165":1}}],["处于运行状态的线程会一直运行",{"2":{"160":1}}],["处于运行状态中的线程由于某种原因",{"2":{"159":1}}],["处理服务变更通知",{"0":{"513":1},"1":{"514":1,"515":1}}],["处理查询结果",{"2":{"511":1}}],["处理心跳请求的核心就是更新心跳实例的最后一次心跳时间",{"2":{"503":1}}],["处理心跳请求",{"0":{"503":1}}],["处理客户端的心跳请求",{"2":{"501":1}}],["处理任务",{"2":{"490":1,"505":1}}],["处理后的哈希值直接作为table的下标",{"0":{"383":1}}],["处理",{"2":{"291":1,"309":1,"371":1}}],["处理等待队列中的任务",{"2":{"256":1}}],["处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作",{"2":{"270":1}}],["处理器和编译器常常会对指令进行重排序",{"2":{"195":1}}],["处理器可能会对指令进行重排序",{"2":{"139":1}}],["处理满了的任务",{"2":{"181":1}}],["处理其他的业务逻辑",{"2":{"165":1}}],["处理完毕时",{"2":{"159":1}}],["处理模型来应对更高的并发量",{"2":{"106":1}}],["处理并发安全问题",{"0":{"10":1}}],["功能更强大一些",{"2":{"156":1}}],["功能可以自动监测对象是否超过作用域从而达到自动",{"2":{"18":1}}],["很可能会出现多次查询数据库的情况",{"2":{"703":1}}],["很适合做数据存储或",{"2":{"470":1}}],["很简单",{"2":{"155":1}}],["很多时候",{"2":{"323":1}}],["很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行",{"2":{"56":1}}],["很多",{"2":{"202":1}}],["很多程序设计语言",{"2":{"99":1}}],["真正实现了多线程运行",{"2":{"154":1}}],["注册连接",{"2":{"505":1}}],["注册表中获取service服务",{"2":{"502":1}}],["注册表",{"2":{"491":1}}],["注册表更新",{"2":{"484":1}}],["注册实例",{"2":{"483":1}}],["注册一个实例到nacos服务",{"2":{"475":1}}],["注解配置交换机exchange",{"2":{"448":1}}],["注入容器即可",{"2":{"401":1}}],["注",{"2":{"153":1,"159":1,"325":1}}],["注意查看网卡名称docker",{"2":{"655":1}}],["注意clusternode是共享的成员变量",{"2":{"428":1}}],["注意这里的",{"2":{"427":1}}],["注意这是第一次用就要初始化",{"2":{"56":1}}],["注意npe产生的场景",{"2":{"330":1}}],["注意n要与线程个数一致",{"2":{"230":1}}],["注意不是等待池哦",{"2":{"205":1}}],["注意事项",{"2":{"146":1}}],["注意",{"2":{"50":2,"51":1,"56":1,"172":1,"193":1,"214":1,"291":1,"310":1,"465":1,"484":1,"528":1,"533":1,"535":1,"537":1,"542":1,"543":1,"544":1,"548":1,"550":1,"668":1}}],["\\t列出所有本地分支和远程分支",{"2":{"546":1}}],["\\t列出所有远程分支",{"2":{"546":1}}],["\\tpublic",{"2":{"311":1}}],["\\tsystem",{"2":{"311":2}}],["\\tthrows",{"2":{"311":1}}],["\\tthrow",{"2":{"311":1}}],["\\ttry",{"2":{"271":1}}],["\\treturn",{"2":{"310":1,"360":1}}],["\\t\\t列出所有本地分支",{"2":{"546":1}}],["\\t\\tif",{"2":{"478":2}}],["\\t\\t\\tregister",{"2":{"478":1}}],["\\t\\t\\treturn",{"2":{"311":1,"478":1}}],["\\t\\t\\tthis",{"2":{"478":3}}],["\\t\\t\\ttry",{"2":{"311":1}}],["\\t\\t\\tif",{"2":{"478":2}}],["\\t\\t\\tsystem",{"2":{"311":2}}],["\\t\\t\\t\\t",{"2":{"490":1}}],["\\t\\t\\t\\tregistermanagement",{"2":{"478":1}}],["\\t\\t\\t\\t\\tnew",{"2":{"478":2}}],["\\t\\t\\t\\tlogger",{"2":{"478":1}}],["\\t\\t\\t\\tsystem",{"2":{"311":1}}],["\\t\\t\\t\\tthrow",{"2":{"311":2}}],["\\t\\t\\t",{"2":{"311":2,"478":2,"491":4,"505":1,"514":3,"517":1}}],["\\t\\ttry",{"2":{"311":1}}],["\\t\\t",{"2":{"271":1,"311":3,"418":1,"478":3,"484":2,"485":1,"490":1,"502":1,"505":5,"511":1,"514":1,"515":2}}],["\\t\\tvalueoffset",{"2":{"271":1}}],["\\t",{"2":{"152":1,"271":1,"311":1,"418":2,"425":2,"427":2,"428":2,"430":4,"431":1,"432":1,"435":4,"437":1,"438":2,"439":2,"440":1,"442":3,"448":4,"478":1,"479":2,"480":2,"483":3,"484":2,"485":6,"489":2,"490":1,"491":4,"502":4,"505":3,"512":2,"515":1,"517":1,"684":1}}],["步骤⑥",{"2":{"371":1}}],["步骤⑤",{"2":{"371":1}}],["步骤④",{"2":{"371":1}}],["步骤③",{"2":{"371":1}}],["步骤②",{"2":{"371":1}}],["步骤①",{"2":{"371":1}}],["步骤",{"2":{"152":3}}],["靠按序申请资源来预防",{"2":{"150":1}}],["破坏循环等待条件",{"2":{"150":2}}],["破坏不剥夺条件",{"2":{"150":1}}],["破坏请求与保持条件",{"2":{"150":1}}],["破坏互斥条件",{"2":{"150":1}}],["临界值为8",{"2":{"371":1}}],["临界区",{"2":{"179":1}}],["临界资源需要互斥访问",{"2":{"150":1}}],["临时实例",{"2":{"506":1}}],["临时实例基于心跳方式做健康检测",{"2":{"495":1}}],["临时",{"2":{"31":1,"495":1}}],["必定会存在以下问题",{"2":{"649":1}}],["必定会形成一个环路",{"2":{"149":1}}],["必要时抽取共性方法",{"2":{"330":1}}],["必然会导致代码的重复",{"2":{"330":1}}],["必然会得到错误的处理结果",{"2":{"179":1}}],["必须手动释放锁",{"2":{"708":1}}],["必须手动获取与释放锁",{"2":{"208":1}}],["必须指定大key和小key",{"2":{"581":1}}],["必须大于心跳周期",{"2":{"480":1}}],["必须保持一致",{"2":{"405":1}}],["必须保证元素唯一性",{"2":{"338":1,"357":1}}],["必须保证增加操作是原子的",{"2":{"270":1}}],["必须首先获得对应的",{"2":{"389":2}}],["必须返回false的这几个特性",{"2":{"382":1}}],["必须考虑到远程调用失败",{"2":{"330":1}}],["必须添加注释充分说明什么情况下会返回null值",{"2":{"330":1}}],["必须是完全匹配",{"2":{"330":1}}],["必须处理异常",{"2":{"330":1}}],["必须从主存中读取",{"2":{"215":1}}],["必须在同步方法或者同步块中被调用",{"0":{"167":1}}],["必须在start",{"2":{"146":1}}],["必须在由程序运行期间才能决定",{"2":{"60":1,"61":1}}],["必须依存在应用程序中",{"2":{"144":1}}],["必须解决竞用共享资源的问题",{"2":{"141":1}}],["必须声明为",{"2":{"85":1}}],["必须遵守这样一个原则",{"2":{"64":1}}],["必须先执行相应的类加载",{"2":{"8":1}}],["已暂存状态",{"2":{"533":1}}],["已修改状态",{"2":{"533":1}}],["已跟踪",{"2":{"533":1}}],["已经能编写一个微服务demo",{"2":{"467":1}}],["已经达到了高位低位同时参与运算的目的",{"2":{"384":1}}],["已启动nacos服务",{"2":{"465":1}}],["已使用请求量",{"2":{"438":1}}],["已获得的资源在末使用完之前不能被其他线程强行剥夺",{"2":{"149":1}}],["已用和未用的内存都各自一边",{"2":{"28":1}}],["释放自减的方式实现重入",{"2":{"232":1}}],["释放锁之前",{"2":{"230":1}}],["释放锁时",{"2":{"201":1}}],["释放锁就是执行monitorexit指令",{"2":{"201":1}}],["释放锁",{"2":{"164":1,"183":1}}],["释放了对",{"2":{"150":1}}],["释放资源则反序释放",{"2":{"150":1}}],["释放",{"2":{"149":1}}],["释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误",{"2":{"4":1}}],["直达数据库",{"2":{"691":1}}],["直连模式",{"2":{"435":1}}],["直至它不得不放弃",{"2":{"160":1}}],["直到拿锁成功后去执行2",{"2":{"712":1}}],["直到主线程执行结束",{"2":{"712":1}}],["直到save执行保存数据完成后",{"2":{"631":1}}],["直到最后一个线程到达屏障时",{"2":{"278":1}}],["直到cyclicbarrier指定的线程全部都到达了指定点的时候",{"2":{"274":1}}],["直到等待的时间超过了",{"2":{"264":1}}],["直到线程达到线程池的最大大小",{"2":{"254":1}}],["直到a线程unlock",{"2":{"230":1}}],["直到占用资源者释放该资源",{"2":{"179":1}}],["直到获取成功才能往下执行",{"2":{"174":1}}],["直到得到结果之后才会返回",{"2":{"173":1}}],["直到其进入到就绪状态",{"2":{"159":1}}],["直到被该线程",{"2":{"149":1}}],["直接双击完成安装即可",{"2":{"526":1}}],["直接发布实例变更的事件",{"2":{"515":1}}],["直接去nacos拉取服务信息",{"2":{"510":1}}],["直接覆盖旧实例列表",{"2":{"491":1}}],["直接覆盖value",{"2":{"371":1}}],["直接创建交换机并绑定队列",{"2":{"448":1}}],["直接模式",{"2":{"434":2}}],["直接放行",{"2":{"432":1,"441":1}}],["直接抛nullpointerexception",{"2":{"385":1}}],["直接抛出异常",{"0":{"296":1},"2":{"430":1}}],["直接将该值赋给新的容量",{"2":{"372":1}}],["直接新建节点添加",{"2":{"371":1}}],["直接找到hash值对应的下标",{"2":{"366":1}}],["直接停止",{"2":{"289":1}}],["直接丢弃掉",{"2":{"265":1}}],["直接待用run",{"2":{"154":1}}],["直接返回",{"2":{"57":1,"437":1,"690":1}}],["直接指针",{"0":{"13":1},"2":{"11":1}}],["占用部分资源的线程进一步申请其他资源时",{"2":{"150":1}}],["占用",{"2":{"149":1}}],["占内存大小",{"2":{"115":1}}],["形成新的映射",{"2":{"372":1}}],["形成返回路径之后",{"2":{"310":1}}],["形成死锁的四个必要条件是什么",{"0":{"149":1}}],["形式上",{"2":{"115":1}}],["休眠要等待的时间",{"2":{"439":1}}],["休眠结束了都开始企图请求获取对方的资源",{"2":{"148":1}}],["休眠",{"2":{"148":1}}],[">redis",{"2":{"704":1,"708":1,"713":1}}],[">db",{"2":{"704":1,"708":1,"713":1}}],[">非法请求",{"2":{"696":1}}],[">从缓存中查询",{"2":{"692":1,"694":1,"696":1}}],[">=",{"2":{"371":1,"372":2,"389":1,"441":1,"517":1}}],[">>>",{"2":{"371":1,"377":1}}],[">",{"2":{"148":2,"150":1,"266":1,"342":1,"346":1,"360":1,"371":1,"372":2,"403":2,"409":1,"417":1,"418":1,"423":1,"428":1,"430":1,"431":5,"437":1,"438":2,"439":3,"442":1,"448":1,"465":1,"478":1,"485":3,"489":1,"491":7,"499":1,"504":2,"505":4,"511":1,"515":4,"517":1,"558":1,"598":1,"602":2,"611":1,"613":1,"689":5,"692":1,"696":2}}],["资源浪费问题就完美解决了",{"2":{"451":1}}],["资源中的",{"2":{"442":1}}],["资源业务是否异常",{"2":{"441":1}}],["资源业务执行完毕时",{"2":{"441":1}}],["资源名称等基本信息",{"2":{"425":1}}],["资源名为resource1",{"2":{"417":1}}],["资源名可使用任意有业务语义的字符串",{"2":{"416":1}}],["资源访问阻止",{"2":{"416":1}}],["资源会在",{"2":{"317":1}}],["资源如果可运行的线程数量多于可用处理器的数量",{"2":{"188":1}}],["资源",{"2":{"148":2,"223":1}}],["资源开销",{"2":{"144":1}}],["称为死锁进程",{"2":{"148":1}}],["称为本地线程分配缓冲",{"2":{"10":1}}],["百度百科",{"2":{"148":1}}],["编写demo工程",{"0":{"467":1}}],["编写具体调用接口",{"0":{"405":1}}],["编写测试程序",{"2":{"266":1}}],["编程思想",{"2":{"311":1}}],["编辑",{"2":{"147":1}}],["编译proto",{"0":{"472":1}}],["编译是通不过的",{"2":{"309":1}}],["编译也会正常通过",{"2":{"288":1}}],["编译时异常",{"0":{"287":1}}],["编译优化带来的有序性问题",{"2":{"139":1}}],["编译错误",{"2":{"84":1}}],["编译器要求必须用catch捕获以便进一步处理",{"2":{"309":1}}],["编译器要求必须处理的异常",{"2":{"288":1}}],["编译器看任何代码都不顺眼",{"2":{"309":1}}],["编译器不会对这类错误进行检测",{"2":{"303":1}}],["编译器不会进行检查并且不要求必须处理的异常",{"2":{"288":1}}],["编译器不会检查运行时异常",{"2":{"286":1,"304":1}}],["编译器不会检查它",{"2":{"286":1}}],["编译器会检查受检异常",{"2":{"304":1}}],["编译器会检查此类异常",{"2":{"288":1}}],["编译器会检查它",{"2":{"287":1}}],["编译器也不会通过",{"2":{"55":1}}],["编译器",{"2":{"38":1}}],["编译程序只需要面向虚拟机",{"2":{"38":1}}],["编译工具",{"2":{"36":1}}],["退出容器",{"2":{"630":1}}],["退出该方法时需要monitorexit",{"2":{"201":1}}],["退出代码0",{"2":{"154":1}}],["退出",{"2":{"146":1}}],["佣人",{"2":{"146":1}}],["守护一个hashentry",{"2":{"389":1}}],["守护着一个hashentry数组里的元素",{"2":{"389":1}}],["守护线程会随",{"2":{"146":2}}],["守护线程和用户线程",{"2":{"146":1}}],["守护线程和用户线程有什么区别呢",{"0":{"146":1}}],["守护",{"2":{"146":2}}],["采取的策略是为每个线程分配时间片并轮转的形式",{"2":{"145":1}}],["采用临时实例比较合适",{"2":{"506":1}}],["采用服务端主动健康检测方式",{"2":{"506":1}}],["采用客户端心跳检测模式",{"2":{"506":1}}],["采用线程池异步来完成实例更新",{"2":{"494":1}}],["采用的数据结构跟hashmap1",{"2":{"388":1}}],["采用二进制位操作",{"2":{"384":1}}],["采用字节码的好处",{"2":{"38":1}}],["采用字节码的最大好处是什么",{"0":{"38":1}}],["采用",{"2":{"10":1,"200":2}}],["顺序执行序列和程序出口",{"2":{"144":1}}],["顺序不同",{"2":{"92":1}}],["根本就没有线程的特征",{"2":{"154":1}}],["根本区别",{"2":{"144":1}}],["根据这两个参数会计算出底层的bit数组大小",{"2":{"696":1}}],["根据这个字符串获得某个类的class实例",{"2":{"111":1}}],["根据元素名删除元素",{"2":{"584":1}}],["根据结果来选择",{"2":{"511":1}}],["根据响应来判断实例健康状态",{"2":{"505":1}}],["根据实例是否是临时实例",{"2":{"486":1}}],["根据namespaceid",{"2":{"485":1}}],["根据重载的方法来实现绑定routingkey",{"2":{"455":1}}],["根据路由键将消息转发到对应队列",{"0":{"454":1},"1":{"455":1}}],["根据需求来决定自己使用哪种运行模式",{"2":{"448":1}}],["根据同一散列函数计算出相同的散列值的现象",{"2":{"375":1}}],["根据同一散列函数计算出的散列值如果相同",{"2":{"374":1}}],["根据同一散列函数计算出的散列值如果不同",{"2":{"374":1}}],["根据hash值对其进行分发",{"2":{"372":1}}],["根据键值key计算hash值得到插入的数组索引i",{"2":{"371":1}}],["根据里氏代换原则",{"2":{"311":1}}],["根据上面第一步拿到的pid号",{"2":{"147":1}}],["根据对象存活周期的不同将内存划分为几块",{"2":{"25":1}}],["根据给定的全限定名类名",{"2":{"2":1}}],["故又称为轻型进程",{"2":{"144":1}}],["串行",{"2":{"140":2}}],["交集",{"2":{"583":1}}],["交给",{"2":{"514":1}}],["交给了healthcheckreactor处理",{"2":{"503":1}}],["交给了distrotaskengineholder",{"2":{"492":1}}],["交给线程池去执行",{"2":{"492":1}}],["交换机为topic类型",{"2":{"457":1}}],["交换机为direct类型",{"2":{"455":1}}],["交换机为fanout类型",{"2":{"453":1}}],["交换机根据routingkey转发到指定队列",{"2":{"455":1}}],["交换机",{"2":{"453":1}}],["交换机将消息转发到绑定此交换机的每个队列中",{"2":{"453":1}}],["交换机配置",{"2":{"448":1}}],["交换机exchange",{"2":{"448":1}}],["交换器",{"2":{"447":1}}],["交换数据是通过exchange方法来实现的",{"2":{"277":1}}],["交换之后",{"2":{"99":1}}],["交换之前",{"2":{"99":1}}],["交替",{"2":{"140":1}}],["核心参数有",{"2":{"480":1}}],["核心流程",{"0":{"435":1}}],["核心api如下",{"2":{"435":1}}],["核心api",{"2":{"430":1,"431":1,"432":1,"440":1}}],["核心代码",{"2":{"427":1,"428":1,"429":1}}],["核心就是使用了数组的存储方式",{"2":{"366":1}}],["核心线程外的线程不会立即销毁",{"2":{"264":1}}],["核心线程数为",{"2":{"266":1}}],["核心线程数",{"2":{"264":1}}],["核心在任意时刻只能被一个线程使用",{"2":{"145":1}}],["核心的个数",{"2":{"145":1}}],["核心类库主要是java",{"2":{"36":1}}],["核上",{"2":{"140":1}}],["出现了ajax请求跨域问题是",{"2":{"407":1}}],["出现了集合体系",{"2":{"335":1}}],["出现跨域会违反浏览器的同源策略",{"2":{"407":1}}],["出现冲突",{"2":{"366":1}}],["出现问题",{"2":{"284":1}}],["出现线程安全问题的原因",{"2":{"139":1}}],["出栈",{"2":{"6":1}}],["死循环",{"2":{"490":1}}],["死亡的线程不可再次复生",{"2":{"159":1}}],["死亡",{"2":{"159":1}}],["死锁则不能",{"2":{"226":1}}],["死锁与饥饿的区别",{"0":{"226":1}}],["死锁与活锁的区别",{"0":{"226":1}}],["死锁是指两个或两个以上的进程",{"2":{"148":1}}],["死锁",{"2":{"138":1,"226":1,"709":2}}],["死掉",{"2":{"22":1}}],["充分利用多核cpu的计算能力",{"2":{"137":1}}],["原始登录方式",{"2":{"568":1}}],["原始类型",{"2":{"132":1}}],["原因",{"2":{"309":1,"341":1}}],["原来的值",{"2":{"271":1}}],["原来只能一个线程进入",{"2":{"241":1}}],["原来string的内容是不变的",{"2":{"120":1}}],["原理",{"0":{"668":1,"712":1},"2":{"245":1,"668":1}}],["原理图",{"2":{"230":1}}],["原理概览",{"2":{"230":1}}],["原理分析",{"0":{"230":1}}],["原子属性更新器",{"2":{"270":1}}],["原子数组",{"2":{"270":1}}],["原子类",{"2":{"270":1}}],["原子地",{"2":{"230":1}}],["原子操作是在多线程环境下避免数据不一致必须的手段",{"2":{"270":1}}],["原子操作是指一个不受其他操作影响的操作任务单元",{"2":{"270":1}}],["原子操作类",{"0":{"269":1},"1":{"270":1,"271":1}}],["原子操作",{"2":{"179":2,"270":1}}],["原子",{"2":{"139":1}}],["原子性指的是一个或多个操作要么全部执行成功要么全部执行失败",{"2":{"139":1}}],["原子性",{"2":{"139":1,"619":1}}],["拆箱机制",{"2":{"132":1}}],["拆箱",{"2":{"131":1}}],["装箱",{"2":{"131":1}}],["六",{"0":{"130":1,"252":1,"593":1},"1":{"131":1,"132":1,"133":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1}}],["左压栈",{"2":{"582":2}}],["左边增加数据",{"2":{"582":1}}],["左边的表达式的值是",{"2":{"51":1}}],["左右的性能提升",{"2":{"128":1,"129":1}}],["做限流统计",{"2":{"434":2}}],["做限流",{"2":{"429":1}}],["做一个形象的比喻",{"2":{"140":1}}],["做",{"0":{"127":1}}],["截取字符串",{"2":{"126":1}}],["去操作共享资源",{"2":{"714":1}}],["去查询当前线程是否还持有锁",{"2":{"712":1}}],["去创建",{"2":{"262":1}}],["去释放锁就会造成死锁",{"2":{"207":1}}],["去百度转换一下就行",{"2":{"147":1}}],["去除字符串两端空白",{"2":{"126":1}}],["去执行",{"2":{"2":1}}],["获得redisson对象",{"2":{"696":1}}],["获得锁",{"2":{"183":1}}],["获得",{"2":{"148":1}}],["获得字符串的长度是通过",{"2":{"125":1}}],["获取布隆过滤器",{"2":{"696":1}}],["获取点赞用户数",{"2":{"689":1}}],["获取点赞的用户列表",{"2":{"689":1}}],["获取购物车所有商品",{"2":{"688":1}}],["获取苹果的步骤",{"2":{"686":1}}],["获取阅读数量",{"2":{"684":1}}],["获取个数",{"2":{"598":1}}],["获取指定的key的value的数据类型",{"2":{"585":1}}],["获取指定索引为3的元素",{"2":{"582":1}}],["获取指定索引的元素",{"2":{"582":1}}],["获取tuhaobang集合中分数在50",{"2":{"584":2}}],["获取tuhaobang集合中第一个元素名称及分数",{"2":{"584":1}}],["获取tuhaobang集合中所有元素名称及分数",{"2":{"584":1}}],["获取集合前两位元素的名称和分数",{"2":{"584":1}}],["获取集合所有的元素",{"2":{"584":1}}],["获取集合中指定元素名称对应的索引",{"2":{"584":1}}],["获取集合中指定区间的元素名称",{"2":{"584":1}}],["获取集合中元素的数量",{"2":{"584":1}}],["获取集合元素",{"2":{"583":1}}],["获取集合长度",{"2":{"583":1}}],["获取集群中的所有实例信息",{"2":{"503":1}}],["获取集群信息",{"2":{"503":1}}],["获取最左边的元素",{"2":{"582":1}}],["获取列表元素的个数",{"2":{"582":1}}],["获取的数据是从左到右的",{"2":{"582":1}}],["获取单个小key对应的value",{"2":{"581":1}}],["获取多个小key对应的value们",{"2":{"581":1}}],["获取多对key对应的value",{"2":{"580":1}}],["获取多少次就要释放多么次",{"2":{"230":1}}],["获取值",{"2":{"580":1}}],["获取git仓库通常有两种方式",{"2":{"529":1}}],["获取git仓库",{"0":{"529":1},"1":{"530":1,"531":1}}],["获取客户端的",{"2":{"517":1}}],["获取检测任务已经等待的时长",{"2":{"505":1}}],["获取所有大key中的键值对",{"2":{"581":1}}],["获取所有的小key对应的values",{"2":{"581":1}}],["获取所有的小key",{"2":{"581":1}}],["获取所有",{"2":{"505":1}}],["获取实例信息",{"2":{"505":1}}],["获取实例",{"2":{"502":1}}],["获取心跳周期",{"2":{"499":1}}],["获取旧实例列表",{"2":{"491":1}}],["获取要更新的实例列表",{"2":{"484":1}}],["获取服务列表信息",{"2":{"517":1}}],["获取服务列表",{"2":{"517":1}}],["获取服务的所有cluster名称",{"2":{"491":1}}],["获取服务",{"2":{"484":1}}],["获取nacos的命名服务",{"2":{"479":1}}],["获取计数器",{"2":{"442":1}}],["获取资源",{"2":{"442":1}}],["获取资源名称",{"2":{"422":1}}],["获取每一个小窗口",{"2":{"438":1}}],["获取锁失败",{"2":{"437":1}}],["获取并发锁",{"2":{"437":1}}],["获取当前cluster实例的集合",{"2":{"491":1}}],["获取当前资源上的所有的断路器",{"2":{"440":1}}],["获取当前资源的所有限流规则",{"2":{"435":1}}],["获取当前时间",{"2":{"439":1}}],["获取当前时间所在的时间窗",{"2":{"437":1}}],["获取当前窗口",{"2":{"438":1}}],["获取流量控制器trafficshapingcontroller",{"2":{"435":1}}],["获取限流资源名称",{"2":{"435":1}}],["获取授权规则",{"2":{"430":1}}],["获取processorslotchain以后会保存到一个map中",{"2":{"425":1}}],["获取注解上的资源名称",{"2":{"418":1}}],["获取",{"2":{"418":1,"422":1,"425":2,"438":1,"478":1,"479":1}}],["获取受保护的方法",{"2":{"418":1}}],["获取时",{"2":{"366":1}}],["获取前面或后面元素的索引位置",{"2":{"348":1}}],["获取元素的线程会等待队列变为非空",{"2":{"251":1}}],["获取读锁再释放写锁的次序",{"2":{"234":1}}],["获取cpu的使用权",{"2":{"159":1}}],["获取到就可以执行了",{"2":{"150":1}}],["获取s对象上的value属性的值",{"2":{"120":1}}],["获取string类中的value字段",{"2":{"120":1}}],["获取反射机制三种方式",{"2":{"112":1}}],["示例代码如下",{"2":{"183":1,"342":1}}],["示例代码",{"2":{"124":1}}],["示该变量是一个常量不能被重新赋值",{"2":{"54":1}}],["改成",{"2":{"589":1}}],["改变完成后",{"2":{"451":1}}],["改变value所引用的数组中的第5个字符",{"2":{"120":1}}],["改变value属性的访问权限",{"2":{"120":1}}],["改程序能正确执行吗",{"0":{"72":1}}],["wget",{"2":{"572":1}}],["www",{"2":{"570":1}}],["w",{"2":{"457":2}}],["warn",{"2":{"479":2,"485":1,"491":1,"502":1,"504":1,"505":1,"515":1}}],["warmupcontroller",{"2":{"435":1,"438":1,"439":1}}],["warmupperiodsec",{"2":{"435":1}}],["warm",{"2":{"434":2,"435":2}}],["was",{"2":{"372":1}}],["waited",{"2":{"505":4}}],["waittime",{"2":{"439":7}}],["waitting",{"2":{"159":1}}],["waitinms",{"2":{"438":7}}],["waiting",{"2":{"148":4,"150":3,"438":1,"511":1}}],["wait",{"0":{"164":1,"165":1,"166":1,"167":1},"2":{"159":1,"163":1,"164":4,"165":3,"166":3,"167":1,"174":6,"175":1,"204":1,"226":1,"251":1,"505":1,"511":1,"605":1,"617":1}}],["window并存入",{"2":{"437":1}}],["window",{"2":{"437":6,"438":2}}],["windowlengthinms",{"2":{"437":3}}],["windowwrap",{"2":{"437":7,"438":9}}],["windows版本",{"0":{"576":1}}],["windowstar",{"2":{"437":2}}],["windowstart",{"2":{"437":10,"438":1}}],["windows上面用任务管理器看",{"2":{"147":1}}],["windows",{"0":{"147":1},"2":{"186":1}}],["will",{"2":{"323":1,"418":1,"438":1,"485":1,"491":1,"505":1}}],["withscores",{"2":{"584":8}}],["with",{"0":{"301":1,"315":1,"317":1},"1":{"316":1,"317":1},"2":{"315":1,"330":1,"410":1,"418":1,"480":1,"485":1,"489":1,"491":1,"514":1}}],["white",{"2":{"430":1}}],["while",{"2":{"165":1,"204":1,"208":1,"266":1,"296":1,"300":1,"346":1,"347":1,"372":1,"437":1,"490":3,"504":1,"505":3,"514":2}}],["whether",{"2":{"484":1}}],["whenterminate",{"2":{"441":1}}],["when",{"2":{"389":1,"439":1}}],["where",{"2":{"281":1}}],["why这3个问题",{"2":{"281":1}}],["we",{"2":{"505":1}}],["webutils",{"2":{"483":2,"502":6,"517":11}}],["webserverinitializedevent",{"2":{"478":1}}],["web服务初始化完成",{"2":{"478":1}}],["web",{"2":{"245":1,"246":1,"419":1,"422":2,"478":1}}],["weight",{"2":{"144":2,"475":1,"480":1}}],["work",{"0":{"450":1},"1":{"451":1}}],["worker",{"2":{"266":2}}],["workerthread类实现了runnable",{"2":{"266":1}}],["workqueue",{"2":{"264":1,"266":1}}],["workcount",{"2":{"256":1}}],["word",{"2":{"208":1}}],["world",{"2":{"120":10,"311":2}}],["wrong",{"2":{"418":1}}],["wrap",{"2":{"437":2}}],["wrapexception",{"2":{"324":1,"325":1}}],["wrapper",{"2":{"132":1}}],["writes",{"2":{"627":1,"629":1}}],["writevalueasstring",{"2":{"600":1}}],["writeint",{"2":{"356":1}}],["writeobject",{"2":{"356":3}}],["write",{"2":{"107":1,"221":1,"356":3,"483":1,"502":1,"515":2}}],["writer",{"2":{"105":1}}],["回滚事务",{"2":{"620":2}}],["回顾2",{"2":{"437":1}}],["回到一切的入口",{"2":{"425":1}}],["回答不可变就可以了",{"2":{"120":1}}],["回收",{"2":{"248":1}}],["回收垃圾",{"2":{"54":1}}],["回收器进行垃圾清除",{"2":{"31":1}}],["回收老年代的收集器包括serial",{"2":{"30":1}}],["回收后",{"2":{"28":1}}],["回收被标记的对象所占用的空间",{"2":{"26":1}}],["回收内存的目的",{"2":{"18":1}}],["回收会导致程序或系统的不稳定甚至崩溃",{"2":{"18":1}}],["源列表",{"2":{"582":1}}],["源码如下",{"2":{"480":1}}],["源码如下图所以",{"2":{"119":1}}],["源文件的后缀为",{"2":{"2":1}}],["好处是不用考虑线程安全问题",{"2":{"182":1}}],["好",{"2":{"117":2}}],["种基本数据类型中不包括",{"2":{"117":1}}],["种不同的访问权限",{"2":{"50":1}}],["剩下的都是引用类型",{"2":{"117":1}}],["专门用来存储字符串常量",{"2":{"116":1}}],["至于加上finally",{"2":{"309":1}}],["至于具体线程等待队列的维护",{"2":{"230":1}}],["至于这个功能是如何实现的",{"2":{"59":1}}],["至少需要保证3个9或者4个9",{"2":{"649":1}}],["至少有一个不同",{"2":{"407":1}}],["至少包含一个线程",{"2":{"144":1}}],["至少一个字符结束标志",{"2":{"115":1}}],["常见的负载均衡算法有",{"2":{"465":1}}],["常见的",{"0":{"312":1}}],["常见异常处理方式",{"0":{"295":1},"1":{"296":1,"297":1,"298":1,"299":1,"300":1,"301":1}}],["常用命令",{"0":{"564":1}}],["常用",{"2":{"529":1}}],["常用的实现类有",{"2":{"338":1,"357":1}}],["常用的集合类有哪些",{"0":{"337":1}}],["常用的并发工具类有哪些",{"0":{"278":1}}],["常用于多线程环境下的单次操作",{"2":{"210":1}}],["常用api",{"0":{"113":1},"1":{"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1}}],["常量池优化",{"2":{"118":1}}],["常量",{"2":{"3":1}}],["五种数据类型的使用",{"0":{"598":1}}],["五种数据类型",{"0":{"579":1},"2":{"570":1,"579":1}}],["五",{"0":{"113":1,"235":1,"561":1,"587":1},"1":{"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"562":1,"563":1,"564":1,"588":1,"589":1,"590":1,"591":1,"592":1}}],["得到一个整数值",{"2":{"695":1}}],["得到一个0",{"2":{"668":2}}],["得到元素名称的新分数",{"2":{"584":1}}],["得到newhosts",{"2":{"515":1}}],["得到服务中现有的实例列表",{"2":{"485":1}}],["得到当前资源",{"2":{"441":1}}],["得到的就是qps",{"2":{"438":1}}],["得到的就是",{"2":{"430":1}}],["得到请求来源",{"2":{"430":1}}],["得到",{"2":{"153":1}}],["得到cpu执行权",{"2":{"148":1}}],["得到对应实体类的字节码字符串以及相关的属性信息",{"2":{"111":1}}],["得到通知",{"2":{"106":1}}],["配置网卡",{"2":{"660":1}}],["配置序死化器",{"2":{"609":1}}],["配置文件",{"0":{"563":1,"605":1}}],["配置文件加载入内存中",{"2":{"111":1}}],["配置",{"2":{"465":1}}],["配置类",{"2":{"448":1}}],["配置有两种方法",{"2":{"409":1}}],["配置模式装载",{"2":{"111":1}}],["举例",{"2":{"111":1}}],["举个例子",{"2":{"94":1,"265":1}}],["动态创建或修改类时",{"2":{"330":1}}],["动态配置实例的属性",{"2":{"111":1}}],["动态代理设计模式也采用了反射机制",{"2":{"111":1}}],["动态加载类到内存的时候",{"2":{"308":1}}],["动态加载类",{"2":{"110":1}}],["动态编译",{"2":{"109":1}}],["动态链接",{"2":{"3":1}}],["查数据库",{"2":{"708":1}}],["查询缓存",{"2":{"690":1,"696":1}}],["查询缓存中的",{"2":{"515":1}}],["查询列表中的数据",{"2":{"582":1}}],["查询服务列表",{"2":{"511":1}}],["查询服务下的实例列表",{"2":{"507":1}}],["查询用户",{"2":{"417":1}}],["查询订单",{"2":{"417":1}}],["查看哨兵启动情况",{"2":{"662":1}}],["查看哨兵启动情况与哨兵监控主从架构的信息",{"0":{"662":1}}],["查看redis性能的命令",{"0":{"586":1}}],["查看当前数据库下有多少key",{"2":{"585":1}}],["查看当前中断信号是true还是false",{"2":{"172":1}}],["查看当前中断信号是true还是false并且清除中断信号",{"2":{"172":1}}],["查看指定key的剩余存活时间",{"2":{"585":1}}],["查看key剩余有效时间",{"2":{"585":1}}],["查看分支命令",{"2":{"546":1}}],["查看分支",{"0":{"546":1},"2":{"545":1}}],["查看远程仓库信息",{"2":{"540":2}}],["查看远程仓库",{"2":{"540":1}}],["查看日志",{"2":{"534":1}}],["查看文件状态",{"2":{"534":1}}],["查看文件个数",{"2":{"107":1}}],["查看配置信息",{"2":{"528":1}}],["查看service的service",{"2":{"503":1}}],["查看簇点链路",{"2":{"417":1}}],["查看相应的字节码文件",{"2":{"201":1}}],["查找匹配规则的key",{"2":{"585":1}}],["查找元素效率高",{"2":{"357":1}}],["查找线程号对应的信息",{"2":{"147":1}}],["查找出cpu利用率最厉害的线程号",{"2":{"147":1}}],["查找出cpu利用最厉害的pid号",{"2":{"147":1}}],["查阅网上相关资料",{"2":{"106":1}}],["之间的转换",{"0":{"351":1,"392":1}}],["之间的互操作",{"2":{"336":1}}],["之后每次扩充",{"2":{"385":2}}],["之后进入",{"2":{"300":1}}],["之后根据不同的异常情况来进行相应的处理",{"2":{"293":1}}],["之后的拒绝策略",{"2":{"264":1}}],["之后优化",{"2":{"203":1}}],["之后",{"0":{"205":1},"2":{"199":1,"251":1}}],["之前说过",{"2":{"438":1}}],["之前的",{"2":{"388":1}}],["之前我们可以使用同步技术来做到这一点",{"2":{"270":1}}],["之前实现同步存取时",{"2":{"251":1}}],["之前程序员们只有同步集合来用且在多线程并发的时候会导致争用",{"2":{"240":1}}],["之前当前线程就已经成功获取某对象的锁",{"2":{"174":1}}],["之前也尝试使用过",{"2":{"106":1}}],["之类的",{"2":{"117":1}}],["之所以称为短路运算",{"2":{"51":1}}],["低16bit和高16bit做了一个异或",{"2":{"371":1}}],["低并发的应用程序",{"2":{"106":1}}],["低停顿的特点",{"2":{"30":1}}],["传统锁就失效了",{"2":{"707":1}}],["传统锁是否好用",{"2":{"706":1}}],["传统锁是没办法保证线程安全的",{"2":{"686":1}}],["传统锁是基于jvm的",{"2":{"686":1}}],["传统锁",{"2":{"686":1}}],["传统的关系型数据库里边就用到了很多这种锁机制",{"2":{"221":1}}],["传统的",{"2":{"106":1}}],["传递性",{"2":{"382":1}}],["传递异常可以在方法签名处使用",{"2":{"291":1,"296":1}}],["传递的是值的引用",{"2":{"100":1}}],["传递的是值的拷贝",{"2":{"100":1}}],["传递的参数是按引用进行传递",{"2":{"100":1}}],["传递的参数是按值的拷贝传递",{"2":{"100":1}}],["异常实例的剔除等逻辑省略",{"2":{"517":1}}],["异常请求数量",{"2":{"442":1}}],["异常数等",{"2":{"414":1}}],["异常设计的初衷是解决程序运行中的各种意外情况",{"2":{"330":1}}],["异常不要用来做流程控制",{"2":{"330":1}}],["异常不仅仅是一个错误控制机制",{"2":{"329":1}}],["异常消息应该提供恰到好处的信息",{"2":{"328":1}}],["异常会影响性能",{"0":{"328":1}}],["异常会由",{"2":{"286":1}}],["异常的illegalargumentexception",{"2":{"321":1}}],["异常的处理机制分为声明异常",{"2":{"290":1}}],["异常描述以及异常发生时应用程序的状态",{"2":{"305":1}}],["异常处之后的代码不会再执行",{"2":{"300":1}}],["异常处理的性能成本非常高",{"2":{"328":1}}],["异常处理类等",{"2":{"36":1}}],["异常处理",{"0":{"330":1},"2":{"3":1,"37":1,"259":1}}],["异常类型可能有多种",{"2":{"297":1}}],["异常类型回答了",{"2":{"281":1}}],["异常就被抛出",{"2":{"289":1}}],["异常都属于受检异常",{"2":{"288":1}}],["异常信息回答了",{"2":{"281":1}}],["异常堆栈跟踪回答了",{"2":{"281":1}}],["异常能清晰的回答what",{"2":{"281":1}}],["异常",{"0":{"285":1},"1":{"286":1,"287":1},"2":{"146":1,"163":1,"188":1,"283":1,"321":2,"330":1,"341":1,"342":1,"346":1,"347":1,"364":1,"442":1}}],["异步删除",{"2":{"716":1}}],["异步的将service信息写入注册表中",{"2":{"487":1}}],["异步调用",{"2":{"444":1}}],["异步",{"2":{"106":2}}],["同源策略",{"2":{"407":1}}],["同域示例",{"2":{"407":1}}],["同样提供了服务发现的功能",{"2":{"510":1}}],["同样采用了滑动窗口来计数",{"2":{"442":1}}],["同样地",{"2":{"177":1}}],["同样的",{"2":{"167":1}}],["同一把锁",{"2":{"388":1}}],["同一个仓库可以有多个分支",{"2":{"545":1}}],["同一个资源",{"2":{"425":1}}],["同一个",{"2":{"298":1}}],["同一个线程每次获取锁",{"2":{"208":1}}],["同一进程的线程共享本进程的地址空间和资源",{"2":{"144":1}}],["同一类线程共享代码和数据空间",{"2":{"144":1}}],["同步数据的slave的数量",{"2":{"660":1}}],["同步锁",{"2":{"484":1}}],["同步锁失败",{"2":{"159":1}}],["同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合",{"2":{"240":1}}],["同步器的设计是基于模板方法模式的",{"2":{"230":1}}],["同步语句块的情况",{"2":{"201":1}}],["同步代码块",{"2":{"179":1}}],["同步代码方法",{"2":{"179":1}}],["同步的范围越小越好",{"2":{"178":1}}],["同步块更要符合开放调用的原则",{"2":{"178":1}}],["同步块是更好的选择",{"2":{"178":1}}],["同步方法块",{"2":{"208":1}}],["同步方法则不能进入",{"2":{"205":1}}],["同步方法会锁住整个对象",{"2":{"178":1}}],["同步方法和同步块",{"0":{"178":1}}],["同步阻塞",{"2":{"159":1}}],["同步阻塞i",{"2":{"106":1}}],["同步阻塞式",{"2":{"106":1}}],["同步非阻塞",{"2":{"106":1}}],["同时主节点也会维护这个偏移量",{"2":{"653":1}}],["同时会把aof以100",{"2":{"644":1}}],["同时写入到dump",{"2":{"631":1}}],["同时也实现了服务心跳",{"2":{"496":1}}],["同时也会与其他已经加入的对象的",{"2":{"95":1}}],["同时",{"2":{"400":1,"490":1}}],["同时还要结合equles",{"2":{"360":1}}],["同时通过对链表进行相应的操作",{"2":{"339":1}}],["同时在工作中使用它",{"2":{"329":1}}],["同时避免过多资源竞争",{"2":{"255":1}}],["同时允许一定数量的写操作线程并发地修改",{"2":{"239":1}}],["同时加入了更多的辅助变量来提高并发度",{"2":{"238":1}}],["同时更新同一个变量时",{"2":{"221":1}}],["同时进行",{"2":{"140":1}}],["同时又保留了解释型语言可移植的特点",{"2":{"38":1}}],["后增加的数据会把之前增加的数据向左挤",{"2":{"582":1}}],["后增加的数据会把之前增加的数据向右挤",{"2":{"582":1}}],["后续再推送则无需重复输入用户名和密码",{"2":{"543":1}}],["后续在和远程仓库交互时会使用到这个简称",{"2":{"541":1}}],["后续的slot都可以通过context拿到defaultnode或者clusternode",{"2":{"420":1}}],["后续详细介绍这四种线程池",{"2":{"152":1}}],["后者用来充当锁的角色",{"2":{"389":1}}],["后者是为了管理线程的生命周期",{"2":{"260":1}}],["后者是字符输出流",{"2":{"105":1}}],["后者是字符输入流",{"2":{"105":1}}],["后遍历",{"2":{"348":1}}],["后",{"2":{"238":1,"437":1,"442":1}}],["后面每次都应该从缓存中获取数据",{"2":{"703":1}}],["后面写入的数据",{"2":{"647":1}}],["后面会讲解git安装和集成过程",{"2":{"522":1}}],["后面会介绍到为什么是2的幂次方",{"2":{"385":1}}],["后面更新注册表时使用",{"2":{"484":1}}],["后面的日志也没有附加更有用的信息",{"2":{"324":1}}],["后面的是离开monitorexit",{"2":{"201":1}}],["后面根据需要是可以再次赋值的",{"2":{"56":1}}],["后发现",{"2":{"200":1}}],["前几年",{"2":{"698":1}}],["前台运行",{"2":{"572":1}}],["前面执行的命令操作都是针对的本地仓库",{"2":{"540":1}}],["前面看到的",{"2":{"532":1}}],["前置依赖",{"2":{"448":1}}],["前提需要保持请求路径",{"2":{"405":1}}],["前提是该方法可能产生结果",{"2":{"78":1}}],["前言",{"0":{"399":1,"412":1,"464":1,"521":1},"1":{"522":1,"523":1}}],["前者用来封装映射表的键值对",{"2":{"389":1}}],["前者是为了方便线程的管理",{"2":{"260":1}}],["前者是字节输出流",{"2":{"105":1}}],["前者是字节输入流",{"2":{"105":1}}],["前执行",{"2":{"310":1}}],["流量会比平常高出很多",{"2":{"506":1}}],["流对象进行关闭",{"2":{"330":1}}],["流分为几种",{"0":{"105":1}}],["流程化的",{"2":{"59":1}}],["流程控制语句",{"0":{"57":1}}],["最少频次使用",{"2":{"680":1}}],["最小分数",{"2":{"598":1}}],["最大分数",{"2":{"598":1}}],["最大线程数",{"2":{"266":1}}],["最新版本",{"2":{"563":1}}],["最外层通过namespace来实现环境隔离",{"2":{"494":1}}],["最外层的业务使用者",{"2":{"330":1}}],["最近最少使用",{"2":{"680":1}}],["最近最少访问",{"2":{"465":1}}],["最近一次请求的可执行时间",{"2":{"439":1}}],["最简单的消息模式",{"2":{"449":1}}],["最多生产maxcount个令牌",{"2":{"432":1}}],["最基本的结构就是两种",{"2":{"366":1}}],["最佳实践",{"2":{"349":1}}],["最好不要捕获",{"2":{"322":1}}],["最好手动调用remove",{"2":{"248":1}}],["最经典的就是xml的配置模式",{"2":{"111":1}}],["最终封装结果并返回",{"2":{"517":1}}],["最终都会执行hostreactor中的updateservice",{"2":{"511":1}}],["最终都会进入statisticnode中",{"2":{"437":1}}],["最终还是调用updateservice方法",{"2":{"511":1}}],["最终心跳的发送还是通过namingproxy的sendbeat方法来实现",{"2":{"500":1}}],["最终",{"2":{"480":1,"502":1}}],["最终的限流判断都在trafficshapingcontroller的canpass方法中",{"2":{"435":1}}],["最终减少hash冲突",{"2":{"384":1}}],["最终才进入抛出异常的方法",{"2":{"305":1}}],["最终一致性",{"2":{"243":1}}],["最终决定",{"2":{"103":1}}],["最终会破坏一堆现有的代码",{"2":{"103":1}}],["最后一次心跳时间",{"2":{"504":2}}],["最后一关",{"2":{"440":1}}],["最后",{"2":{"468":1,"484":1}}],["最后判断",{"2":{"54":1}}],["最后将当前使用的区域的可回收的对象进行回收",{"2":{"27":1}}],["最后执行",{"2":{"8":1}}],["yes",{"2":{"589":2,"627":3,"629":3,"635":2,"641":2,"647":1,"660":2,"671":1,"680":1}}],["yellow",{"2":{"455":1}}],["yamlspring",{"2":{"417":1,"465":1,"495":1}}],["yml同目录下创建一个conf目录",{"2":{"671":1}}],["yml同目录下手redis",{"2":{"629":1}}],["yml文件",{"0":{"615":1}}],["yml文件链接配置",{"2":{"448":1}}],["ymlversion",{"2":{"573":1,"615":1,"655":1,"660":1,"670":1}}],["ymldb",{"2":{"560":1}}],["ymlspring",{"2":{"409":2,"448":1,"451":1,"605":1,"617":1,"675":1}}],["yml",{"0":{"670":1},"2":{"409":2,"560":2,"563":2,"573":1,"615":1,"617":1,"655":1,"660":1,"675":1}}],["yourdomain",{"2":{"410":1}}],["yourself",{"2":{"330":1}}],["young",{"2":{"243":1}}],["yield",{"0":{"168":1,"169":1,"170":1},"2":{"161":1,"169":1,"170":4,"437":2}}],["y",{"2":{"99":6,"342":1}}],["小",{"2":{"695":1}}],["小强",{"2":{"611":1}}],["小明",{"2":{"598":1}}],["小分数",{"2":{"584":1}}],["小key不存在",{"2":{"581":1}}],["小于等于",{"2":{"438":1}}],["小于单机1000",{"2":{"106":1}}],["小窗口的",{"2":{"438":1}}],["小窗口的时间长度",{"2":{"437":1}}],["小窗口",{"2":{"437":1}}],["小米",{"2":{"417":1}}],["小李",{"2":{"99":3}}],["小张",{"2":{"99":3}}],["理解rabbitmq前我们先认识三个概念",{"2":{"444":1}}],["理解了以上过程就不难明白hashmap是如何解决hash冲突的问题",{"2":{"366":1}}],["理解了死锁的原因",{"2":{"225":1}}],["理论上",{"2":{"309":1}}],["理论上来说",{"2":{"15":1}}],["理由很简单",{"2":{"99":1}}],["副本的内容无论怎么修改",{"2":{"99":1}}],["结构是",{"2":{"494":1}}],["结构为",{"2":{"474":1}}],["结构说明",{"2":{"467":1}}],["结构如下",{"2":{"389":2}}],["结构性修改",{"2":{"371":1}}],["结合了",{"2":{"388":1}}],["结合",{"2":{"210":1}}],["结果为11",{"2":{"580":1}}],["结果的检测",{"2":{"517":1}}],["结果就是将b3分支合并到master分支",{"2":{"550":1}}],["结果就是",{"2":{"315":1}}],["结果",{"2":{"99":3,"120":1,"311":1,"580":5,"585":1}}],["结束后",{"2":{"505":1}}],["结束当前的方法",{"2":{"57":1}}],["结束当前的循环体",{"2":{"57":1}}],["结束正在执行的循环",{"2":{"57":1}}],["或消费者有可用的对象",{"2":{"363":1}}],["或计数器",{"2":{"349":1}}],["或动态生成类的相关方法时",{"2":{"330":1}}],["或用户输入密码过于简单",{"2":{"330":1}}],["或用户名称已存在",{"2":{"330":1}}],["或在方法签名中用",{"2":{"308":1}}],["或它们的子类",{"2":{"291":1}}],["或是",{"2":{"270":1}}],["或线程",{"2":{"226":1}}],["或发出了",{"2":{"159":1}}],["或进程元",{"2":{"144":1}}],["或",{"2":{"111":1,"159":1,"308":2,"349":1,"430":1}}],["或函数",{"2":{"99":1}}],["或者规则为空",{"2":{"430":1}}],["或者当该数组的实际大小大于其临界值值",{"2":{"372":1}}],["或者抽象公共类",{"2":{"330":1}}],["或者空对象等",{"2":{"330":1}}],["或者在字节码修改框架",{"2":{"330":1}}],["或者在方法内部通过",{"2":{"306":1}}],["或者捕获异常是抛异常的父类",{"2":{"330":1}}],["或者无法确定这里的代码未来是不是会改动",{"2":{"323":1}}],["或者使用",{"2":{"315":1}}],["或者调用其方法",{"2":{"313":1}}],["或者加上catch捕获以便进一步处理",{"2":{"309":1}}],["或者我们直接通过",{"2":{"265":1}}],["或者说",{"2":{"254":1}}],["或者可以使用wait",{"2":{"164":1}}],["或者因异常退出了run",{"2":{"159":1}}],["或者",{"2":{"124":1,"159":1,"164":1,"243":1,"322":1}}],["或者语句结束后",{"2":{"69":2}}],["或者语句被执行的时候存在",{"2":{"69":1}}],["或者写成",{"2":{"47":1}}],["或者本地线程分配缓冲",{"2":{"8":1}}],["摘自我的java启蒙书",{"2":{"95":1}}],["值算得比较均匀",{"2":{"695":1}}],["值是集群信息",{"2":{"494":1}}],["值是集群下的instance集合",{"2":{"491":1}}],["值是processorslotchain",{"2":{"425":1}}],["值可以被缓存起来",{"2":{"380":1}}],["值和之间的映射",{"2":{"338":1}}],["值调用和引用调用",{"2":{"99":1}}],["值传递和引用传递有什么区别",{"0":{"100":1}}],["值传递",{"0":{"97":1},"1":{"98":1,"99":1,"100":1},"2":{"100":1}}],["值的对象",{"2":{"95":1}}],["值作比较",{"2":{"95":1}}],["值来判断对象加入的位置",{"2":{"95":1}}],["值",{"2":{"95":1,"437":1,"570":1}}],["键值对",{"2":{"570":1}}],["键",{"2":{"95":1,"570":1}}],["k3",{"2":{"580":1}}],["k2",{"2":{"580":2}}],["k1",{"2":{"580":2}}],["k",{"2":{"371":12,"372":9,"389":5,"602":1,"692":2,"694":3,"696":5}}],["keep",{"2":{"266":2}}],["keepalivetime才会被回收销毁",{"2":{"264":1}}],["keepalivetime",{"2":{"264":2,"266":1}}],["key一定不存在",{"2":{"696":1}}],["key有可能存在",{"2":{"696":1}}],["key2",{"2":{"680":2}}],["key1用了2次",{"2":{"680":1}}],["key1",{"2":{"680":1}}],["key相关的操作",{"2":{"585":1}}],["key相等",{"2":{"371":1}}],["keymap",{"2":{"505":1}}],["keyserializer",{"2":{"608":2}}],["keyset",{"2":{"491":1}}],["keys",{"2":{"492":2,"585":2,"598":3}}],["key为ip地址",{"2":{"485":1}}],["keybuilder",{"2":{"484":1,"485":1,"486":1,"487":1,"489":1,"491":1,"505":2}}],["key是clustername",{"2":{"494":1}}],["key是cluster",{"2":{"491":1}}],["key是contextname",{"2":{"427":2}}],["key是resourcewrapper",{"2":{"425":1}}],["key值时",{"2":{"371":1}}],["key的hash值",{"2":{"371":1}}],["key无序",{"2":{"338":1}}],["key",{"0":{"127":1,"380":1},"2":{"95":1,"127":1,"248":3,"360":1,"371":18,"377":3,"380":2,"385":1,"389":5,"448":1,"474":3,"484":2,"486":7,"487":5,"489":7,"490":2,"491":4,"498":3,"505":4,"511":3,"570":1,"580":9,"582":10,"584":1,"585":9,"601":3,"602":1,"613":1,"695":4}}],["kill",{"2":{"186":1}}],["kit是提供给java开发人员使用的",{"2":{"36":1}}],["函数都会算得一个不同的位置",{"2":{"695":1}}],["函数对",{"2":{"695":1}}],["函数如下",{"2":{"377":1}}],["函数大概的作用就是",{"2":{"371":1}}],["函数返回",{"2":{"230":1}}],["函数中",{"2":{"185":1}}],["函数启动的同时在",{"2":{"146":1}}],["函数所在的线程就是一个用户线程啊",{"2":{"146":1}}],["函数",{"0":{"377":1},"2":{"95":1,"695":1}}],["介绍了并发集合像concurrenthashmap",{"2":{"240":1}}],["介绍",{"0":{"229":1},"2":{"95":1}}],["么",{"2":{"95":1}}],["面提供了一些静态工厂方法",{"2":{"254":1}}],["面试题",{"2":{"311":1}}],["面试中面试官经常会说",{"2":{"200":1}}],["面试官可能会问你",{"2":{"95":1}}],["面对复杂业务模型",{"2":{"137":1}}],["面向过程是具体化的",{"2":{"59":1}}],["面向过程",{"2":{"59":1}}],["面向对象五大基本原则是什么",{"0":{"62":1}}],["面向对象编程三大特性",{"2":{"60":1}}],["面向对象三大特性",{"0":{"60":1},"1":{"61":1,"62":1}}],["面向对象的底层其实还是面向过程",{"2":{"59":1}}],["面向对象是模型化的",{"2":{"59":1}}],["面向对象和面向过程的区别",{"0":{"59":1}}],["面向对象",{"0":{"58":1},"1":{"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1},"2":{"37":1,"59":1}}],["情况2",{"2":{"94":1}}],["情况1",{"2":{"94":1}}],["里包含一个",{"2":{"389":1}}],["里去",{"2":{"315":1}}],["里面存储的是二进制数据",{"2":{"630":1}}],["里面的同步原语",{"2":{"221":1}}],["里面的代码执行得非常快",{"2":{"202":1}}],["里面的代码只是一些很简单的代码",{"2":{"202":1}}],["里面可以传入一个",{"2":{"157":1}}],["里氏代换原则",{"2":{"92":1}}],["里式替换原则lsp",{"2":{"62":1}}],["重启容器",{"2":{"629":1}}],["重新注册实例",{"2":{"499":1}}],["重新进行hash分配后",{"2":{"372":1}}],["重点来了",{"2":{"384":1}}],["重用存在的线程",{"2":{"255":1}}],["重进入",{"2":{"234":1}}],["重入性的实现原理",{"2":{"232":2}}],["重入锁",{"0":{"231":1},"1":{"232":1}}],["重入锁是指一个线程获取到该锁之后",{"2":{"201":1}}],["重排序不会影响单线程环境的执行结果",{"2":{"195":1}}],["重排序与数据依赖性",{"0":{"194":1},"1":{"195":1}}],["重要",{"0":{"95":1},"2":{"388":1}}],["重载的方法能否根据返回类型进行区分",{"0":{"92":1}}],["重载",{"0":{"92":1},"2":{"92":1}}],["重写的文件的内容执行后的效果跟重写前是一样的",{"2":{"644":1}}],["重写aof文件内容变成二进制存储方式后",{"2":{"635":1,"641":1}}],["重写aof文件是否允许数据同步",{"2":{"635":1,"641":1}}],["重写后变成50m",{"2":{"644":1}}],["重写后的aof文件",{"2":{"644":1}}],["重写后",{"2":{"635":1,"641":1,"644":1}}],["重写规则",{"2":{"635":1,"641":1}}],["重写hashcode",{"2":{"382":1}}],["重写了",{"2":{"356":1}}],["重写run方法",{"2":{"152":1}}],["重写与重载",{"0":{"90":1},"1":{"91":1,"92":1}}],["重写",{"2":{"61":2,"92":1,"382":2}}],["看看位数组中这几个位置是否都为",{"2":{"695":1}}],["看图前先介绍一下各方代表",{"2":{"447":1}}],["看下继承关系",{"2":{"426":1}}],["看个aqs",{"2":{"230":1}}],["看系统的分配了",{"2":{"168":1}}],["看程序说出运行结果",{"0":{"89":1}}],["看视频",{"2":{"62":1}}],["非关系数据库",{"2":{"570":1}}],["非临时实例的",{"2":{"505":2}}],["非检查异常",{"2":{"291":1}}],["非受检异常",{"2":{"288":1}}],["非代码性错误",{"2":{"284":1}}],["非常类似",{"2":{"278":1}}],["非公平锁",{"2":{"230":1}}],["非公平锁是高效的选择",{"2":{"220":1}}],["非阻塞io",{"2":{"717":1}}],["非阻塞",{"2":{"206":1}}],["非阻塞模式正好与之相反",{"2":{"106":1}}],["非同一对象",{"2":{"94":1}}],["非final的局部变量就被销毁",{"2":{"88":1}}],["非静态既可以访问非静态的",{"2":{"56":1}}],["适应性自旋锁",{"2":{"199":1}}],["适当使用内部类",{"2":{"87":1}}],["适合后台应用等对交互相应要求不高的场景",{"2":{"30":1}}],["单点故障",{"2":{"649":1}}],["单位是毫秒",{"2":{"585":2}}],["单位为秒",{"2":{"437":1,"585":1}}],["单位时间内",{"2":{"140":1}}],["单例模式",{"2":{"214":1}}],["单例模式了解吗",{"2":{"200":1}}],["单次读或者单次写",{"2":{"210":1}}],["单线程",{"2":{"255":1}}],["单线程程序是按程序的顺序来执行的",{"2":{"196":1}}],["单线程操作字符串缓冲区",{"2":{"128":1,"129":1}}],["单继承的缺陷",{"2":{"86":1}}],["单一职责原则srp",{"2":{"62":1}}],["匿名内部类可以很方便的定义回调",{"2":{"86":1}}],["匿名内部类实现部分",{"2":{"85":1}}],["匿名内部类创建方式",{"2":{"85":1}}],["匿名内部类不能是抽象的",{"2":{"85":1}}],["匿名内部类不能定义任何静态成员和静态方法",{"2":{"85":1}}],["匿名内部类必须继承一个抽象类或者实现一个接口",{"2":{"85":1}}],["匿名内部类必须继承或实现一个已有的接口",{"2":{"85":1}}],["匿名内部类还有以下特点",{"2":{"85":1}}],["匿名内部类就是没有名字的内部类",{"2":{"85":1}}],["匿名内部类",{"0":{"85":1},"2":{"85":1}}],["匿名内部类和静态内部类",{"2":{"81":1}}],["私有和公有",{"2":{"83":1}}],["局部内部类和匿名内部类访问局部变量的时候",{"0":{"88":1},"2":{"88":1}}],["局部内部类的创建方式",{"2":{"84":1}}],["局部内部类",{"0":{"84":1},"2":{"81":1}}],["局部变量直接存储在栈中",{"2":{"88":1}}],["局部变量",{"2":{"5":1,"69":5,"89":1}}],["内层key是group+servicename",{"2":{"494":1}}],["内容如下",{"2":{"418":1,"421":1}}],["内置方法没有",{"2":{"391":1}}],["内核模式下的方法有",{"2":{"179":1}}],["内核模式就是指利用系统内核对象的单一性来进行同步",{"2":{"179":1}}],["内部维护了一个阻塞队列",{"2":{"489":1}}],["内部也包含一个map",{"2":{"474":1}}],["内部也是采用了",{"2":{"349":1}}],["内部的方法基本都经过",{"2":{"385":1}}],["内部已重写了equals",{"2":{"381":1}}],["内部",{"0":{"180":1}}],["内部同时还启动了好多守护线程",{"2":{"146":1}}],["内部实现是通过",{"2":{"127":1}}],["内部类变量",{"2":{"89":2}}],["内部类相关",{"0":{"89":1}}],["内部类有哪些应用场景",{"0":{"87":1}}],["内部类有效实现了",{"2":{"86":1}}],["内部类不为同一包的其他类所见",{"2":{"86":1}}],["内部类的优点",{"0":{"86":1}}],["内部类的分类有哪些",{"0":{"81":1},"1":{"82":1,"83":1,"84":1,"85":1}}],["内部类可以分为四种",{"2":{"81":1}}],["内部类本身就是类的一个属性",{"2":{"80":1}}],["内部类",{"0":{"79":1},"1":{"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1},"2":{"83":1,"84":1}}],["内存空间占用",{"2":{"352":1}}],["内存不足",{"2":{"303":1}}],["内存不足错误",{"2":{"284":1,"313":1}}],["内存位置",{"2":{"222":1}}],["内存泄漏",{"2":{"138":1}}],["内存泄漏是指不再被使用的对象或者变量一直被占据在内存中",{"2":{"15":1}}],["内存使用率不高",{"2":{"25":1}}],["内存处理是编程人员容易出现问题的地方",{"2":{"18":1}}],["内存溢出异常",{"0":{"14":1},"1":{"15":1}}],["内存分配",{"2":{"144":1}}],["内存分配根据java堆是否规整",{"2":{"9":1}}],["内存分别",{"2":{"5":1}}],["返回数据",{"2":{"690":1}}],["返回剩余有效时间",{"2":{"585":1}}],["返回增加后的分数",{"2":{"584":1}}],["返回插入的数量",{"2":{"584":1}}],["返回0",{"2":{"583":1,"585":1}}],["返回1",{"2":{"583":1,"585":1}}],["返回存入的个数",{"2":{"583":1}}],["返回key对应的value",{"2":{"580":1}}],["返回空",{"2":{"517":1}}],["返回缓存中的服务信息",{"2":{"511":1}}],["返回404",{"2":{"502":1}}],["返回集合中指定名称的分数",{"2":{"584":1}}],["返回集合",{"2":{"438":1}}],["返回true",{"2":{"438":1,"441":1}}],["返回false",{"2":{"438":1,"441":1}}],["返回新的",{"2":{"437":1}}],["返回新来的value这个值",{"2":{"371":1}}],["返回",{"2":{"372":1,"417":1,"423":1,"438":1,"585":2}}],["返回旧值",{"2":{"371":1}}],["返回类型为基本数据类型",{"2":{"330":1}}],["返回的结果是2",{"2":{"330":1}}],["返回的线程池都实现了executorservice接口",{"2":{"152":1}}],["返回同步状态的当前值",{"2":{"230":1}}],["返回字符串长度",{"2":{"126":1}}],["返回字符串的",{"2":{"126":1}}],["返回一个分割后的字符串数组",{"2":{"126":1}}],["返回指定索引处的字符",{"2":{"126":1}}],["返回指定字符的索引",{"2":{"126":1}}],["返回值是datum",{"2":{"485":1}}],["返回值是",{"2":{"271":1}}],["返回值",{"2":{"259":1}}],["返回值小于等于父类",{"2":{"92":1}}],["返回值的作用",{"2":{"78":1}}],["返回值的作用是什么",{"0":{"78":1}}],["返回结果",{"2":{"5":1,"152":2}}],["无论如何都要释放锁",{"2":{"709":1}}],["无条件群发",{"2":{"453":1}}],["无需阻塞用户的读操作",{"2":{"484":1}}],["无需担心其他服务的失败而影响主服务的运行",{"2":{"444":1}}],["无需调用",{"2":{"73":1}}],["无参构造创建的map",{"2":{"372":1}}],["无序集合",{"2":{"579":1}}],["无序",{"2":{"339":1}}],["无情丢弃掉try块中的返回点",{"2":{"330":1}}],["无非是对于共享资源state的获取和释放",{"2":{"230":1}}],["无视队列顺序直接去抢锁",{"2":{"230":1}}],["无状态锁",{"2":{"227":1}}],["无法找到资源",{"2":{"475":1,"495":1,"507":1}}],["无法用下标来取得想要的值",{"2":{"357":1}}],["无法通过预检查的异常除外",{"2":{"330":1}}],["无法通过虚引用获得对象",{"2":{"21":1}}],["无法处理",{"2":{"322":1}}],["无法清除垃圾碎片",{"2":{"25":1}}],["无法对栈底直接进行操作",{"2":{"6":1}}],["若遇到哈希冲突",{"2":{"368":1}}],["若",{"2":{"300":2,"301":1}}],["若读取文件时未发生异常",{"2":{"300":1}}],["若会发生除数为零的情况",{"2":{"286":1}}],["若干进程之间形成一种头尾相接的循环等待资源关系",{"2":{"225":1}}],["若果在第一轮循环中",{"2":{"222":1}}],["若无外力作用",{"2":{"148":1,"226":1}}],["若它们的内容相等",{"2":{"94":1}}],["若一个类没有声明构造方法",{"0":{"72":1}}],["若java堆中内存是绝对规整的",{"2":{"8":1}}],["生产者将带有routingkey的消息发送给交换机",{"2":{"455":1}}],["生产者将消息发送给交换机",{"2":{"453":1}}],["生产者向队列里发送消息",{"2":{"449":1}}],["生产者委托卖货",{"2":{"444":1}}],["生产者",{"2":{"444":1,"447":1,"449":1,"453":1,"455":1,"457":1}}],["生产者是往队列里添加元素的线程",{"2":{"251":1}}],["生产者必须释放对临界资源",{"2":{"177":1}}],["生产者需要等待队列有空间才能继续往里面放入商品",{"2":{"177":1}}],["生成一些常用的线程池",{"2":{"254":1}}],["生成类的对象时自动执行",{"2":{"73":1}}],["生成虚拟机能够理解的代码",{"2":{"38":1}}],["生命周期",{"2":{"69":1}}],["语义",{"2":{"475":1,"495":1,"507":1}}],["语法",{"0":{"317":1}}],["语句的例子",{"2":{"321":1}}],["语句不会立马返回调用者",{"2":{"310":1}}],["语句时",{"2":{"300":1,"347":1}}],["语句",{"0":{"315":1},"1":{"316":1,"317":1},"2":{"300":3}}],["语句可以解决这个问题",{"2":{"300":1}}],["语句中都调用释放本地资源的代码",{"2":{"300":1}}],["语句块中可以捕获多个异常类型",{"2":{"298":1}}],["语句块可能无法被执行",{"2":{"146":1}}],["语句体内",{"2":{"69":1}}],["语言中所有错误与异常的超类",{"2":{"283":1}}],["语言的方法调用只支持参数的值传递",{"2":{"98":1}}],["语言没有提供释放已分配内存的显示操作方法",{"2":{"18":1}}],["nx",{"2":{"598":3}}],["nginx",{"2":{"560":8,"563":9}}],["nginx配置解决跨域问题",{"0":{"410":1}}],["ns",{"2":{"475":1,"480":1,"495":1,"500":1,"507":1}}],["n=1",{"2":{"276":1}}],["n",{"2":{"245":4,"276":3,"366":1,"371":5,"378":1,"384":1,"389":1}}],["nullpointerexception",{"2":{"312":1,"313":1,"330":2}}],["null",{"2":{"200":2,"214":4,"248":1,"300":2,"315":1,"316":2,"330":1,"364":1,"371":11,"372":16,"377":1,"382":1,"385":3,"389":6,"401":1,"417":2,"418":3,"423":4,"425":2,"427":3,"428":2,"429":1,"430":2,"431":4,"435":5,"437":3,"438":2,"440":1,"441":2,"442":3,"484":1,"485":3,"491":3,"492":2,"498":2,"502":6,"505":7,"510":1,"511":2,"515":3,"517":1,"580":1,"597":1,"608":8,"613":1,"622":1,"692":1,"696":2}}],["numberformatexception来实现",{"2":{"330":1}}],["numberformatexception",{"2":{"313":1,"318":2,"320":2,"321":4,"323":2,"324":6,"325":2}}],["num=4",{"2":{"245":3}}],["num=3",{"2":{"245":3}}],["num=2",{"2":{"245":3}}],["num=1",{"2":{"245":3}}],["num=5",{"2":{"245":4}}],["num=",{"2":{"245":1}}],["num",{"2":{"245":4,"622":1,"643":12}}],["num2",{"2":{"99":8}}],["num1",{"2":{"99":7}}],["noeviction",{"2":{"680":2}}],["nosql",{"2":{"570":1}}],["nosuchelementexception",{"2":{"364":1}}],["nosuchmethodexception",{"2":{"313":1}}],["nosuchfieldexception",{"2":{"313":1}}],["now",{"2":{"505":1,"517":1}}],["no",{"2":{"389":1,"401":1,"418":1,"479":1,"517":1,"589":1,"635":4,"637":1,"641":4}}],["notnull",{"2":{"608":1}}],["not",{"2":{"315":1,"418":1,"425":1,"475":1,"478":1,"484":1,"485":2,"491":1,"492":1,"495":1,"499":1,"502":2,"507":1,"570":1,"608":1}}],["notified",{"2":{"490":1}}],["notifier还是一个runnable",{"2":{"490":1}}],["notifier异步更新",{"0":{"490":1}}],["notifier类的run方法",{"2":{"490":1}}],["notifier类的",{"2":{"489":1,"490":1}}],["notifier的类型就是distroconsistencyserviceimpl",{"2":{"489":1}}],["notifier",{"2":{"489":2,"490":1}}],["notifier维护了一个阻塞队列",{"2":{"489":1}}],["notifycenter",{"2":{"515":2}}],["notifying",{"2":{"490":3}}],["notifyobservers",{"2":{"441":2}}],["notifyall",{"0":{"166":1,"167":1,"175":1},"2":{"164":1,"166":1,"175":2,"177":1,"251":1,"511":1}}],["notify",{"0":{"166":1,"167":1,"175":1},"2":{"163":1,"164":1,"165":1,"166":3,"167":2,"174":4,"175":2,"177":1,"204":1,"251":1}}],["notityall",{"2":{"163":1}}],["noclassdeffounderror",{"0":{"308":1},"2":{"284":1,"308":1}}],["nov",{"2":{"266":20}}],["nodes",{"2":{"671":1,"675":1}}],["nodeselectorslot负责构建簇点链路中的节点",{"2":{"427":1}}],["nodeselectorslot",{"0":{"427":1},"2":{"414":1,"426":1}}],["node是一个接口",{"2":{"415":1}}],["node",{"0":{"415":1},"2":{"230":1,"371":3,"372":9,"388":2,"389":4,"423":8,"427":10,"428":7,"429":8,"430":2,"431":8,"432":3,"435":12,"438":12,"439":2,"440":2}}],["nonnull",{"2":{"435":1}}],["non",{"2":{"106":1}}],["na",{"2":{"514":2}}],["naming模块中的instancecontroller类中",{"2":{"502":1}}],["namingresponsecode",{"2":{"499":2,"502":2}}],["namingresourceparser",{"2":{"483":1,"502":1,"517":1}}],["naming这个模块",{"2":{"482":1}}],["naming",{"2":{"480":1,"482":1,"484":1,"498":1,"499":2,"500":2,"511":2,"514":4,"515":1}}],["namingutils",{"2":{"480":2,"483":1,"496":2,"499":1,"502":1,"505":1,"510":2,"517":2}}],["namingservice",{"2":{"479":4}}],["names",{"2":{"582":1,"611":4}}],["namespace",{"2":{"478":1,"480":2,"483":2,"484":3,"491":1,"500":1,"502":2,"512":1,"517":2}}],["namespaceid",{"2":{"475":1,"480":2,"483":2,"484":10,"500":2,"502":5,"505":6,"507":1,"512":1,"517":5,"518":1}}],["namespace下可以有多个group",{"2":{"474":1}}],["name和user",{"2":{"528":1}}],["name不能为空",{"2":{"479":1}}],["name",{"2":{"112":1,"410":1,"423":11,"425":6,"448":2,"449":1,"465":1,"474":2,"479":1,"480":6,"483":3,"484":2,"490":1,"491":1,"495":1,"500":2,"502":3,"512":1,"517":3,"528":1,"545":4,"560":3,"563":4,"573":1,"580":3,"581":2,"595":2,"596":1,"597":4,"598":4,"606":5,"611":3,"615":1,"617":5,"622":1,"629":1,"631":2,"643":2,"655":3,"660":4,"670":6}}],["nacos还支持服务列表变更时的主动推送功能",{"2":{"513":1}}],["nacos提供了一个根据serviceid查询实例列表的接口",{"2":{"507":1}}],["nacos提供了服务注册的api接口",{"2":{"475":1}}],["nacos支持永久实例",{"2":{"506":1}}],["nacos是5秒",{"2":{"506":1}}],["nacos是多级存储模型",{"2":{"494":1}}],["nacos与eureka在临时实例上都是基于心跳模式实现",{"2":{"506":1}}],["nacos会采用主动的健康检测",{"2":{"505":1}}],["nacosurlbase",{"2":{"500":1,"512":1}}],["nacosurlinstance",{"2":{"480":1}}],["nacos内部会将服务注册的任务放入阻塞队列",{"2":{"494":1}}],["nacos在更新实例列表时",{"2":{"494":1}}],["nacos如何应对阿里内部数十万服务的并发写请求",{"2":{"494":1}}],["nacos如何避免并发读写的冲突",{"2":{"494":1}}],["nacos如何保证并发写的安全性",{"2":{"494":1}}],["nacos的订阅模式服务状态更新更及时",{"2":{"519":1}}],["nacos的服务发现分为两种模式",{"2":{"519":1}}],["nacos的健康检测有两种模式",{"2":{"506":1}}],["nacos的实例分为临时实例和永久实例两种",{"2":{"495":1}}],["nacos的注册表结构是什么样的",{"2":{"494":1}}],["nacos的github地址",{"2":{"466":1}}],["nacostaskprocessor",{"2":{"492":1}}],["nacosdelaytaskexecuteengine",{"2":{"492":1}}],["nacosdiscoveryproperties",{"2":{"479":2}}],["nacos又实现了集群一致性更新",{"2":{"486":1}}],["nacos集群一致性",{"0":{"486":1}}],["nacos集群的数据同步",{"2":{"484":1}}],["nacosexception",{"2":{"480":2,"484":5,"485":2,"486":1,"487":1,"496":1,"499":1,"500":1,"502":2,"505":3,"510":1,"511":1,"512":1}}],["nacosnamingservice提供了服务注册",{"2":{"480":1}}],["nacosnamingservice",{"0":{"480":1,"510":1}}],["nacosserviceregistry是spring的serviceregistry接口的实现类",{"2":{"479":1}}],["nacosserviceregistry",{"0":{"479":1}}],["nacosserviceregistryautoconfiguration",{"0":{"477":1}}],["nacosautoserviceregistration源码如图",{"2":{"478":1}}],["nacosautoserviceregistration",{"0":{"478":1}}],["nacos服务端的入口是在console模块中的nacos类",{"2":{"473":1}}],["nacos底层的数据通信会基于protobuf对数据做序列化和反序列化",{"2":{"469":1}}],["nacos快速开始",{"2":{"464":1}}],["nacos",{"0":{"463":1},"1":{"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1},"2":{"399":1,"464":2,"465":3,"466":2,"475":1,"477":1,"479":3,"480":2,"482":1,"484":2,"490":4,"491":3,"492":2,"495":2,"498":1,"504":1,"507":1,"514":1,"517":1}}],["native",{"2":{"2":3,"3":2,"271":1}}],["nexttime",{"2":{"499":3}}],["nextretrytimestamp",{"2":{"441":1}}],["next确实是nodeselectslot类型",{"2":{"426":1}}],["next指向下一个元素时",{"2":{"372":1}}],["next指向当前e",{"2":{"372":1}}],["next==null",{"2":{"372":1}}],["next组合",{"2":{"371":1}}],["next",{"2":{"341":1,"346":1,"371":2,"372":13,"389":2}}],["never",{"2":{"323":2}}],["networks",{"2":{"563":4,"655":4,"660":1}}],["network",{"2":{"560":4}}],["netutils",{"2":{"512":1}}],["netflix公司出品",{"2":{"464":1}}],["netty",{"2":{"106":1}}],["net",{"2":{"102":1,"563":4}}],["newhosts",{"2":{"515":1}}],["newhashset",{"2":{"485":1}}],["newips",{"2":{"491":5}}],["newemptybucket",{"2":{"437":2}}],["newmap",{"2":{"423":4,"428":4}}],["newtab",{"2":{"372":7}}],["newthread",{"2":{"514":1}}],["newthr",{"2":{"372":6}}],["newnode",{"2":{"371":2}}],["newfixedthreadpool方法来创建线程池",{"2":{"254":1}}],["newfixedthreadpool",{"2":{"254":1,"262":1}}],["newcap",{"2":{"372":8}}],["newcachedthreadpool",{"2":{"152":1,"254":1,"262":1}}],["newcondition",{"2":{"220":1}}],["new这个线程类所在的线程所调用的",{"2":{"185":1}}],["news",{"2":{"704":2,"708":2,"713":2}}],["newstate",{"2":{"230":2}}],["newsingleton",{"2":{"214":1}}],["newsinglethreadexecutor",{"2":{"152":2,"254":1,"262":1}}],["newscheduledthreadpool",{"2":{"152":1,"254":1,"262":1}}],["new",{"0":{"123":1},"2":{"82":2,"83":3,"84":4,"85":1,"89":2,"94":2,"99":2,"106":1,"112":1,"123":2,"124":2,"133":1,"148":4,"152":7,"155":1,"159":1,"182":1,"183":1,"185":2,"200":2,"214":1,"241":1,"245":2,"257":1,"266":6,"271":1,"296":3,"297":1,"300":4,"301":2,"311":2,"315":2,"316":2,"317":2,"320":1,"324":2,"325":1,"342":1,"346":1,"351":2,"356":1,"360":2,"364":1,"372":1,"389":2,"401":1,"418":1,"423":5,"425":2,"427":2,"428":2,"430":1,"431":5,"435":1,"437":3,"438":3,"440":1,"441":1,"448":3,"480":1,"484":2,"485":6,"487":1,"489":1,"491":10,"492":2,"498":1,"499":2,"500":2,"502":3,"503":1,"504":1,"505":9,"510":1,"511":2,"512":1,"514":9,"515":3,"517":2,"518":1,"595":1,"596":2,"597":2,"598":1,"600":2,"601":1,"608":2,"609":3,"611":1,"612":1,"613":1,"622":1,"696":1,"704":2}}],["new创建对象实例",{"2":{"67":1}}],["new关键字",{"2":{"67":1}}],["nio提供了与传统bio模型中的",{"2":{"106":1}}],["nio中的n可以理解为non",{"2":{"106":1}}],["nio是一种同步非阻塞的i",{"2":{"106":1}}],["nio2",{"2":{"106":1}}],["nio",{"0":{"106":1},"2":{"102":1,"106":11,"505":2}}],["创建redisson的config对象",{"2":{"696":1}}],["创建订单时",{"2":{"687":1}}],["创建网络",{"2":{"560":1}}],["创建分支命令格式",{"2":{"547":1}}],["创建分支",{"0":{"547":1},"2":{"545":1}}],["创建健康检测的任务",{"2":{"505":1}}],["创建服务流程",{"2":{"505":1}}],["创建空serviceinfo",{"2":{"511":1}}],["创建空服务时",{"2":{"505":1}}],["创建空集合",{"2":{"438":1}}],["创建set集合",{"2":{"485":1}}],["创建map",{"2":{"485":2}}],["创建myrunnable实例myrunnable",{"2":{"152":1}}],["创建好了服务",{"2":{"484":1}}],["创建方式2",{"2":{"448":1}}],["创建方式1",{"2":{"448":1}}],["创建新的服务",{"2":{"505":1}}],["创建新的cluster",{"2":{"485":1}}],["创建新",{"2":{"437":2}}],["创建",{"2":{"422":1,"425":1,"428":1,"437":1,"514":1}}],["创建context的方法就是",{"2":{"423":1}}],["创建context",{"2":{"420":1,"423":1}}],["创建资源",{"2":{"418":1,"422":1}}],["创建entry",{"2":{"417":1}}],["创建的链路图如下",{"2":{"415":1}}],["创建异常对象并转交给",{"2":{"305":1}}],["创建workerthread对象",{"2":{"266":1}}],["创建固定大小的线程池",{"2":{"254":1}}],["创建一个目录docker",{"0":{"655":1}}],["创建一个空的service",{"2":{"484":1}}],["创建一个名为fanout",{"2":{"448":1}}],["创建一个异常非常慢",{"2":{"328":1}}],["创建一个线程是比较耗时",{"2":{"257":1}}],["创建一个大小无限的线程池",{"2":{"254":1}}],["创建一个可缓存的线程池",{"2":{"254":1}}],["创建一个单线程的线程池",{"2":{"254":1}}],["创建一个对象用什么关键字",{"0":{"67":1}}],["创建和销毁对象是很费时间的",{"2":{"254":1}}],["创建期间没有发生",{"2":{"217":1}}],["创建实现callable接口的类mycallable",{"2":{"152":1}}],["创建自定义的线程子类对象",{"2":{"152":1}}],["创建线程池的方式有多种",{"2":{"263":1}}],["创建线程有四种方式",{"2":{"152":1}}],["创建线程有哪几种方式",{"0":{"152":1}}],["创建线程的四种方式",{"0":{"151":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1}}],["创建了几个字符串对象",{"0":{"123":1}}],["创建字符串",{"2":{"120":1}}],["创建文件夹",{"2":{"107":1}}],["创建文件",{"2":{"107":1}}],["创建几次对象",{"2":{"74":1}}],["创建独立于具体对象的域变量或者方法",{"2":{"56":1}}],["又要保证数据安全",{"2":{"648":1}}],["又要为子类提供通用的功能",{"2":{"64":1}}],["又是一个map",{"2":{"474":1}}],["又是如何判断窗口是否符合要求呢",{"2":{"438":1}}],["又减小了序列化之后的文件大小",{"2":{"356":1}}],["又可分为公平锁和非公平锁",{"2":{"230":1}}],["又将",{"2":{"223":1}}],["又同时使用了原来的指针来分配内存的情况",{"2":{"10":1}}],["选择策略",{"2":{"658":1}}],["选择一个从节点来当主节点",{"2":{"658":1}}],["选择",{"2":{"486":2}}],["选择nacos源码目录",{"2":{"468":1}}],["选择项目结构选项",{"2":{"468":1}}],["选择抽象类的时候通常是如下情况",{"2":{"64":1}}],["选择哪种分配方式是由",{"2":{"9":1}}],["相等",{"2":{"371":1}}],["相等的对象是否真的相同",{"2":{"95":1}}],["相关的规则",{"2":{"380":1}}],["相关",{"2":{"359":1}}],["相匹配",{"2":{"221":1}}],["相应地",{"2":{"174":1}}],["相应就大大提高了执行速度",{"2":{"95":1}}],["相比在1",{"2":{"377":1}}],["相比于之前的版本",{"2":{"369":1}}],["相比与其他操作系统",{"2":{"145":1}}],["相比使用stringbuffer",{"2":{"128":1,"129":1}}],["相对于hashtable的synchronized锁的粒度更精细了一些",{"2":{"387":1}}],["相对于hashmap来说",{"2":{"237":1}}],["相对于",{"2":{"384":1}}],["相对路径",{"2":{"112":1}}],["相对应的",{"2":{"106":1}}],["相同service时通过锁来互斥",{"2":{"494":1}}],["相同链路则只有一个defaultnode",{"2":{"427":1}}],["相同情况下使用stirngbuilder",{"2":{"128":1,"129":1}}],["相同",{"2":{"95":1}}],["相同点",{"2":{"64":1,"153":1,"208":1,"364":1}}],["相当于服务器中的组件",{"2":{"447":1}}],["相当于一个临时定义的排序规则",{"2":{"395":1}}],["相当于散列生效的只有几个低",{"2":{"371":1}}],["相当于迭代器",{"2":{"340":1}}],["相当于变成了一个",{"2":{"276":1}}],["相当于",{"2":{"48":1}}],["抽象类能使用",{"0":{"66":1}}],["抽象类不能直接实例化",{"2":{"65":1}}],["抽象类可以包含抽象方法",{"2":{"65":1}}],["抽象类是对类的抽象",{"2":{"64":1}}],["抽象类是用来捕捉子类的通用特性的",{"2":{"64":1}}],["抽象类和接口的对比",{"0":{"64":1}}],["抽象不应该依赖于具体实现",{"2":{"62":1}}],["玩游戏等功能",{"2":{"62":1}}],["他提供了检查计算是否完成的方法",{"2":{"258":1}}],["他们都是有序集合",{"2":{"353":1}}],["他们都应该依赖于抽象",{"2":{"62":1}}],["他们的作用完全不同",{"2":{"260":1}}],["他们也只需实现tryacquire",{"2":{"230":1}}],["他们允许更灵活的结构",{"2":{"220":1}}],["他们同时都想申请对方的资源",{"2":{"148":1}}],["他的生命周期和线程相同",{"2":{"5":1}}],["哈希碰撞减少",{"2":{"378":1}}],["哈希碰撞",{"2":{"375":1}}],["哈希值与数组大小范围不匹配",{"2":{"383":1}}],["哈希值",{"2":{"374":1}}],["哈希",{"2":{"374":1}}],["哈希码",{"2":{"8":1}}],["哈哈~~",{"2":{"62":1}}],["哼",{"2":{"62":1}}],["想要修改",{"2":{"62":1}}],["想要增加功能热烈欢迎",{"2":{"62":1}}],["让其使用上rdb的二进制存储数据格式",{"2":{"625":1}}],["让其持有偏向锁",{"2":{"203":1}}],["让我们来理解一下nacos的具体是怎么实现操作的",{"2":{"465":1}}],["让一组线程到达一个屏障",{"2":{"278":1}}],["让线程",{"2":{"148":1}}],["让程序可以选择多个运行状态",{"2":{"61":1}}],["让所有存活的对象都向一端移动",{"2":{"25":1}}],["所谓无偏就是能够把元素的",{"2":{"695":1}}],["所谓互斥就是进程在某一时间内独占资源",{"2":{"225":1}}],["所谓多线程的并发运行",{"2":{"160":1}}],["所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定",{"2":{"61":1}}],["所等待的线程",{"2":{"149":1}}],["所在通过路径",{"2":{"112":1}}],["所有实例都是临时实例",{"2":{"486":1}}],["所有消息都会发送到绑定的队列中",{"2":{"454":1}}],["所有散列函数都有如下一个基本特性",{"2":{"374":1}}],["所有涉及到改变modcount值得地方全部加上synchronized",{"2":{"341":1}}],["所有被屏障拦截的线程才会继续干活",{"2":{"278":1}}],["所有的读请求交给从节点",{"2":{"652":1}}],["所有的健康检测任务都被放入一个阻塞队列",{"2":{"505":1}}],["所有的计数+1动作都包括两部分",{"2":{"429":1}}],["所有的节点都可以记录对资源的访问统计数据",{"2":{"415":1}}],["所有的数据结构都可以用这两个基本结构来构造的",{"2":{"366":1}}],["所有的任务都销毁了",{"2":{"256":1}}],["所有的输入流的基类",{"2":{"105":1}}],["所有域都是",{"2":{"217":1}}],["所有输出流的基类",{"2":{"105":1}}],["所必需的包是",{"2":{"103":1}}],["所以可以使用分布式锁来完成",{"2":{"686":1}}],["所以多个线程在操作不同的jvm时",{"2":{"686":1}}],["所以多进程要比多线程健壮",{"2":{"144":1}}],["所以hash环上的节点如果不可用",{"2":{"668":1}}],["所以redistemplate会调用afterpropertiesset方法",{"2":{"608":1}}],["所以都是statisticnode的子类",{"2":{"415":1}}],["所以我们只需要使用即可",{"2":{"696":1}}],["所以我们的思路就是让hashcode取值出的高位也参与运算",{"2":{"377":1}}],["所以我们还需要对hashcode作一定的优化",{"2":{"376":1}}],["所以我们如果只是单纯的用hashcode取余来获取对应的bucket这将会大大增加哈希碰撞的概率",{"2":{"376":1}}],["所以我们将数组和链表结合在一起",{"2":{"367":1,"376":1}}],["所以不可能从散列值来唯一的确定输入值",{"2":{"374":1}}],["所以不会重复",{"2":{"360":1}}],["所以不会上锁",{"2":{"221":1}}],["所以索引数据快而插入数据慢",{"2":{"354":1}}],["所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成",{"2":{"339":1}}],["所以它可以在并发环境下实现更高的吞吐量",{"2":{"239":1}}],["所以继续执行finally的内容",{"2":{"310":1}}],["所以你即使对所有代码加上try",{"2":{"309":1}}],["所以catch可以省略",{"2":{"309":1}}],["所以无论代码中是否发生异常",{"2":{"300":1}}],["所以无法被其他类使用",{"2":{"230":1}}],["所以当lotail",{"2":{"372":1}}],["所以当一个线程读取它的值并加",{"2":{"270":1}}],["所以当创建字符串时",{"2":{"127":1}}],["所以创建一个线程池是个更好的的解决方案",{"2":{"257":1}}],["所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数",{"2":{"254":1}}],["所以调用一个",{"2":{"243":1}}],["所以使用场景也就比较明显",{"2":{"243":1}}],["所以每次只能有一个线程来访为",{"2":{"241":1}}],["所以每次在拿数据的时候都会上锁",{"2":{"221":1}}],["所以volatile性能肯定比synchronized关键字要好",{"2":{"215":1}}],["所以从oracle",{"2":{"213":1}}],["所以要等到锁的计数器下降为0时才能释放锁",{"2":{"208":1}}],["所以如果一个线程a调用一个实例对象的非静态",{"2":{"200":1}}],["所以现在的",{"2":{"199":1}}],["所以与具体的操作系统优先级有关",{"2":{"184":1}}],["所以他们只能在同步方法或者同步块中被调用",{"2":{"167":1}}],["所以任意对象调用方法一定定义在object类中",{"2":{"166":1}}],["所以由应用程序来控制它是更好的选择",{"2":{"162":1}}],["所以说",{"2":{"156":1}}],["所以这里只要记住下一个slot就可以了",{"2":{"426":1}}],["所以这里直接返回40",{"2":{"310":1}}],["所以这并不是多线程工作",{"2":{"155":1}}],["所以这两个线程就会互相等待而进入死锁状态",{"2":{"148":1}}],["所以执行路径还是只有一条",{"2":{"154":1}}],["所以守护",{"2":{"146":1}}],["所以线程也被称为轻权进程或者轻量级进程",{"2":{"144":1}}],["所以线程需要占用内存",{"2":{"141":1}}],["所以需要移动指针从前往后依次查找",{"2":{"352":1}}],["所以需要",{"2":{"141":1}}],["所以是没办法设置具体时间的",{"2":{"710":1}}],["所以是非线程安全的",{"2":{"128":1,"129":1}}],["所以是线程安全的",{"2":{"128":1,"129":1}}],["所以string对象是不可变的",{"2":{"128":1,"129":1}}],["所以相比于其他对象更快",{"2":{"127":1}}],["所以就有了",{"2":{"117":1}}],["所以下面给出一个反例来详细地阐述一下这个问题",{"2":{"99":1}}],["所以通常是优先选用接口",{"2":{"64":1}}],["所以",{"2":{"55":1,"66":1,"103":1,"145":1,"157":1,"248":1,"249":1,"315":1,"320":1,"322":1,"352":1,"354":1,"371":1,"425":1}}],["所以java程序运行时比较高效",{"2":{"38":1}}],["所以安装了jdk",{"2":{"36":1}}],["所以在不需要保证线程安全时时建议使用arraylist",{"2":{"353":1}}],["所以在程序中多个线程交替向",{"2":{"251":1}}],["所以在其他处于等待状态的线程上调用这些方法是没有意义的",{"2":{"169":1}}],["所以在处理前",{"2":{"165":1}}],["所以在多线程执行时要使用start",{"2":{"154":1}}],["所以在内存中只会有一份",{"2":{"74":1}}],["所以在同一个构造函数里面有相同的语句",{"2":{"55":1}}],["所以在",{"2":{"31":1}}],["所以也是线程私有",{"2":{"5":1}}],["所以分配的内存大小要在编译期就确认",{"2":{"5":1}}],["所以分配的内存是在运行期确认的",{"2":{"5":1}}],["所以性能快",{"2":{"5":1}}],["所以有各种算法",{"2":{"5":1}}],["要一个socket连接成功",{"2":{"717":1}}],["要使用git对我们的代码进行管理",{"2":{"529":1}}],["要更新的服务信息",{"2":{"487":1}}],["要先创建一个空service出来",{"2":{"484":1}}],["要求存放的键值对映射的键必须实现",{"2":{"395":1}}],["要求存放的对象所属的类必须实现",{"2":{"395":1}}],["要远小于int类型的范围",{"2":{"376":1}}],["要比",{"2":{"352":1,"385":1}}],["要么全部执行失败",{"2":{"619":1}}],["要么全部执行成功",{"2":{"619":1}}],["要么移动到原始位置+增加的数组大小这个位置上",{"2":{"372":1}}],["要么移动到原偏移量两倍的位置",{"2":{"372":1}}],["要么使用方法签名中用",{"2":{"288":1}}],["要么使用try",{"2":{"288":1}}],["要么通过try",{"2":{"287":1}}],["要么通过throws进行声明抛出",{"2":{"287":1}}],["要么是共享方式",{"2":{"230":1}}],["要配置一个线程池是比较复杂的",{"2":{"254":1}}],["要想支持重入性",{"2":{"232":1}}],["要想完完全全的弄懂reentrantlock的话",{"2":{"232":1}}],["要释放锁",{"2":{"201":1}}],["要做的事情",{"2":{"110":1}}],["要实现多态需要做两件事",{"2":{"60":1}}],["要到最后才能删除",{"2":{"6":1}}],["父类或接口定义的引用变量可以指向子类或具体实现类的实例对象",{"2":{"60":1}}],["关闭本地绑定",{"2":{"589":1}}],["关闭保护模式",{"2":{"589":2}}],["关系型数据库",{"2":{"570":1}}],["关键在putserviceandinit",{"2":{"505":1}}],["关键的业务逻辑都在clientbeatprocessor这个类中",{"2":{"503":1}}],["关键字进行声明",{"2":{"308":1}}],["关键字声明相应的异常",{"2":{"306":1}}],["关键字声明可能会抛出的异常",{"2":{"291":1,"296":1}}],["关键字用在方法声明上",{"2":{"306":1}}],["关键字用在方法内部",{"2":{"306":1}}],["关键字在使用上的几点区别如下",{"2":{"306":1}}],["关键字在方法上声明该方法要拋出的异常",{"2":{"306":1}}],["关键字和",{"2":{"306":1}}],["关键字来声明要抛出的异常",{"2":{"291":1}}],["关键字来保证可见性和禁止指令重排",{"2":{"210":1}}],["关键字抛出",{"2":{"288":1}}],["关键字volatile的主要作用是使变量在多个线程间可见",{"2":{"213":1}}],["关键字的实现也是悲观锁",{"2":{"221":1}}],["关键字的场景还是更多一些",{"2":{"215":1}}],["关键字的作用",{"0":{"210":1}}],["关键字的具体使用",{"2":{"200":1}}],["关键字修饰也是很有必要的",{"2":{"200":1}}],["关键字修饰也是很有必要",{"2":{"200":1}}],["关键字修饰的代码块",{"2":{"179":1}}],["关键字修饰的方法",{"2":{"179":1}}],["关键字加到实例方法上是给对象实例上锁",{"2":{"200":1}}],["关键字加到",{"2":{"200":1}}],["关键字是用来控制线程同步的",{"2":{"199":1}}],["关键字",{"0":{"52":1,"200":1},"1":{"53":1,"54":1,"55":1,"56":1}}],["关联模式关联的资源名称",{"2":{"435":1}}],["关联模式",{"2":{"434":2,"435":2}}],["关联模式的限流规则",{"2":{"415":1}}],["关于rpc方法返回方式使用result方式的理由",{"2":{"330":1}}],["关于继承",{"2":{"60":1}}],["便于使用",{"2":{"60":1}}],["仅在异常情况下使用异常",{"2":{"328":1}}],["仅仅当想要处理异常时才去捕获",{"2":{"324":1}}],["仅仅是指向被复制的内存地址",{"2":{"4":1}}],["仅靠应用程序本身无法恢复",{"2":{"303":1}}],["仅有一个线程能成功",{"2":{"271":1}}],["仅有acc",{"2":{"201":1}}],["仅存在结点之间的关联关系",{"2":{"230":1}}],["仅能实现变量的修改可见性",{"2":{"215":1}}],["仅能获得10",{"2":{"128":1,"129":1}}],["仅对外提供公共访问方式",{"2":{"60":1}}],["隐藏对象的属性和实现细节",{"2":{"60":1}}],["我已经到达了屏障",{"2":{"278":1}}],["我写了一个简单的线程池",{"2":{"266":1}}],["我认为这句话不严谨",{"2":{"243":1}}],["我觉得如果别人问这个问题的话",{"2":{"120":1}}],["我发现就目前来说",{"2":{"106":1}}],["我们讲到一个类nacosnamingservice",{"2":{"510":1}}],["我们说过nacosnamingservice这个类实现了服务的注册",{"2":{"496":1}}],["我们先看pushreceiver",{"2":{"514":1}}],["我们先看onput方法",{"2":{"487":1}}],["我们先看sentinelwebautoconfiguration这个类",{"2":{"421":1}}],["我们关注distroconsistencyserviceimpl即可",{"2":{"486":1}}],["我们需要在提示时输入y",{"2":{"673":1}}],["我们需要了解git相关的一些概念",{"2":{"532":1}}],["我们需要找到服务注册的入口",{"2":{"476":1}}],["我们需要让它单机启动",{"2":{"473":1}}],["我们需要先将proto文件编译为对应的java代码",{"2":{"469":1}}],["我们需要一种更高效的",{"2":{"106":1}}],["我们这里以异常比例熔断为例来看",{"2":{"442":1}}],["我们这里以阿里巴巴推荐的使用",{"2":{"266":1}}],["我们要统计的时",{"2":{"438":1}}],["我们跟入其中",{"2":{"477":1}}],["我们跟入默认的ratelimitercontroller中的canpass方法来分析",{"2":{"439":1}}],["我们跟入默认的defaultcontroller中的canpass方法来分析",{"2":{"438":1}}],["我们跟入",{"2":{"437":1}}],["我们跟入看看",{"2":{"437":1}}],["我们后续再看",{"2":{"429":1}}],["我们进入delegateconsistencyserviceimpl来看",{"2":{"486":1}}],["我们进入defaultprocessorslotchain的entry方法",{"2":{"426":1}}],["我们进入circuitbreaker的trypass方法中",{"2":{"441":1}}],["我们进入arraymetric类的addpass方法",{"2":{"437":1}}],["我们进入该方法",{"2":{"423":1}}],["我们来看临时实例的一致性实现",{"2":{"487":1}}],["我们来看看实例列表的更新",{"2":{"485":1}}],["我们来看看这个类的prehandle实现",{"2":{"422":1}}],["我们来看下sentinelautoconfiguration这个类",{"2":{"418":1}}],["我们知道defaultnode和clusternode都是statisticnode的子类",{"2":{"437":1}}],["我们知道这个是springmvc自定义配置用到的类",{"2":{"421":1}}],["我们知道可以通过给方法添加",{"2":{"418":1}}],["我们发现簇点链路中除了controller方法",{"2":{"419":1}}],["我们在后续会继续学习",{"2":{"480":1}}],["我们在order",{"2":{"417":1}}],["我们在一个springmvc项目中",{"2":{"415":1}}],["我们该如何将自己的一段代码标记为一个sentinel的资源呢",{"2":{"416":1}}],["我们就要重写compareto方法或compare方法",{"2":{"393":1}}],["我们就把它叫做碰撞",{"2":{"375":1}}],["我们首先可能会想到采用",{"2":{"384":1}}],["我们首先需要知道什么是哈希冲突",{"2":{"373":1}}],["我们把这样的操作称为扰动",{"2":{"377":1}}],["我们hashmap初始的容量大小",{"2":{"376":1}}],["我们看到在这个函数里面使用到了2次resize",{"2":{"372":1}}],["我们看出它的优缺点比较明显",{"2":{"243":1}}],["我们不需要担心等待生产者有可用的空间",{"2":{"363":1}}],["我们比较常用的是set",{"2":{"338":1}}],["我们建议使用runtimeexception异常",{"2":{"304":1}}],["我们是不应该实现任何新的error子类的",{"2":{"284":1}}],["我们上面也说了两者的区别",{"2":{"266":1}}],["我们都会在后面讲到",{"2":{"230":1}}],["我们都覆盖",{"2":{"94":1}}],["我们自己也能利用aqs非常轻松容易地构造出符合我们自己需求的同步器",{"2":{"229":1}}],["我们称为死锁",{"2":{"224":1}}],["我们可以在nacos",{"2":{"477":1}}],["我们可以下载windows版本的来使用",{"2":{"471":1}}],["我们可以直接注入使用",{"2":{"465":1}}],["我们可以重写compareto方法和使用自制的comparator方法或者以两个comparator来实现歌名排序和歌星名排序",{"2":{"393":1}}],["我们可以从一个",{"2":{"345":1}}],["我们可以使用循环",{"2":{"223":1}}],["我们可以定义线程的优先级",{"2":{"184":1}}],["我们可以为接口提供默认实现的方法了",{"2":{"64":1}}],["我们分析一下上面的代码为什么避免了死锁的发生",{"2":{"150":1}}],["我们对线程",{"2":{"150":1}}],["我们只要破坏产生死锁的四个条件中的其中一个就可以了",{"2":{"150":1}}],["我们的业务线程是在",{"2":{"106":1}}],["我们已经看到",{"2":{"99":1}}],["我们已经知道了一个方法不能修改一个基本数据类型的参数",{"2":{"99":1}}],["我们以",{"2":{"95":1}}],["我们为什么要使用内部类呢",{"2":{"86":1}}],["我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象",{"2":{"61":1}}],["我们会用就可以了",{"2":{"59":1}}],["我建议您选择oracle",{"2":{"42":1}}],["你却使用异常处理",{"2":{"326":1}}],["你将会丢失堆栈跟踪和原始异常的消息",{"2":{"325":1}}],["你不需要提供很多额外的信息",{"2":{"320":1}}],["你的虚拟机ip",{"2":{"448":1}}],["你的方法的调用者能够更好的处理异常并且避免额外的检查",{"2":{"318":1}}],["你的同事或者几个月之后的你",{"2":{"318":1}}],["你抛出的异常越明确越好",{"2":{"318":1}}],["你应该把清理工作的代码放到",{"2":{"315":1}}],["你并没有关闭资源",{"2":{"315":1}}],["你自己也可能会抛出一个异常",{"2":{"315":1}}],["你加上catch编译器也觉得无可厚非",{"2":{"309":1}}],["你知道怎么创建线程池吗",{"0":{"263":1}}],["你可以在",{"2":{"322":1}}],["你可以在下面的代码片断中看到这样一个",{"2":{"321":1}}],["你可以使用这个语法",{"2":{"317":1}}],["你可以确保你清理了所有打开的资源",{"2":{"316":1}}],["你可以选择这个策略",{"2":{"265":1}}],["你可以按下",{"2":{"186":1}}],["你可以通过命令",{"2":{"186":1}}],["你如何在",{"0":{"186":1}}],["你对线程优先级的理解是什么",{"0":{"184":1}}],["你一个线程放弃锁的时候",{"2":{"166":1}}],["你是如何调用",{"0":{"165":1}}],["你",{"2":{"117":1}}],["你好",{"2":{"117":1}}],["你重写过",{"2":{"95":1}}],["你要依赖的抽象是中国人",{"2":{"62":1}}],["你只需抽象出一个类",{"2":{"59":1}}],["你需要一步一步的分析",{"2":{"59":1}}],["更换key和value的序列化器",{"2":{"609":1}}],["更服务列表",{"0":{"485":1}}],["更新实例的最后一次心跳时间",{"2":{"503":1}}],["更新实例列表",{"2":{"491":1}}],["更新服务列表",{"2":{"490":2}}],["更新本地实例列表",{"0":{"488":1},"1":{"489":1,"490":1,"491":1}}],["更新最近一次请求的可执行时间",{"2":{"439":1}}],["更新上一次的请求的执行时间",{"2":{"439":1}}],["更新操作时提供",{"2":{"271":1}}],["更为简洁",{"2":{"377":1}}],["更为严格的说法其实是",{"2":{"309":1}}],["更推荐使用",{"2":{"352":2}}],["更占内存",{"2":{"352":1}}],["更不允许抛出exception或者throwable",{"2":{"330":1}}],["更容易被理解",{"2":{"318":1}}],["更加复杂和强大",{"2":{"278":1}}],["更加易于维护",{"2":{"59":1}}],["更严重的是可能导致业务逻辑出现问题",{"2":{"249":1}}],["更多更灵活的特性",{"2":{"208":1}}],["更稳定",{"2":{"42":1}}],["易产生npe",{"2":{"330":1}}],["易维护",{"2":{"59":1}}],["易扩展",{"2":{"59":2}}],["易复用",{"2":{"59":2}}],["性能高",{"2":{"445":1}}],["性能较悲观锁有很大的提高",{"2":{"222":1}}],["性能得到提升",{"2":{"137":1}}],["性能",{"2":{"128":1,"129":1,"353":1}}],["性能比较好",{"2":{"484":1}}],["性能比直接的java代码要慢很多",{"2":{"110":1}}],["性能比面向过程低",{"2":{"59":1}}],["性能比面向对象高",{"2":{"59":1}}],["性能瓶颈",{"2":{"110":1,"649":1}}],["性能是最重要的因素",{"2":{"59":1}}],["嵌入式开发",{"2":{"59":1}}],["嵌入浏览器这点跟flash的小游戏类似",{"2":{"40":1}}],["开启redis集群",{"2":{"671":1}}],["开启混合持久化",{"2":{"647":1}}],["开启事务",{"2":{"620":2,"622":1}}],["开启守护线程模式",{"2":{"589":1}}],["开启线程任务",{"2":{"514":1}}],["开启定时更新服务列表的功能",{"2":{"511":1}}],["开启临时实例的心跳监测任务",{"2":{"505":1}}],["开启心跳检测的任务",{"2":{"504":1}}],["开发人员自己电脑上的",{"2":{"525":1}}],["开发",{"2":{"328":1}}],["开发者很有自信不会抛出异常",{"2":{"323":1}}],["开发手册中明确规范的创建线程池的方式",{"2":{"263":1}}],["开发都与反射机制有关",{"2":{"111":1}}],["开头的包",{"2":{"103":1}}],["开放封闭原则ocp",{"2":{"62":1}}],["开销比较大",{"2":{"59":1}}],["开始健康检测",{"2":{"505":1}}],["开始创建新服务",{"2":{"505":1}}],["开始交给service类处理这次心跳请求",{"2":{"502":1}}],["开始处理心跳结果",{"2":{"502":1}}],["开始集群同步",{"2":{"487":1}}],["开始注册服务",{"2":{"479":1}}],["开始执行slotchain中的每一个slot",{"2":{"425":1}}],["开始执行的时候",{"2":{"165":1}}],["开始初始化",{"2":{"423":1}}],["开始引入了自动装箱",{"2":{"132":1}}],["开始",{"2":{"46":2,"223":1}}],["开始向下搜索",{"2":{"22":1}}],["xiaowang",{"2":{"606":1}}],["xiaoming",{"2":{"595":1,"598":1,"609":1,"622":1}}],["xiaoshan",{"2":{"580":1}}],["x等于1",{"2":{"330":1}}],["xyz",{"0":{"123":1},"2":{"123":1,"320":1,"324":3}}],["xml文件",{"2":{"522":1}}],["xml\\t\\t",{"2":{"409":1,"448":2}}],["xml",{"2":{"111":2,"403":1,"417":1,"448":1,"465":1,"595":1,"601":1,"604":1,"696":1}}],["x",{"2":{"99":5,"330":1,"342":1,"382":1,"410":1,"457":2}}],["x26",{"2":{"57":6,"371":10,"372":6,"389":5,"418":2,"430":4,"431":4,"438":2,"441":2,"485":4,"489":2,"503":2,"505":4,"517":4,"558":2,"608":2}}],["x3c",{"2":{"57":4,"85":1,"152":4,"245":4,"266":2,"342":3,"346":3,"347":1,"351":2,"355":2,"356":4,"360":2,"364":2,"371":4,"372":17,"389":4,"403":14,"409":7,"417":7,"418":1,"423":3,"425":1,"427":2,"428":2,"429":1,"430":3,"435":3,"437":10,"438":10,"439":4,"440":1,"441":1,"442":2,"448":15,"465":7,"478":1,"480":2,"484":2,"485":10,"489":2,"490":2,"491":17,"492":1,"500":4,"503":1,"504":2,"505":7,"510":4,"511":1,"512":2,"595":26,"596":1,"598":7,"601":8,"602":2,"604":6,"611":7,"613":2,"680":1,"692":1,"694":1,"696":11,"704":1,"714":1}}],["xxx",{"2":{"606":1}}],["xxx的名字",{"2":{"465":1}}],["xx县",{"2":{"62":1}}],["xx市",{"2":{"62":1}}],["xx",{"2":{"10":1,"31":1}}],["ignore",{"2":{"418":1,"499":1,"505":1,"680":1}}],["ip等信息封装为一个pushclient对象",{"2":{"518":1}}],["ipmap",{"2":{"491":5}}],["iplist",{"2":{"484":1}}],["ips",{"2":{"484":4,"485":6,"491":7,"505":3}}],["ip的hash",{"2":{"465":1}}],["ip不同",{"2":{"407":1}}],["ip",{"2":{"407":1,"465":1,"475":1,"479":1,"480":2,"485":3,"491":14,"500":1,"502":6,"503":4,"504":2,"505":2,"517":1,"671":1}}],["item",{"2":{"409":2}}],["items",{"2":{"407":5,"409":1}}],["iteration",{"2":{"391":1}}],["iterator线程可以使用原来老的数据",{"2":{"241":1}}],["iterator",{"0":{"345":1,"346":1,"348":1},"2":{"241":1,"345":1,"346":4,"347":3,"348":3,"349":6}}],["it",{"2":{"346":3,"347":3,"418":1,"564":1,"629":1,"656":1}}],["illegalstateexception",{"2":{"418":1}}],["illegalargumentexception",{"2":{"318":1,"321":3,"485":1}}],["illegalaccesserror",{"2":{"313":1}}],["illegalthreadstateexception",{"2":{"146":1}}],["ischeck",{"2":{"517":4}}],["isnotempty",{"2":{"511":1}}],["isnotblank",{"2":{"502":2}}],["isfailoverswitch",{"2":{"511":2}}],["isfailfast",{"2":{"479":1}}],["isuseipport4check",{"2":{"505":1}}],["ishealthcheckenabled",{"2":{"505":1}}],["ishealthy",{"2":{"480":1,"491":1,"503":1,"504":1}}],["ismarked",{"2":{"503":1,"504":2}}],["islightbeatenabled",{"2":{"502":1}}],["isstopped",{"2":{"499":1}}],["isdebugenabled",{"2":{"478":1,"490":1,"492":1,"500":1,"503":2,"517":1}}],["isexpireinstance",{"2":{"504":1}}],["isephemeral",{"2":{"480":2,"484":2,"496":1,"502":1}}],["isenabled",{"2":{"478":1,"480":1}}],["isempty",{"2":{"422":1,"430":2,"440":1,"479":1,"491":1,"505":1,"510":1,"514":1,"692":1,"694":2,"696":1,"704":1,"708":1,"713":1}}],["iswindowdeprecated",{"2":{"438":3}}],["isbroken",{"2":{"274":1}}],["isterminated",{"2":{"266":1}}],["isinterrupted",{"0":{"172":1},"2":{"172":1}}],["is",{"2":{"119":1,"152":5,"431":1,"439":1,"479":1,"484":1,"491":1,"514":1}}],["isp",{"2":{"62":1}}],["image",{"2":{"563":2,"572":1,"573":1,"615":1,"655":3,"660":3,"670":6,"688":1}}],["img",{"2":{"201":1}}],["impl",{"2":{"597":1,"598":1}}],["implements",{"2":{"152":3,"266":1,"356":1}}],["import",{"0":{"103":1},"2":{"266":2,"597":3,"598":11,"606":5,"611":12,"617":4,"675":4,"704":5}}],["immutable",{"2":{"118":1,"217":2}}],["idle",{"2":{"605":2,"617":2}}],["idx",{"2":{"437":3}}],["idea跳过测试并打包",{"2":{"560":1}}],["ide",{"2":{"321":1}}],["id",{"2":{"112":1,"186":1,"203":2,"409":5,"449":1,"474":1,"480":2,"483":2,"484":1,"494":1,"500":1,"502":2,"512":1,"517":2,"596":1,"598":1,"611":1}}],["i0流的40多个类都是从如下4个抽象类基类中派生出来的",{"2":{"105":1}}],["ioutils",{"2":{"514":1}}],["ioexception",{"2":{"287":1,"296":1,"297":1,"298":4,"300":3,"301":2,"315":1,"316":1,"317":1,"356":1}}],["io操作本身是同步的",{"2":{"106":1}}],["io流异常",{"2":{"287":1}}],["io流共涉及40多个类",{"2":{"105":1}}],["io流",{"0":{"104":1},"1":{"105":1,"106":1,"107":1}}],["io",{"0":{"105":1},"2":{"102":3,"106":13,"161":1,"356":3,"570":1,"572":2,"573":1,"615":1,"655":3,"660":3,"670":6,"716":1}}],["if",{"0":{"165":1,"196":1},"2":{"57":2,"94":4,"196":3,"200":2,"208":1,"214":3,"300":1,"316":1,"330":1,"356":1,"371":10,"372":14,"389":5,"401":1,"418":4,"422":1,"423":4,"425":1,"427":2,"428":3,"429":2,"430":8,"431":9,"432":1,"435":5,"437":7,"438":6,"439":6,"440":2,"441":4,"442":8,"478":2,"479":2,"480":1,"484":2,"485":5,"489":4,"490":4,"491":7,"492":4,"496":1,"498":1,"499":5,"500":2,"502":8,"503":5,"504":6,"505":11,"510":2,"511":6,"514":3,"515":4,"517":4,"608":8,"692":2,"694":2,"696":5,"704":1,"708":2,"713":1}}],["i=0",{"2":{"356":1}}],["i=",{"2":{"57":1}}],["i++",{"2":{"57":2,"152":1,"245":2,"266":1,"355":1,"356":1,"438":1,"602":2,"613":1,"692":1,"694":1,"696":2,"704":1}}],["i",{"0":{"122":2},"2":{"57":8,"85":2,"106":5,"122":2,"152":2,"159":2,"245":4,"266":3,"347":3,"355":3,"356":2,"371":10,"389":2,"438":3,"602":8,"613":4,"692":11,"694":8,"696":17,"704":2}}],["inf",{"2":{"584":3}}],["inf代表最小值",{"2":{"584":1}}],["info",{"2":{"401":1,"425":1,"479":1,"480":1,"490":1,"491":4,"498":1,"503":1,"504":1,"505":2,"514":1,"656":1}}],["info请求头中",{"2":{"401":1}}],["incrby",{"2":{"580":1}}],["incr",{"0":{"684":1,"687":1},"2":{"580":2,"643":10}}],["increment",{"2":{"622":1}}],["incrementandget",{"2":{"489":1,"505":1}}],["increasethreadnum",{"2":{"429":3}}],["inetsocketaddress",{"2":{"505":1,"514":1,"517":1,"518":1}}],["index",{"2":{"582":1}}],["index表示索引",{"2":{"582":1}}],["indexoutofboundsexception等等",{"2":{"330":1}}],["indexoutofboundsexception",{"2":{"312":1,"313":1}}],["indexof方法判断",{"2":{"430":1}}],["indexof等公共方法",{"2":{"128":1}}],["indexof",{"2":{"126":1,"430":1}}],["indicates",{"2":{"438":1}}],["invokealltcpsupersensetask",{"2":{"505":1}}],["invokeresourcewithsentinel",{"2":{"418":1}}],["invalid",{"2":{"484":1}}],["inversion",{"2":{"62":1}}],["input",{"2":{"319":1,"324":3,"325":1,"517":1}}],["inputstream",{"2":{"105":1,"315":4,"316":5,"317":2}}],["inspect",{"2":{"660":1}}],["install",{"2":{"572":2}}],["instantiationexception",{"2":{"313":1}}],["instantiationerror",{"2":{"313":1}}],["instancechangenotifier监听变更事件",{"2":{"513":1}}],["instancecontroller中的dosrvipxt",{"2":{"518":1}}],["instancecontroller提供了一个接口",{"2":{"501":1}}],["instancecontroller",{"0":{"483":1,"502":1}}],["instanceheartbeattimeoutevent",{"2":{"504":1}}],["instance生成全新的instanceid",{"2":{"485":1}}],["instancemap",{"2":{"485":9}}],["instancelist",{"2":{"484":2}}],["instance>>",{"2":{"491":2}}],["instance>",{"2":{"484":1,"485":5,"491":8,"503":1,"504":1,"505":1,"510":3}}],["instanceschangeevent",{"2":{"515":2}}],["instances>",{"2":{"489":1}}],["instances",{"2":{"484":6,"485":1,"486":1,"489":2,"491":3,"503":2,"504":5}}],["instanceregisteredevent",{"2":{"478":1}}],["instancepreregisteredevent",{"2":{"478":1}}],["instanceof",{"2":{"371":1,"372":1,"478":1}}],["instance",{"2":{"214":6,"474":2,"475":1,"479":5,"480":19,"483":3,"484":11,"485":25,"487":1,"491":22,"495":1,"496":6,"499":13,"500":2,"502":18,"503":8,"504":15,"505":5,"507":1,"512":1,"517":3}}],["insert",{"2":{"128":1}}],["in",{"2":{"89":2,"324":1,"356":1,"372":1,"422":1,"423":1,"425":1,"429":1,"431":1,"439":1,"484":2,"704":1}}],["innermethod",{"2":{"88":1}}],["inner",{"2":{"82":2,"83":5,"84":16,"88":1,"89":3}}],["int++并不是一个原子操作",{"2":{"270":1}}],["interval",{"2":{"499":3,"502":3,"511":2}}],["intervalinsecond",{"2":{"437":1}}],["intervalinms",{"2":{"437":5,"438":1}}],["internal",{"2":{"425":1,"475":1,"495":1,"507":1}}],["internalenter",{"2":{"425":1}}],["internalcontextutil",{"2":{"425":1}}],["interrupt",{"2":{"172":1}}],["interrupted",{"0":{"172":1},"2":{"172":2}}],["interruptedexception",{"2":{"148":2,"150":1,"152":1,"163":1,"170":1,"266":1,"439":1,"511":1,"708":1}}],["interface",{"0":{"220":1},"2":{"2":3,"45":1,"62":1,"85":1,"405":1}}],["integer等包装类的特性能够保证hash值的不可更改性和计算准确性",{"2":{"381":1}}],["integer这样的包装类适合作为k",{"0":{"381":1}}],["integer对象",{"2":{"330":1}}],["integer>",{"2":{"152":3,"245":2,"347":1}}],["integer",{"0":{"132":1,"133":2},"2":{"132":2,"133":7,"152":1,"245":2,"262":1,"347":2,"372":2,"502":1,"514":1,"517":1,"643":5}}],["int型",{"2":{"48":1}}],["int",{"0":{"132":1},"2":{"45":1,"46":1,"48":1,"57":4,"82":1,"83":2,"84":4,"85":2,"88":1,"89":3,"99":7,"112":1,"117":1,"132":2,"133":1,"152":1,"184":1,"230":9,"245":2,"266":4,"270":2,"271":1,"276":2,"278":1,"310":4,"330":3,"355":1,"356":2,"371":5,"372":6,"377":2,"418":1,"425":4,"426":1,"427":1,"428":1,"429":2,"430":3,"431":2,"432":1,"435":10,"437":7,"438":6,"439":1,"440":1,"475":1,"490":1,"499":1,"502":1,"503":1,"505":1,"512":1,"517":2,"596":4,"597":2,"602":2,"613":1,"692":2,"694":1,"696":3,"704":1}}],["initdb",{"2":{"560":1,"563":1}}],["inited",{"2":{"505":2}}],["initialized",{"2":{"514":1,"608":2}}],["initial",{"2":{"372":5,"376":1}}],["initialvalue",{"2":{"245":1}}],["initcause",{"2":{"297":1,"300":1}}],["init",{"2":{"8":1,"485":1,"491":1,"504":2,"505":8,"514":1,"530":1,"540":1,"545":1,"560":1,"563":1}}],["继续判断open时间窗是否结束",{"2":{"441":1}}],["继续进入updateipaddresses方法",{"2":{"485":1}}],["继续进入performchecking方法",{"2":{"440":1}}],["继续进入env",{"2":{"425":1}}],["继续下一个slot",{"2":{"428":1,"440":1}}],["继续",{"2":{"425":1}}],["继续走return",{"2":{"310":1}}],["继续尝试",{"2":{"271":1}}],["继续后余动作",{"2":{"230":1}}],["继续满",{"2":{"181":1}}],["继续添加任务到阻塞队列中等待执行",{"2":{"181":1}}],["继续执行下次循环",{"2":{"57":1}}],["继承redisaccessor类",{"2":{"608":1}}],["继承自",{"2":{"339":1}}],["继承与",{"2":{"339":1}}],["继承examplea",{"0":{"311":1}}],["继承是多态的前提",{"2":{"60":1}}],["继承是使用已存在的类的定义作为基础建立新类的技术",{"2":{"60":1}}],["继承和多态",{"2":{"41":1}}],["继承",{"0":{"311":1},"2":{"37":1,"59":1,"60":3,"61":2,"152":2}}],["跳出循环",{"2":{"371":2}}],["跳出多重循环",{"2":{"57":1}}],["跳出本次循环",{"2":{"57":1}}],["跳出总上一层循环",{"2":{"57":1}}],["跳转",{"2":{"3":1}}],["赋值的话",{"2":{"56":1}}],["赋值给浮点型",{"2":{"47":1}}],["被纳入版本控制",{"2":{"533":1}}],["被限流或降级",{"2":{"417":1}}],["被限流或被降级",{"2":{"416":1}}],["被保护的业务逻辑",{"2":{"416":1}}],["被抑制的异常会由",{"2":{"301":1}}],["被抛出",{"2":{"281":1}}],["被创建后集合再发生改变就不再是抛出concurrentmodificationexception",{"2":{"241":1}}],["被定义在",{"0":{"166":1}}],["被线程执行后",{"2":{"156":1}}],["被缓存下来",{"2":{"127":1}}],["被初始化",{"2":{"99":1}}],["被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法",{"2":{"61":1}}],["被static修饰的变量或者方法是优先于对象存在的",{"2":{"56":1}}],["被static修饰的变量或者方法是独立于该类的任何对象",{"2":{"56":1}}],["被final修饰不可变的是变量的引用",{"2":{"53":1}}],["被final修饰的变量不可以被改变",{"2":{"53":1}}],["被final修饰的方法不可以被重写",{"2":{"53":1}}],["被final修饰的类不可以被继承",{"2":{"53":1}}],["然而在使用之前",{"2":{"380":1}}],["然而",{"2":{"166":1,"386":1}}],["然而随着时间的推移",{"2":{"103":1}}],["然而super是一个java关键字",{"2":{"55":1}}],["然后对位数组长度进行取模运算得到一个索引",{"2":{"695":1}}],["然后对16384取模",{"2":{"668":1}}],["然后对端边界以外的内存进行回收",{"2":{"28":1}}],["然后通知两个从节点说主节点挂了",{"2":{"658":1}}],["然后通过此thread类调用方法run",{"2":{"154":1}}],["然后通过thread",{"2":{"148":1}}],["然后更新拷贝的实例列表",{"2":{"494":1}}],["然后是group分组",{"2":{"494":1}}],["然后把新的实例信息与旧的做对比",{"2":{"485":1}}],["然后运行nacos这个main函数",{"2":{"473":1}}],["然后填写应用信息",{"2":{"473":1}}],["然后新建一个springbootapplication",{"2":{"473":1}}],["然后打开cmd窗口",{"2":{"472":1}}],["然后打开sentinel控制台",{"2":{"417":1}}],["然后选择maven模块",{"2":{"468":1}}],["然后点击导入module",{"2":{"468":1}}],["然后返回最新的实例列表",{"2":{"485":1}}],["然后返回即可",{"2":{"437":1}}],["然后返回旧的v",{"2":{"360":1}}],["然后再做限流",{"2":{"435":1}}],["然后再把已使用的内存空间一次清理掉",{"2":{"25":1}}],["然后基于chain",{"2":{"425":1}}],["然后配置sentinel地址",{"2":{"417":1}}],["然后给每一段数据配一把锁",{"2":{"389":1}}],["然后将更新后的数据封装到instances对象中",{"2":{"484":1}}],["然后将这个bin目录配置到你的环境变量path中",{"2":{"471":1}}],["然后将冲突的key的对象放入链表中",{"2":{"366":1}}],["然后将指针指向新的string",{"2":{"128":1,"129":1}}],["然后遍历",{"2":{"356":1}}],["然后依次读取每一个位置的元素",{"2":{"349":1}}],["然后添加了一些额外的功能",{"2":{"348":1}}],["然后如果在",{"2":{"310":1}}],["然后当前线程被阻塞",{"2":{"278":1}}],["然后这一组线程再同时执行",{"2":{"274":1}}],["然后这两个线程就会陷入互相等待的状态",{"2":{"148":1}}],["然后解析线程不断从队列取数据解析",{"2":{"251":1}}],["然后主调用线程就会从await",{"2":{"230":1}}],["然后",{"2":{"223":2,"468":1}}],["然后消费者通知生产者队列有空间了",{"2":{"177":1}}],["然后等待消费者消费了商品",{"2":{"177":1}}],["然后参与锁的竞争",{"2":{"175":1}}],["然后自动执行",{"2":{"155":1}}],["然后cpu再调度其它线程",{"2":{"154":1}}],["然后线程",{"2":{"150":2}}],["然后获取到",{"2":{"148":1}}],["然后按下shift+p",{"2":{"147":2}}],["然后反射出string对象中的value属性",{"2":{"120":1}}],["然后封装",{"2":{"59":1}}],["然后在每一个分段上都用lock锁进行保护",{"2":{"387":1}}],["然后在使用线程的协作和线程同步可以实现生产者",{"2":{"251":1}}],["然后在线程内使用的时候",{"2":{"176":1}}],["然后在特定的机器上运行",{"2":{"38":1}}],["然后在堆区创建一个",{"2":{"2":1}}],["然后由解释器来将虚拟机代码转换为特定系统的机器码执行",{"2":{"38":1}}],["然后直接清除掉端边界以外的内存",{"2":{"25":1}}],["然后进行清除回收",{"2":{"25":1,"26":1}}],["然后内存空间初始化操作",{"2":{"8":1}}],["均匀性",{"2":{"384":1}}],["均不可以在static环境中使用",{"2":{"55":1}}],["均需放在构造方法内第一行",{"2":{"55":1}}],["应该为每个redis主节点配置一个从节点",{"2":{"668":1}}],["应该怎么办呢",{"0":{"382":1}}],["应该捕获那些知道如何处理的异常",{"2":{"291":1,"296":1}}],["应对其进行处理",{"2":{"303":1}}],["应使之成为一个",{"2":{"179":1}}],["应使用有业务含义的自定义异常",{"2":{"330":1}}],["应使用",{"2":{"106":1}}],["应使用this来指明当前对象",{"2":{"55":1}}],["应用就存在内存泄露的风险",{"2":{"245":1,"246":1}}],["应用还需要在finalization做什么呢",{"2":{"193":1}}],["应用",{"2":{"106":1}}],["应用程序也不应对这类错误进行捕获",{"2":{"303":1}}],["应用程序不应该去处理此类错误",{"2":{"284":1}}],["应用程序的主类不一定要求是public类",{"2":{"39":1}}],["应用程序和小程序的主类有何不同",{"0":{"39":1}}],["基础镜像",{"2":{"558":1}}],["基于redis的setnx命令",{"2":{"686":1}}],["基于日志形式",{"2":{"625":1}}],["基于快照形式",{"2":{"625":1}}],["基于docker安装",{"0":{"573":1}}],["基于tar",{"0":{"572":1}}],["基于threadlocal",{"2":{"420":1}}],["基于serverproxy发起远程调用",{"2":{"511":1}}],["基于atomicboolean",{"2":{"478":1}}],["基于cas修改状态",{"2":{"441":1}}],["基于cas写入数组",{"2":{"437":1}}],["基于漏桶算法",{"2":{"435":1,"438":1,"439":1}}],["基于滑动时间窗口算法",{"2":{"435":2,"438":2,"439":2}}],["基于限流模式判断要统计的节点",{"2":{"435":1}}],["基于注解标记资源",{"0":{"418":1}}],["基于feign的远程调用",{"2":{"417":1}}],["基于你的collection的大小",{"2":{"386":1}}],["基于计数器",{"2":{"349":1}}],["基于",{"2":{"339":1,"366":1}}],["基于通道的i",{"2":{"106":1}}],["基本思路是",{"2":{"513":1}}],["基本逻辑就是先从本地缓存读",{"2":{"511":1}}],["基本判断流程是这样的",{"2":{"433":1}}],["基本被淘汰",{"2":{"385":1}}],["基本上都是直接调用底层",{"2":{"359":1}}],["基本上很少会直接使用到反射机制",{"2":{"111":1}}],["基本类型的包装类",{"2":{"217":1}}],["基本数据类型中用来描述文本数据的是",{"2":{"117":1}}],["基本数据类型",{"2":{"45":1,"94":1}}],["基本数学函数",{"2":{"36":1}}],["基类与派生类中有相同成员定义时如",{"2":{"55":1}}],["由操作系统来决定",{"2":{"635":1,"637":1,"641":1}}],["由二维表的形式来存储数据",{"2":{"570":1}}],["由",{"2":{"511":1}}],["由nacosproxy的registerservice方法",{"2":{"480":1}}],["由源码可以看出",{"2":{"360":1}}],["由此可以看出如果",{"2":{"276":1}}],["由应用程序提供多个线程执行控制",{"2":{"144":1}}],["由一个线程按顺序执行",{"2":{"140":1}}],["由垃圾回收器调用finalize",{"2":{"54":1}}],["由于工作区中文件状态的不同",{"2":{"535":1}}],["由于只能通过1个return返回",{"2":{"310":1}}],["由于实际使用中可能没法保证",{"2":{"243":1}}],["由于写操作的时候",{"2":{"243":1}}],["由于锁会被获取n次",{"2":{"232":1}}],["由于某些条件没有满足",{"2":{"226":1}}],["由于所有的这些方法都需要线程持有对象的锁",{"2":{"167":1}}],["由于线程被无限期地阻塞",{"2":{"148":1}}],["由于竞争资源或者由于彼此通信而造成的一种阻塞的现象",{"2":{"148":1}}],["由于任务",{"2":{"140":1}}],["由于这种误解具有一定的普遍性",{"2":{"99":1}}],["由于静态方法可以不通过对象进行调用",{"2":{"77":1}}],["由于面向对象有封装",{"2":{"59":1}}],["由于",{"2":{"48":1,"157":1}}],["由于字节码并不专对一种特定的机器",{"2":{"38":1}}],["由于有这个垃圾回收机制",{"2":{"19":1}}],["由于对象的访问在java中非常频繁",{"2":{"13":1}}],["属性值",{"2":{"688":1}}],["属性",{"2":{"688":1}}],["属性不存在异常",{"2":{"313":1}}],["属性得到的",{"2":{"125":1}}],["属性和方法",{"2":{"53":1}}],["属于ap模式的一致性策略",{"2":{"492":1}}],["属于线程自身所有",{"2":{"245":1,"246":1}}],["属于抢占式",{"2":{"206":1}}],["属于类的",{"2":{"74":1}}],["属于object类的一个方法",{"2":{"54":1,"307":1}}],["属于下转型",{"2":{"47":1}}],["||",{"2":{"51":1,"371":4,"389":1,"430":1,"435":1,"438":1,"440":1,"510":1,"514":1,"515":2}}],["|",{"2":{"51":1,"298":2,"505":1}}],["逻辑",{"2":{"299":1,"318":2,"319":1,"330":1,"438":1}}],["逻辑或运算符",{"2":{"51":1}}],["逻辑与跟短路与的差别是非常巨大的",{"2":{"51":1}}],["逻辑与",{"2":{"51":1}}],["虽然redis有提供事务的功能",{"2":{"621":1}}],["虽然在jdk1",{"2":{"388":1}}],["虽然copyonwritearraylist",{"2":{"243":1}}],["虽然volatile只能保证可见性不能保证原子性",{"2":{"213":1}}],["虽然",{"2":{"106":1,"286":1}}],["虽然二者都要求运算符左右两端的布尔值都是true",{"2":{"51":1}}],["虽然java的类不可以多继承",{"2":{"41":1}}],["什么时候删除key",{"0":{"679":1}}],["什么时候进行垃圾回收",{"0":{"191":1}}],["什么效果",{"2":{"525":1}}],["什么东西",{"2":{"525":1}}],["什么都不做",{"2":{"442":1}}],["什么都不用做",{"2":{"193":1}}],["什么情况会抛出nosuchmethoderror呢",{"2":{"330":1}}],["什么",{"2":{"281":1}}],["什么叫线程安全",{"0":{"182":1}}],["什么也不写",{"2":{"50":1}}],["什么是红锁",{"2":{"714":1}}],["什么是git",{"0":{"522":1}}],["什么是protobuf",{"0":{"470":1}}],["什么是rabbitmq",{"0":{"444":1},"1":{"445":1,"446":1}}],["什么是context呢",{"2":{"420":1}}],["什么是context",{"0":{"420":1}}],["什么是concurrenthashmap",{"0":{"237":1}}],["什么是哈希冲突",{"0":{"375":1}}],["什么是哈希",{"0":{"374":1}}],["什么是集合",{"0":{"333":1}}],["什么是原子操作",{"0":{"270":1}}],["什么是阻塞队列",{"0":{"251":1}}],["什么是阻塞式方法",{"0":{"173":1}}],["什么是并发容器的实现",{"0":{"239":1}}],["什么是可重入锁",{"0":{"232":1}}],["什么是死锁",{"0":{"224":1}}],["什么是不可变对象",{"0":{"217":1}}],["什么是内存屏障",{"2":{"214":1}}],["什么是内部类",{"0":{"80":1}}],["什么是自旋",{"0":{"202":1}}],["什么是",{"0":{"156":1,"157":1,"222":1,"257":1}}],["什么是线程间交换数据的工具exchanger",{"0":{"277":1}}],["什么是线程组",{"0":{"260":1}}],["什么是线程池",{"0":{"254":1}}],["什么是线程局部变量",{"0":{"246":1}}],["什么是线程同步和线程互斥",{"0":{"179":1}}],["什么是线程调度器",{"0":{"162":1}}],["什么是线程死锁",{"0":{"148":1}}],["什么是线程和进程",{"0":{"143":1}}],["什么是上下文切换",{"0":{"145":1}}],["什么是多线程",{"0":{"141":1}}],["什么是多态机制",{"0":{"61":1}}],["什么是字符串常量池",{"0":{"116":1}}],["什么是字节码",{"0":{"38":1}}],["什么是反射机制",{"0":{"109":1}}],["什么是方法的返回值",{"0":{"78":1}}],["什么是java程序的主类",{"0":{"39":1}}],["标准资源都继承了这个接口",{"2":{"317":1}}],["标准码",{"2":{"49":1}}],["标识了可能抛出的异常列表",{"2":{"306":1}}],["标示符就不能起到之前的保护作用了",{"2":{"211":1}}],["标记实例为不健康",{"2":{"504":1}}],["标记资源",{"2":{"417":1}}],["标记和清理都是单线程",{"2":{"30":1}}],["标记出可以回收的对象",{"2":{"26":1}}],["标记阶段",{"2":{"26":1}}],["标记无用对象",{"2":{"25":2,"26":1}}],["标记垃圾回收",{"2":{"19":1}}],["标记",{"0":{"26":1,"28":1},"2":{"5":2,"25":2,"26":4,"28":2,"30":5,"57":1}}],["uuid",{"2":{"688":1}}],["udp端口到",{"2":{"517":1}}],["udp端口",{"2":{"517":1}}],["udp",{"2":{"514":2}}],["udpsocket",{"2":{"514":3}}],["udp客户端",{"2":{"514":1}}],["udpport",{"2":{"512":3,"514":3,"517":7,"518":1}}],["updatingmap",{"2":{"511":4}}],["updated",{"2":{"491":1}}],["updateips方法",{"2":{"491":1}}],["updateips",{"2":{"491":5}}],["updateipaddresses",{"2":{"485":2}}],["updatelock",{"2":{"437":2}}],["updateservice",{"2":{"511":1}}],["updateservicenow",{"2":{"511":2}}],["updates",{"2":{"271":1}}],["update",{"2":{"230":2,"485":3,"511":3}}],["up",{"2":{"434":2,"435":2,"564":1,"573":1,"629":1,"642":1,"655":1,"661":1}}],["uri",{"2":{"409":5}}],["url",{"2":{"409":1}}],["usr",{"2":{"558":1,"560":1,"563":1,"572":2,"615":2,"660":6,"670":12}}],["using",{"2":{"372":1,"425":1}}],["usesingleserver",{"2":{"696":2}}],["usespecifiedurl",{"2":{"517":1}}],["useclusterservers",{"2":{"696":1}}],["use",{"2":{"271":1,"315":1,"316":1,"317":1,"635":1,"641":1,"647":1}}],["username",{"2":{"448":1,"609":5}}],["userclient",{"2":{"417":1}}],["usercontext",{"2":{"401":1}}],["users",{"2":{"409":1}}],["userid",{"2":{"401":3}}],["user",{"2":{"146":1,"401":1,"409":2,"417":3,"449":1,"467":1,"528":2,"611":2}}],["usertlab参数来设定虚拟机是否使用tlab",{"2":{"10":1}}],["used",{"2":{"119":1,"438":1}}],["utf",{"2":{"301":1,"514":1}}],["utilsandcommons",{"2":{"485":3,"491":1,"502":1,"503":1}}],["utilandcoms",{"2":{"480":1,"500":1,"512":1}}],["util",{"2":{"102":1,"183":1,"210":1,"221":1,"222":1,"225":1,"229":1,"266":4,"270":2,"363":1,"393":1,"394":1,"598":4,"606":1,"611":5,"704":1}}],["unrelated",{"2":{"544":2}}],["unmodified",{"2":{"533":1}}],["unmodifiablecollection",{"2":{"342":2}}],["untracked",{"2":{"533":1}}],["unknown",{"2":{"499":1}}],["unknownex",{"2":{"499":3}}],["unknownhostexception",{"2":{"298":2}}],["unexpected",{"2":{"425":1}}],["unless",{"2":{"425":1}}],["unlock",{"2":{"183":1,"207":1,"423":1,"437":1,"713":1}}],["unchecked",{"2":{"288":1,"372":1}}],["uncaughtexception",{"2":{"187":1}}],["uncaughtexceptionhandler",{"2":{"187":1}}],["uncaughtexceptionhandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口",{"2":{"187":1}}],["unsupportedoperationexception",{"2":{"230":1,"342":1}}],["unsafe",{"2":{"208":1,"230":1,"271":6}}],["unit",{"2":{"225":1,"264":1,"266":1,"713":1}}],["uniqueinstance",{"2":{"200":14}}],["unix",{"2":{"145":1}}],["unix等一般采用面向过程开发",{"2":{"59":1}}],["unicode",{"2":{"49":1}}],["型整数",{"2":{"276":2}}],["型",{"2":{"48":1}}],["需要输入密码",{"2":{"590":1}}],["需要输入密码后",{"2":{"590":1}}],["需要进行身份认证",{"2":{"543":1}}],["需要修改的实例",{"2":{"515":1}}],["需要修改所有的副本",{"2":{"330":1}}],["需要定时向",{"2":{"480":1}}],["需要定义子类的行为",{"2":{"64":1}}],["需要基于protoc编译为对应的语言",{"2":{"470":1}}],["需要计算",{"2":{"439":1}}],["需要的请求量",{"2":{"438":1}}],["需要的时候从池中获取线程不用自行创建",{"2":{"254":1}}],["需要被覆盖",{"2":{"437":1}}],["需要被回收",{"2":{"22":1}}],["需要判断是否触发阈值",{"2":{"442":1}}],["需要判断",{"2":{"437":1}}],["需要在注解添加扫描参数",{"2":{"404":1}}],["需要重写",{"2":{"395":1}}],["需要遵守自反性",{"2":{"382":1}}],["需要考虑以下几点",{"2":{"380":1}}],["需要考虑线程安全问题",{"2":{"182":1}}],["需要做一次元素复制操作",{"2":{"350":1}}],["需要尽可能精确地描述问题和相关信息",{"2":{"320":1}}],["需要显式地使用",{"2":{"308":1}}],["需要大约5秒钟来执行其任务",{"2":{"266":1}}],["需要拷贝数组",{"2":{"243":1}}],["需要读写的内存位置",{"2":{"221":1}}],["需要自己加锁和释放锁",{"2":{"207":1}}],["需要monitorenter",{"2":{"201":1}}],["需要注意不要试图从散列码计算中排除掉一个对象的关键部分来提高性能",{"2":{"382":1}}],["需要注意jdk",{"2":{"366":1}}],["需要注意",{"2":{"200":1}}],["需要注意的是",{"2":{"195":1,"429":1}}],["需要通过同步来实现线程安全",{"2":{"179":1}}],["需要用户自己去监视线程的状态为并做处理",{"2":{"172":1}}],["需要别的线程调用同一个对象上的",{"2":{"164":1}}],["需要调用futuretask",{"2":{"153":1}}],["需要什么功能直接使用就可以了",{"2":{"59":1}}],["需要强制转换类型才能赋值给",{"2":{"48":1}}],["运算",{"2":{"695":1}}],["运算之后的值与运算",{"2":{"383":1}}],["运算符是短路与运算",{"2":{"51":1}}],["运算符有两种用法",{"2":{"51":1}}],["运算符",{"0":{"51":1}}],["运算结果也是",{"2":{"48":1}}],["运行下面的两个命令",{"2":{"472":1}}],["运行nacos的ip",{"2":{"465":1}}],["运行以上错误代码会报",{"2":{"347":1}}],["运行状态",{"2":{"168":1}}],["运行状态中的线程执行",{"2":{"159":1}}],["运行",{"0":{"473":1},"2":{"159":1,"572":1}}],["运行在后台",{"2":{"146":1}}],["运行在前台",{"2":{"146":1}}],["运行期类型的判断",{"2":{"110":1}}],["运行结果",{"2":{"89":1,"152":1}}],["运行时此行报错",{"2":{"342":1}}],["运行时异常等场景返回null的情况",{"2":{"330":1}}],["运行时异常包括",{"2":{"304":1}}],["运行时异常和一般异常",{"0":{"304":1}}],["运行时异常和编译时异常",{"2":{"285":1}}],["运行时异常",{"0":{"286":1}}],["运行时确定类型",{"2":{"109":1}}],["运行时的多态是面向对象最精髓的东西",{"2":{"60":1}}],["运行时数据区域",{"2":{"2":1}}],["运行时数据区",{"0":{"3":1},"2":{"2":1}}],["运行高效",{"2":{"27":1}}],["运行字节码的工作是由解释器",{"2":{"2":1}}],["还没报数",{"2":{"686":2}}],["还未恢复前",{"2":{"658":1}}],["还未被初始化",{"2":{"200":1}}],["还要考虑到各种网络动荡等问题",{"2":{"710":1}}],["还要进一步做精确判断",{"2":{"430":1}}],["还要给全局计数器",{"2":{"429":1}}],["还多了一个默认的入口节点",{"2":{"419":1}}],["还存储了两个引用",{"2":{"352":1}}],["还会执行吗",{"0":{"310":1}}],["还会降低系统的稳定性",{"2":{"255":1}}],["还包括声明异常和拋出异常",{"2":{"306":1}}],["还是定时更新服务列表",{"2":{"511":1}}],["还是数据大小都比json要好很多",{"2":{"470":1}}],["还是",{"0":{"386":1}}],["还是会编译通过",{"2":{"286":1}}],["还是在主线程里执行",{"2":{"155":1}}],["还提供了显式监视器",{"2":{"180":1}}],["还有io操作的bufferoverflowexception异常",{"2":{"312":1}}],["还有",{"2":{"245":1,"425":1}}],["还有异步和非阻塞式方法在任务完成前就返回",{"2":{"173":1}}],["还有我们日常使用的",{"2":{"111":1}}],["还有一点就是static成员变量的初始化顺序按照定义的顺序进行初始化",{"2":{"75":1}}],["还有用于回收整个java堆的g1收集器",{"2":{"30":1}}],["还可以是字符串",{"2":{"46":1}}],["上锁",{"2":{"713":1}}],["上述加锁操作有没有问题",{"0":{"709":1}}],["上述执行查询的操作是正常的流程",{"2":{"703":1}}],["上述命令的",{"2":{"558":1}}],["上传资料到服务器",{"2":{"560":1}}],["上图配置的含义是每1秒钟生产2个令牌",{"2":{"432":1}}],["上一节我们讲过",{"2":{"439":1}}],["上一节",{"2":{"419":1}}],["上面的节点冗余部署了",{"2":{"706":1}}],["上面的用户名和密码对应的就是我们在码云上注册的用户名和密码",{"2":{"543":1}}],["上面的例子符合产生死锁的四个必要条件",{"2":{"148":1}}],["上面设置的user",{"2":{"528":1}}],["上面提到的问题",{"2":{"377":1}}],["上面例子中",{"2":{"301":1}}],["上进行数据库的操作",{"2":{"245":1}}],["上查找哪个线程cpu利用率最高",{"0":{"147":1}}],["上下文切换对系统来说意味着消耗大量的",{"2":{"145":1}}],["上下文切换通常是计算密集型的",{"2":{"145":1}}],["上下文切换",{"2":{"138":1}}],["上",{"0":{"46":3}}],["上分配",{"2":{"10":1}}],["浮点类型",{"2":{"45":1}}],["数量",{"2":{"437":1,"686":1}}],["数目",{"2":{"414":1}}],["数字格式异常",{"2":{"313":1}}],["数据相对固定",{"2":{"695":1}}],["数据同步的原理",{"0":{"653":1}}],["数据安全",{"2":{"649":1}}],["数据保存的文件名",{"2":{"627":1,"629":1}}],["数据总量不变",{"2":{"619":1}}],["数据缓存",{"0":{"567":1}}],["数据缓存技术",{"0":{"565":1},"1":{"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1,"589":1,"590":1,"591":1,"592":1,"593":1,"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1,"611":1,"612":1,"613":1,"614":1,"615":1,"616":1,"617":1,"618":1,"619":1,"620":1,"621":1,"622":1,"623":1,"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1,"645":1,"646":1,"647":1,"648":1,"649":1,"650":1,"651":1,"652":1,"653":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1,"667":1,"668":1,"669":1,"670":1,"671":1,"672":1,"673":1,"674":1,"675":1,"676":1,"677":1,"678":1,"679":1,"680":1,"681":1,"682":1,"683":1,"684":1,"685":1,"686":1,"687":1,"688":1,"689":1,"690":1,"691":1,"692":1,"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1,"700":1,"701":1,"702":1,"703":1,"704":1,"705":1,"706":1,"707":1,"708":1,"709":1,"710":1,"711":1,"712":1,"713":1,"714":1,"715":1,"716":1,"717":1}}],["数据集",{"2":{"489":1}}],["数据存储等领域的语言无关",{"2":{"470":1}}],["数据存储异常",{"2":{"312":1}}],["数据交换格式",{"2":{"470":1}}],["数据结构基础之双向链表",{"2":{"352":1}}],["数据结构实现",{"2":{"352":1}}],["数据结构",{"2":{"335":1}}],["数据序列化和传输的性能损耗也是问题",{"2":{"330":1}}],["数据库只有1",{"2":{"692":1,"696":1}}],["数据库中也没有的数据",{"2":{"691":1}}],["数据库有",{"2":{"690":1}}],["数据库相关的",{"2":{"585":1}}],["数据库的查询结果可能为null",{"2":{"330":1}}],["数据库连接池",{"2":{"254":1}}],["数据的读取写入必须阻塞在一个线程内等待其完成",{"2":{"106":1}}],["数据类型",{"0":{"44":1},"1":{"45":1,"46":1,"47":1,"48":1}}],["数组里得元素",{"2":{"389":1}}],["数组的数据进行修改时",{"2":{"389":2}}],["数组的特点是",{"2":{"367":1,"376":1}}],["数组+链表+红黑树的数据结构来实现",{"2":{"388":1}}],["数组+链表",{"2":{"388":2}}],["数组+链表组成的",{"2":{"339":1}}],["数组长度不可能无限",{"2":{"437":1}}],["数组长度",{"2":{"383":1}}],["数组中的结点",{"2":{"371":1}}],["数组中每一格就是一个链表",{"2":{"368":1}}],["数组和链表",{"2":{"367":1,"376":1}}],["数组被序列化",{"2":{"356":1}}],["数组元素数大于实际存储的数据以便增加和插入元素",{"2":{"354":1}}],["数组转",{"2":{"351":1}}],["数组是",{"2":{"339":1,"388":1}}],["数组是hashmap的主体",{"2":{"339":1}}],["数组是固定长度的",{"2":{"335":1}}],["数组存储的元素必须是同一个数据类型",{"2":{"335":1}}],["数组可以存储基本数据类型",{"2":{"335":1}}],["数组索引越界异常",{"2":{"313":1}}],["数组越界",{"2":{"312":1}}],["数组吗",{"0":{"211":1}}],["数组没有",{"2":{"125":1}}],["数组有没有",{"0":{"125":1}}],["数组",{"2":{"45":1,"389":2}}],["数值型",{"2":{"45":1}}],["v2",{"2":{"580":1,"582":2}}],["v2许可获得许可",{"2":{"42":1}}],["v参数查看远程仓库更加详细的信息",{"2":{"541":1}}],["v1",{"2":{"409":1,"475":1,"480":1,"495":1,"500":1,"507":1,"580":1,"582":2}}],["v>",{"2":{"371":4,"372":9,"389":4}}],["vss",{"2":{"522":1}}],["vs",{"0":{"370":1}}],["v相同时",{"2":{"360":1}}],["vector谁速度较快",{"0":{"354":1}}],["vector类的所有方法都是同步的",{"2":{"353":1}}],["vector",{"0":{"353":1,"354":1},"2":{"239":2,"338":1,"339":1,"340":1,"353":4,"354":3,"357":1}}],["versionutil",{"2":{"517":1}}],["version>3",{"2":{"696":1}}],["version>5",{"2":{"601":1}}],["version>1",{"2":{"595":1}}],["version>4",{"2":{"595":1}}],["version>",{"2":{"448":1,"595":3,"601":1,"696":1}}],["version>2",{"2":{"448":1,"595":1}}],["version",{"2":{"222":1,"517":1,"563":1,"597":1,"598":1,"704":1}}],["v",{"2":{"201":1,"221":2,"222":1,"223":2,"371":5,"560":5,"602":1,"692":1,"696":1}}],["volumes",{"2":{"563":2,"615":1,"660":3,"670":6}}],["volatile关键字是线程同步的轻量级实现",{"2":{"215":1}}],["volatile关键字为域变量的访问提供了一种免锁机制",{"2":{"179":1}}],["volatile标记的变量不会被编译器优化",{"2":{"215":1}}],["volatile阻止的不是singleton",{"2":{"214":1}}],["volatile",{"0":{"206":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1},"1":{"210":1,"211":1,"212":1,"213":1,"214":1,"215":1},"2":{"139":2,"200":4,"204":1,"206":1,"210":5,"211":3,"212":2,"214":1,"215":4,"230":1,"271":2,"680":4}}],["void>>",{"2":{"505":1}}],["void",{"2":{"57":2,"82":1,"83":1,"84":5,"85":3,"88":2,"89":2,"94":1,"99":6,"112":1,"133":1,"148":1,"152":7,"193":1,"201":1,"230":1,"245":3,"266":3,"296":1,"297":1,"298":2,"300":1,"301":1,"311":1,"315":1,"316":1,"317":1,"318":2,"319":1,"321":1,"322":1,"323":2,"324":1,"325":1,"356":1,"401":1,"404":1,"405":1,"418":1,"426":1,"427":1,"428":1,"429":2,"430":1,"431":2,"432":1,"435":2,"437":1,"440":1,"441":1,"442":2,"449":2,"453":1,"455":1,"457":1,"478":3,"479":1,"480":2,"484":2,"486":1,"487":1,"489":2,"490":2,"491":3,"492":2,"496":1,"498":1,"499":1,"503":2,"504":2,"505":10,"511":1,"514":1,"595":1,"596":1,"597":1,"598":5,"600":1,"601":1,"602":2,"606":1,"608":1,"609":1,"610":1,"611":4,"612":1,"613":1,"617":1,"622":1,"675":1,"692":1,"694":1,"696":1,"704":3,"708":1,"713":1}}],["var",{"2":{"560":1,"563":1}}],["variable",{"2":{"82":1,"83":2}}],["validate",{"2":{"505":2}}],["valid",{"2":{"503":1}}],["val",{"2":{"389":2}}],["value代表操作的是string",{"2":{"606":1}}],["value是数值类型才能成功",{"2":{"580":4}}],["value是instance对象",{"2":{"485":1}}],["value形式的非关系型数据库",{"2":{"570":1}}],["valueof",{"2":{"480":5,"500":1,"512":2}}],["valueoffset",{"2":{"271":2}}],["valueserializer",{"2":{"608":2}}],["values",{"2":{"438":3,"442":1,"485":2,"491":2,"598":3}}],["value却不同",{"2":{"433":1}}],["value的支持",{"2":{"385":1}}],["value放入链表中",{"2":{"366":1}}],["valuefieldofstring",{"2":{"120":3}}],["value",{"2":{"95":1,"99":1,"119":2,"120":3,"127":1,"128":2,"129":2,"245":1,"248":3,"262":1,"271":3,"338":1,"371":9,"372":2,"389":3,"405":1,"418":1,"437":1,"438":1,"442":1,"448":1,"474":3,"485":2,"486":2,"487":3,"489":3,"490":1,"491":4,"570":1,"580":5,"582":1,"595":3,"601":2,"602":1,"611":1,"613":1,"692":4,"694":5,"696":4}}],["visit",{"2":{"82":3,"83":4}}],["virtual",{"2":{"3":1,"36":1,"284":1,"447":1,"448":1}}],["比例进行扩充",{"2":{"644":1}}],["比之路由模式更加灵活",{"2":{"457":1}}],["比hashtable效率提高16倍",{"2":{"388":1}}],["比的是内存中存放的内容是否相等而",{"2":{"96":1}}],["比较桶中第一个元素",{"2":{"371":1}}],["比较key是否相等是先比较hashcode",{"2":{"360":1}}],["比较适合顺序添加",{"2":{"350":1}}],["比较并替换",{"2":{"271":1}}],["比较消耗性能",{"2":{"257":1}}],["比较消耗资源",{"2":{"59":1}}],["比较",{"0":{"206":1,"370":1}}],["比较明显的区别之一是用户线程结束",{"2":{"146":1}}],["比较简单的原因",{"2":{"265":1}}],["比较简单",{"2":{"106":1}}],["比较这两个对象",{"2":{"94":1}}],["比较该类的两个对象时",{"2":{"94":1}}],["比较的是他们指向的内存地址是否相等",{"2":{"96":1}}],["比较的是内存地址",{"2":{"94":1}}],["比较的是值",{"2":{"94":1}}],["比在一个接口里要好的多",{"2":{"62":1}}],["比",{"2":{"42":1,"352":2}}],["比如持久化",{"2":{"716":1}}],["比如方法名",{"2":{"416":1}}],["比如一个song对象中的歌名和歌手名分别采用一种排序方法的话",{"2":{"393":1}}],["比如一个线程获得了某个对象的锁",{"2":{"208":1}}],["比如arrayblockingqueue",{"2":{"363":1}}],["比如添加一个元素",{"2":{"348":1}}],["比如nullpointerexception空指针异常",{"2":{"286":1}}],["比如能够通过getnumberwaiting",{"2":{"274":1}}],["比如我们提到的reentrantlock",{"2":{"229":1}}],["比如调用这个对象的",{"2":{"226":1}}],["比如通过给记录加",{"2":{"222":1}}],["比如行锁",{"2":{"221":1}}],["比如你调用了一些native的方法",{"2":{"193":1}}],["比如你能代表你爸去你姥姥家干活",{"2":{"62":1}}],["比如说一个线程",{"2":{"223":1}}],["比如说最经典的生产者",{"2":{"177":1}}],["比如说中国人是抽象的",{"2":{"62":1}}],["比如jstack",{"2":{"147":1}}],["比如top",{"2":{"147":1}}],["比如读写操作或者计算逻辑",{"2":{"146":1}}],["比如垃圾回收线程",{"2":{"146":1}}],["比如在windows系统中",{"2":{"143":1}}],["比如文件操作等",{"2":{"102":1}}],["比如单片机",{"2":{"59":1}}],["比如",{"2":{"5":1,"117":2,"138":1,"183":1,"210":1,"239":1,"284":1,"287":1,"330":3,"391":1}}],["都直接放行",{"2":{"430":1}}],["都要进行的",{"2":{"309":1}}],["都要重新复制数组",{"2":{"243":1}}],["都觉得可能有潜在的问题",{"2":{"309":1}}],["都可以用于发送消息",{"2":{"448":1}}],["都可以很方便地访问它的前驱结点和后继结点",{"2":{"352":1}}],["都可以帮助你实现这个最佳实践",{"2":{"321":1}}],["都可以理解成维护的就是一个计数器",{"2":{"274":1}}],["都可以编写多线程程序",{"2":{"153":1}}],["都调用它的remove",{"2":{"249":1}}],["都需要进行数行相同的参数校验操作",{"2":{"330":1}}],["都需要操作系统帮忙完成",{"2":{"199":1}}],["都需要依赖这个计数器来完成",{"2":{"3":1}}],["都采用thread",{"2":{"153":1}}],["都是final类型",{"2":{"381":1}}],["都是扩展2倍",{"2":{"372":1}}],["都是返回第一个元素",{"2":{"364":1}}],["都是继承自collection",{"2":{"357":1}}],["都是不同步的",{"2":{"352":1}}],["都是一次只允许一个线程访问某个资源",{"2":{"276":1,"278":1}}],["都是在做操作之前先上锁",{"2":{"221":1}}],["都是原子操作",{"2":{"213":1}}],["都是为了在不改变程序执行结果的前提下",{"2":{"196":1}}],["都是接口",{"2":{"153":1}}],["都是面向对象的语言",{"2":{"41":1}}],["都会根据实际的需要动态的调整容量",{"2":{"353":1}}],["都会检测modcount变量是否为expectedmodcount值",{"2":{"341":1}}],["都会生成一个新的string对象",{"2":{"128":1,"129":1}}],["都会为每个对象分配成员变量内存空间",{"2":{"74":1}}],["都能够更容易被人阅读",{"2":{"320":1}}],["都能够调用它的任意一个方法和属性",{"2":{"109":1}}],["都能够知道这个类的所有属性和方法",{"2":{"109":1}}],["都不会影响到原件本身",{"2":{"99":1}}],["都包含抽象方法",{"2":{"64":1}}],["都位于继承的顶端",{"2":{"64":1}}],["都指的是对象",{"2":{"55":1}}],["都支持封装",{"2":{"41":1}}],["主从同步是异步方式",{"2":{"714":1}}],["主从架构的名称",{"2":{"660":1}}],["主从架构可以提升redis的读的性能",{"2":{"652":1}}],["主从架构原理与功能",{"0":{"652":1}}],["主从架构",{"0":{"651":1},"1":{"652":1,"653":1,"654":1,"655":1,"656":1},"2":{"650":1,"652":1}}],["主机异常宕机",{"2":{"714":1}}],["主节点恢复后",{"2":{"658":1}}],["主节点信息",{"2":{"656":1}}],["主节点容器名称",{"2":{"655":1}}],["主节点默认情况下只负责写",{"2":{"652":1}}],["主节点可以进行读写",{"2":{"652":1}}],["主动删除",{"2":{"679":1}}],["主动拉取模式",{"2":{"519":1}}],["主动健康检测",{"0":{"505":1}}],["主调用线程",{"2":{"230":1}}],["主要用于存放开发的代码",{"2":{"532":1}}],["主要用于管理开发过程中的源代码文件",{"2":{"522":1}}],["主要用于实现生产者",{"2":{"363":1}}],["主要应用场景和",{"2":{"278":1}}],["主要问题是线程数最大数是",{"2":{"262":1}}],["主要问题是堆积的请求处理队列可能会耗费非常大的内存",{"2":{"262":1}}],["主要的技术就是用好",{"2":{"251":1}}],["主要也就是reentrantlock同步语义的学习",{"2":{"232":1}}],["主要区别如下",{"2":{"208":1}}],["主要区别",{"2":{"153":1}}],["主要有newfixedthreadpool",{"2":{"152":1}}],["主要作用是完成对类对象的初始化工作",{"2":{"72":1}}],["主要是心跳周期不同",{"2":{"506":1}}],["主要是因为如果使用hashcode取余",{"2":{"377":1}}],["主要是指方法的重载",{"2":{"61":1}}],["主要是嵌在浏览器页面上运行",{"2":{"40":1}}],["主类是java程序执行的入口点",{"2":{"39":1}}],["解压",{"2":{"572":1}}],["解压到任意非中文目录下",{"2":{"471":1}}],["解释说明",{"2":{"525":1,"538":1,"541":1,"543":1}}],["解释器将其翻译成特定机器上的机器码",{"2":{"38":1}}],["解除死锁",{"2":{"225":1}}],["解析出serviceinfo信息",{"2":{"515":1}}],["解析出实例信息",{"2":{"483":1}}],["解析为json字符串",{"2":{"514":1}}],["解析数据后",{"2":{"513":1}}],["解析心跳的请求参数",{"2":{"502":1}}],["解析",{"2":{"99":2,"120":2}}],["解决死锁",{"2":{"709":1}}],["解决方案",{"0":{"705":1},"1":{"706":1,"707":1,"708":1,"709":1,"710":1},"2":{"709":3}}],["解决方案是",{"2":{"214":1}}],["解决此问题可以在git",{"2":{"544":1}}],["解决options请求被拦截问题",{"2":{"409":1}}],["解决三方调用发生的跨域",{"0":{"406":1},"1":{"407":1,"408":1,"409":1,"410":1}}],["解决冲突",{"2":{"339":1}}],["解决",{"0":{"699":1,"702":1},"2":{"270":1}}],["解决办法",{"2":{"139":1,"341":1}}],["解决办法是在父类里加上一个不做事且没有参数的构造方法",{"2":{"70":1}}],["解决了多线程死循环问题",{"2":{"370":1}}],["解决了这个问题",{"2":{"88":1}}],["解决了标记",{"2":{"28":1}}],["解决一些非面向对象的语句块",{"2":{"87":1}}],["解决一个问题",{"2":{"59":1}}],["解决这个问题有两种方案",{"2":{"10":1}}],["每隔一定时间去拿锁",{"2":{"712":1}}],["每过10秒",{"2":{"712":1}}],["每秒触发",{"2":{"635":1,"637":1,"641":1}}],["每条消息只能被一个消费者消费",{"2":{"451":1}}],["每种模式取决于不同的需求",{"2":{"448":1}}],["每种方法的实现原理是什么",{"0":{"349":1}}],["每当迭代器使用hashnext",{"2":{"341":1}}],["每一个服务去注册到nacos时",{"2":{"474":1}}],["每一个线程都是有优先级的",{"2":{"184":1}}],["每一把锁只锁容器其中一部分数据",{"2":{"388":1}}],["每一种平台的解释器是不同的",{"2":{"38":1}}],["每个团队成员负责一部分代码",{"2":{"523":1}}],["每个队列绑定路由关键字routingkey",{"2":{"455":1}}],["每个队列都有自己的交换机",{"2":{"445":1}}],["每个链表",{"2":{"384":1}}],["每个",{"2":{"328":1,"389":3,"695":1}}],["每个异常都是一个对象",{"2":{"290":1}}],["每个桶由hashentry构成的链表",{"2":{"237":1}}],["每个子线程执行完后countdown",{"2":{"230":1}}],["每个方法都抛出",{"2":{"230":1}}],["每个请求过来都会",{"2":{"182":1}}],["每个监视器和一个对象引用相关联",{"2":{"180":1}}],["每个对象都关联着一把锁",{"2":{"180":1}}],["每个对象",{"2":{"180":1}}],["每个线程调用await",{"2":{"278":1}}],["每个线程最后都打印到",{"2":{"245":1}}],["每个线程可以访问自己内部",{"2":{"245":1}}],["每个线程只有获得cpu",{"2":{"160":1}}],["每个线程都是通过某个特定thread对象所对应的方法run",{"2":{"154":1}}],["每个线程都有自己独立的运行栈和程序计数器",{"2":{"144":1}}],["每个独立的进程有程序运行的入口",{"2":{"144":1}}],["每个进程都有独立的代码和数据空间",{"2":{"144":1}}],["每个进程都有自己独立的一块内存空间",{"2":{"143":1}}],["每次写入命令",{"2":{"637":1}}],["每次提交时需要设置",{"2":{"538":1}}],["每次提交一个任务就创建一个线程",{"2":{"254":1}}],["每次git提交都会产生新的版本号",{"2":{"537":1}}],["每次拉取一条",{"2":{"451":1}}],["每次扩展的时候",{"2":{"372":1}}],["每次序列化时",{"2":{"356":1}}],["每次执行任务创建线程",{"2":{"257":1}}],["每次使用完threadlocal",{"2":{"249":1}}],["每次",{"2":{"243":1}}],["每次去拿数据的时候都认为别人不会修改",{"2":{"221":1}}],["每次去拿数据的时候都认为别人会修改",{"2":{"221":1}}],["每次对32位操作",{"2":{"213":1}}],["每次对string",{"2":{"128":1,"129":1}}],["每次切换都需要纳秒量级的时间",{"2":{"145":1}}],["每次创建对象",{"2":{"74":1}}],["每次在",{"2":{"33":1}}],["每次只使用其中一个区域",{"2":{"27":1}}],["每次离开的成员总是队列头上",{"2":{"6":1}}],["多人协作",{"2":{"523":1}}],["多用与处理消息较多的情况",{"2":{"450":1}}],["多用于在多系统集成时",{"2":{"297":1}}],["多",{"2":{"391":1}}],["多个重载的方法最终都会进入一个方法",{"2":{"510":1}}],["多个集群用逗号分隔",{"2":{"507":1}}],["多个消费者",{"0":{"452":1},"1":{"453":1}}],["多个消费者竞争消息",{"0":{"450":1},"1":{"451":1}}],["多个线程可同时执行",{"2":{"230":1}}],["多个线程可共享数据",{"2":{"143":1}}],["多个线程同时被阻塞",{"2":{"148":1}}],["多个处理器或多核处理器同时处理多个任务",{"2":{"140":1}}],["多个任务在同一个",{"2":{"140":1}}],["多个子类对同一方法的重写",{"2":{"60":1}}],["多线程访问容器里不同数据段的数据",{"2":{"388":1}}],["多线程时可能会造成数据丢失问题",{"2":{"370":1}}],["多线程场景下如何使用",{"0":{"355":1}}],["多线程锁的升级原理是什么",{"0":{"227":1}}],["多线程中",{"0":{"203":1}}],["多线程面试问题",{"2":{"155":1}}],["多线程编程中一般线程的个数都大于",{"2":{"145":1}}],["多线程需要协调和管理",{"2":{"141":1}}],["多线程的劣势",{"2":{"141":1}}],["多线程的好处",{"2":{"141":1}}],["多线程的优劣",{"0":{"141":1}}],["多线程是指程序中包含多个执行流",{"2":{"141":1}}],["多线程",{"2":{"141":1}}],["多线程操作字符串缓冲区",{"2":{"128":1,"129":1}}],["多线程机制使应用程序在同一时间并行执行多项任",{"2":{"37":1}}],["多重继承",{"2":{"86":1}}],["多态的实现",{"2":{"61":1}}],["多态分为编译时多态和运行时多态",{"2":{"61":1}}],["多态性的特性",{"2":{"59":1}}],["多态",{"2":{"37":1,"60":2,"333":1}}],["支持消息持久化",{"2":{"445":1}}],["支持for循环",{"2":{"357":1}}],["支持序列化",{"2":{"356":1}}],["支持非公平",{"2":{"234":1}}],["支持重入性",{"2":{"232":1}}],["支持线程中断的方法",{"2":{"172":1}}],["支持",{"2":{"50":1,"349":1}}],["支持多线程",{"2":{"37":1}}],["支持网络编程并且很方便",{"2":{"37":1}}],["封装健康检测信息到",{"2":{"505":1}}],["封装实例列表到instances对象",{"2":{"484":1}}],["封装为instance对象",{"2":{"483":1}}],["封装为一个",{"2":{"425":1}}],["封装为一个个的slot",{"2":{"414":1}}],["封装服务实例的基本信息",{"2":{"479":1}}],["封装issuccess",{"2":{"330":1}}],["封装异常再抛出",{"0":{"297":1}}],["封装",{"2":{"37":1,"60":2,"489":1}}],["简答",{"2":{"106":1}}],["简单解决",{"0":{"694":1}}],["简单来讲",{"2":{"485":1}}],["简单来说",{"2":{"418":1}}],["简单来说就是string类利用了final修饰的char类型数组存储字符",{"2":{"119":1}}],["简单模式",{"0":{"449":1}}],["简单总结一下hashmap是使用了哪些方法来有效解决哈希冲突的",{"2":{"379":1}}],["简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数",{"2":{"374":1}}],["简单说",{"2":{"245":1}}],["简单说应用程序是从主线程启动",{"2":{"40":1}}],["简单易学",{"2":{"37":1}}],["简述分代垃圾回收器是怎么工作的",{"0":{"33":1}}],["简述java垃圾回收机制",{"0":{"17":1}}],["等信息",{"2":{"420":1}}],["等接口用于获取堆栈跟踪数据等信息",{"2":{"283":1}}],["等到某个线程执行完毕这段代码块",{"2":{"276":1}}],["等到所有子线程都执行完后",{"2":{"230":1}}],["等大家都完成",{"2":{"274":1}}],["等常用操作只锁当前需要用到的桶",{"2":{"241":1}}],["等这些同步容器的实现代码",{"2":{"239":1}}],["等方法只有",{"2":{"391":1}}],["等方法",{"2":{"381":1}}],["等方法返回的容器",{"2":{"239":1}}],["等方法用于等待对象的锁或者唤醒线程",{"2":{"166":1}}],["等一个之前获得锁的线程释放锁之后",{"2":{"222":1}}],["等待5秒中",{"2":{"511":1}}],["等待其它线程处理就可以了",{"2":{"437":1}}],["等待其它人更新完成即可",{"2":{"437":1}}],["等待时间的单位为",{"2":{"266":1}}],["等待时间为",{"2":{"266":1}}],["等待的线程永远获取不到锁",{"2":{"201":1}}],["等待生产者通知它队列中有商品了",{"2":{"177":1}}],["等待池中的线程不会去竞争该对象的锁",{"2":{"175":1}}],["等待唤醒",{"2":{"165":1}}],["等待线程终止或者超时",{"2":{"159":1}}],["等待阻塞",{"2":{"159":1}}],["等待被线程调度选中",{"2":{"159":1}}],["等问题",{"2":{"138":1,"245":1}}],["等框架也大量使用到了反射机制",{"2":{"111":1}}],["等价于通过",{"2":{"94":1}}],["等",{"2":{"36":1,"217":1,"284":1}}],["系统的可用性达到了99",{"2":{"649":1}}],["系统的高可用",{"2":{"649":1}}],["系统负载",{"2":{"431":1}}],["系统规则校验",{"2":{"431":1}}],["系统保护",{"2":{"414":1}}],["系统自动根据该异常对象寻找合适异常处理器",{"2":{"290":1}}],["系统",{"2":{"145":1}}],["系统加载这个包",{"2":{"36":1}}],["系统将会出现",{"2":{"31":1}}],["线程二尝试去获取锁",{"2":{"712":1}}],["线程二执行获取苹果的操作",{"2":{"686":1}}],["线程一尝试去获取锁",{"2":{"712":1}}],["线程一执行报数操作",{"2":{"686":1}}],["线程一执行获取苹果的操作",{"2":{"686":1}}],["线程计数器",{"2":{"429":1}}],["线程2",{"2":{"341":1}}],["线程1通过iterator在遍历集合a中的元素",{"2":{"341":1}}],["线程1",{"2":{"341":1}}],["线程数",{"2":{"414":1,"429":1,"431":1}}],["线程数定义了最小可以同时运行的线程数量",{"2":{"264":1}}],["线程数过多会造成什么异常",{"0":{"188":1}}],["线程组和线程池是两个不同的概念",{"2":{"260":1}}],["线程组中可以有线程对象",{"2":{"260":1}}],["线程是稀缺资源",{"2":{"255":1}}],["线程是进程的一部分",{"2":{"144":1}}],["线程本地存储变量加",{"2":{"245":1}}],["线程本地存储变量",{"2":{"245":1}}],["线程关了",{"2":{"245":1}}],["线程局部变量是局限于线程内部的变量",{"2":{"245":1,"246":1}}],["线程在上锁后",{"2":{"709":1}}],["线程在等待一个本身也处于永久等待完成的对象",{"2":{"226":1}}],["线程在获取锁之前不允许执行该部分的代码",{"2":{"180":1}}],["线程在获取",{"2":{"159":1}}],["线程被永久堵塞在一个等待进入同步块的状态",{"2":{"226":1}}],["线程冲突严重",{"2":{"223":1}}],["线程需要自旋",{"2":{"222":1}}],["线程修改了",{"2":{"222":1}}],["线程获取地址里面的值被b",{"2":{"222":1}}],["线程调用的",{"2":{"185":1}}],["线程调度并不受到",{"2":{"162":1}}],["线程调度器是一个操作系统服务",{"2":{"162":1}}],["线程调度器选择优先级最高的线程运行",{"2":{"161":1}}],["线程调度是指按照特定机制为多个线程分配",{"2":{"160":1}}],["线程类的构造方法",{"0":{"185":1},"2":{"185":1}}],["线程优先级是一个",{"2":{"184":1}}],["线程池之scheduledthreadpoolexecutor详解",{"0":{"267":1}}],["线程池之threadpoolexecutor详解",{"0":{"261":1},"1":{"262":1,"263":1,"264":1,"265":1,"266":1}}],["线程池实现原理",{"2":{"266":1}}],["线程池任务队列超过",{"2":{"264":1}}],["线程池中的线程数量大于",{"2":{"264":1}}],["线程池中允许存在的工作线程的最大数量",{"2":{"264":1}}],["线程池中",{"0":{"259":1}}],["线程池的状态就会变成这个",{"2":{"256":1}}],["线程池的状态在转换为",{"2":{"256":1}}],["线程池的大小一旦达到最大值就会保持不变",{"2":{"254":1}}],["线程池都有哪些状态",{"0":{"256":1}}],["线程池有什么优点",{"0":{"255":1}}],["线程池大小完全依赖于操作系统",{"2":{"254":1}}],["线程池顾名思义就是事先创建若干个可执行的线程放入一个池",{"2":{"254":1}}],["线程池",{"0":{"252":1},"1":{"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1},"2":{"254":1}}],["线程池队列已满",{"0":{"181":1}}],["线程池本身就是一个天然的漏斗",{"2":{"106":1}}],["线程间的同步方法大体可分为两类",{"2":{"179":1}}],["线程间直接的数据交换",{"2":{"177":1}}],["线程互斥可以看成是一种特殊的线程同步",{"2":{"179":1}}],["线程互斥是指对于共享的进程系统资源",{"2":{"179":1}}],["线程执行",{"2":{"170":1}}],["线程会自动苏醒",{"2":{"164":1}}],["线程会进入到阻塞状态",{"2":{"159":1}}],["线程会进入同步阻塞状态",{"2":{"159":1}}],["线程不会自动苏醒",{"2":{"164":1}}],["线程由于",{"2":{"161":1}}],["线程体中调用了",{"2":{"161":2}}],["线程run",{"2":{"159":1}}],["线程重新转入就绪状态",{"2":{"159":1}}],["线程要想进入运行状态执行",{"2":{"159":1}}],["线程对象创建后",{"2":{"159":1}}],["线程下的普通方法去执行",{"2":{"155":1}}],["线程进入了新建状态",{"2":{"155":1}}],["线程的生命周期开销非常高",{"2":{"188":1}}],["线程的过程",{"2":{"162":1}}],["线程的调度策略",{"0":{"161":1}}],["线程的状态和基本操作",{"0":{"158":1},"1":{"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1}}],["线程的",{"0":{"154":1,"170":1}}],["线程的安全性问题体现在",{"2":{"139":1}}],["线程任务开始执行",{"2":{"152":1}}],["线程中断仅仅是置线程的中断状态位",{"2":{"172":1}}],["线程中的",{"2":{"146":1}}],["线程中不能依靠",{"2":{"146":1}}],["线程之间切换的开销小",{"2":{"144":1}}],["线程之间对共享资源的访问会相互影响",{"2":{"141":1}}],["线程可以看做轻量级的进程",{"2":{"144":1}}],["线程具有许多传统进程所具有的特征",{"2":{"144":1}}],["线程和进程区别",{"0":{"142":1},"1":{"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1}}],["线程越多占用内存也越多",{"2":{"141":1}}],["线程也是程序",{"2":{"141":1}}],["线程切换带来的原子性问题",{"2":{"139":1}}],["线程安全是编程中的术语",{"2":{"182":1}}],["线程安全",{"2":{"128":1,"129":1,"138":1,"200":1,"340":1,"352":1,"353":1,"385":1}}],["线程安全性",{"2":{"128":1,"129":1}}],["线程或者run",{"2":{"40":1}}],["线程",{"0":{"204":1},"2":{"36":1,"143":1,"144":1,"146":2,"148":13,"149":2,"150":9,"200":1,"224":1,"234":2,"435":1}}],["线程恢复等基础功能",{"2":{"3":1}}],["字段",{"2":{"203":1}}],["字节数组存储对象",{"2":{"601":1}}],["字节存储原理",{"2":{"601":1}}],["字节存储",{"0":{"601":1},"2":{"601":1}}],["字节流",{"2":{"177":1}}],["字节码由虚拟机解释执行",{"2":{"38":1}}],["字节码",{"2":{"38":1}}],["字节码解析器的工作是通过改变这个计数器的值",{"2":{"3":1}}],["字节码文件的后缀名为",{"2":{"2":1}}],["字符流",{"2":{"177":1}}],["字符常量只占一个字节",{"2":{"115":1}}],["字符常量相当于一个整形值",{"2":{"115":1}}],["字符常量是单引号引起的一个字符",{"2":{"115":1}}],["字符串存储对象",{"2":{"600":1}}],["字符串索引越界异常",{"2":{"313":1}}],["字符串比较",{"2":{"126":1}}],["字符串替换",{"2":{"126":1}}],["字符串",{"2":{"120":1,"475":6,"495":2,"507":4,"579":1}}],["字符串常量池具有缓存功能",{"2":{"200":1}}],["字符串常量池位于堆内存中",{"2":{"116":1}}],["字符串常量占若干个字节",{"2":{"115":1}}],["字符串常量代表一个地址值",{"2":{"115":1}}],["字符串常量是双引号引起的若干个字符",{"2":{"115":1}}],["字符串处理",{"2":{"36":1}}],["字符型常量和字符串常量的区别",{"0":{"115":1}}],["字符型",{"2":{"45":1}}],["包装异常时不要抛弃原始的异常",{"0":{"325":1}}],["包装类型",{"2":{"132":1}}],["包装类相关",{"0":{"130":1},"1":{"131":1,"132":1,"133":1}}],["包提供了",{"2":{"270":1}}],["包下面的原子变量类就是使用了乐观锁的一种实现方式",{"2":{"221":1}}],["包下的类大多是使用",{"2":{"222":1}}],["包下的类",{"2":{"210":1}}],["包含",{"2":{"532":1}}],["包含下面几步",{"2":{"484":1}}],["包含实例的ip",{"2":{"474":1}}],["包含集群的具体信息",{"2":{"474":1}}],["包含rabbitmq",{"2":{"448":1}}],["包含两个参数",{"2":{"420":1}}],["包含两个子类",{"2":{"283":1}}],["包含一个跟自动注册有关的bean",{"2":{"477":1}}],["包含一个",{"2":{"389":1}}],["包含了服务注册",{"2":{"467":1}}],["包含了其线程创建时线程执行堆栈的快照",{"2":{"283":1}}],["包含了运行java程序必不可少的系统类",{"2":{"36":1}}],["包含关系",{"2":{"144":1}}],["包",{"2":{"106":1,"393":1}}],["包将成为标准api的一部分",{"2":{"103":1}}],["包将是太麻烦了",{"2":{"103":1}}],["包移动到",{"2":{"103":1}}],["包来说使用",{"2":{"103":1}}],["包中性能而写的一个新包",{"2":{"102":1}}],["包中的功能",{"2":{"102":1}}],["包括redis也一样的",{"2":{"649":1}}],["包括名称和分数",{"2":{"584":1}}],["包括下面的实现",{"2":{"415":1}}],["包括运行信息",{"2":{"414":1,"429":1}}],["包括需要处理哪些异常",{"2":{"314":1}}],["包括基本类型及引用类型",{"2":{"271":1}}],["包括其他类",{"2":{"145":1}}],["包括私有数据",{"2":{"86":1}}],["包括静态和非静态",{"2":{"83":1}}],["包括",{"2":{"55":1,"188":1,"434":1}}],["包括新生代",{"2":{"30":1}}],["该节点的从节点也没有顶上来",{"2":{"668":1}}],["该成功的成功",{"2":{"620":1}}],["该失败的失败",{"2":{"620":3}}],["该任务是5000ms执行一次",{"2":{"504":1}}],["该模式比之发布订阅模式多了一个指定的routingkey",{"2":{"454":1}}],["该模式采用directexchange",{"2":{"450":1}}],["该技术为spring",{"2":{"444":1}}],["该接口有三个实现类",{"2":{"438":1,"439":1}}],["该接口提供了比较元素的",{"2":{"395":1}}],["该输出就是散列值",{"2":{"374":1}}],["该元素的位置要么停留在原始位置",{"2":{"372":1}}],["该链为链表",{"2":{"371":1}}],["该链表会转为红黑树来提高查询效率",{"2":{"366":1}}],["该动作发生在运行期间",{"2":{"308":1}}],["该异常经常被称为强制类型转换异常",{"2":{"313":1}}],["该异常对象包含异常名称",{"2":{"305":1}}],["该异常我们必须手动在代码里添加捕获语句来处理该异常",{"2":{"287":1}}],["该对象中包含有异常信息",{"2":{"290":1}}],["该类包含两个静态内部类",{"2":{"389":1}}],["该类异常包括运行时异常",{"2":{"288":1}}],["该类就不能被继承",{"2":{"66":1}}],["该锁才算是完全释放成功",{"2":{"232":1}}],["该标记表明线程进入该方法时",{"2":{"201":1}}],["该方法中对修改服务列表的动作加锁处理",{"2":{"484":1}}],["该方法能够拦截每一个openfeign的请求",{"2":{"401":1}}],["该方法在object类中的声明protected",{"2":{"193":1}}],["该方法并不是将对象的锁给所有线程",{"2":{"163":1}}],["该方法一般由垃圾回收器来调",{"2":{"54":1}}],["该线程是否正在独占资源",{"2":{"230":1}}],["该线程可以继续获得该锁",{"2":{"201":1}}],["该线程的时间片用完",{"2":{"161":1}}],["该线程处于就绪状态",{"2":{"159":1}}],["该thread对象才是真正的线程对象",{"2":{"152":1}}],["该字符串在内存中存放位置",{"2":{"115":1}}],["该引用变量发出的方法调用到底是哪个类中实现的方法",{"2":{"60":1,"61":1}}],["该代码块都会执行",{"2":{"54":1,"307":1}}],["该系统就可以运行java程序",{"2":{"36":1}}],["该区更关注的是程序方法的执行",{"2":{"5":1}}],["大",{"2":{"695":1}}],["大分数",{"2":{"584":1}}],["大家找到其release页面",{"2":{"466":1}}],["大于",{"2":{"438":1,"441":1}}],["大于8的话把链表转换为红黑树",{"2":{"371":1}}],["大多数",{"2":{"321":1}}],["大多数的",{"2":{"317":1}}],["大多数场景性能都相差较大",{"2":{"208":1}}],["大量空闲的线程会占用许多内存",{"2":{"188":1}}],["大对象也会直接进入老生代",{"2":{"33":1}}],["大小等于",{"2":{"438":1}}],["大小是自动扩展的",{"2":{"391":1}}],["大小是固定的",{"2":{"5":1}}],["大小以及使用情况",{"2":{"20":1}}],["升级为老生代",{"2":{"33":1}}],["年龄就",{"2":{"33":1}}],["到了",{"2":{"388":1}}],["到达链表的尾部",{"2":{"371":1}}],["到o",{"2":{"366":1}}],["到底要放置多少数据",{"2":{"243":1}}],["到底要放弃哪个锁",{"2":{"166":1}}],["到state=0",{"2":{"230":1}}],["到下次循环才有可能机会执行",{"2":{"222":1}}],["到",{"2":{"33":1,"270":1,"442":1,"540":2}}],["变换成固定长度的输出",{"2":{"374":1}}],["变为可执行态",{"2":{"168":1}}],["变量进行操作时",{"2":{"271":1}}],["变量可以确保先行关系",{"2":{"212":1}}],["变量有什么不同",{"0":{"212":1}}],["变量和",{"0":{"212":1}}],["变量等",{"2":{"208":1}}],["变量其实是内存中的一小块区域",{"2":{"69":1}}],["变量与方法",{"0":{"68":1},"1":{"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1}}],["变量名",{"2":{"55":1}}],["变量",{"2":{"50":5,"54":1,"69":1,"184":1,"199":1,"212":1,"215":1,"307":1,"341":1}}],["变",{"2":{"33":2}}],["区别",{"0":{"308":1},"2":{"215":1}}],["区别在于前者实现的是编译时的多态性",{"2":{"92":1}}],["区别是什么",{"0":{"208":1,"303":1,"304":1}}],["区别是",{"2":{"55":1}}],["区",{"2":{"33":1}}],["个关键词来实现的",{"2":{"290":1}}],["个最重要的参数",{"2":{"264":1}}],["个阻塞队列",{"2":{"251":1}}],["个线程可以访问",{"2":{"276":1}}],["个线程",{"2":{"245":1}}],["个写线程执行",{"2":{"241":1}}],["个桶",{"2":{"241":1}}],["个",{"2":{"117":1}}],["个例子来给大家说明",{"2":{"99":1}}],["个数不同",{"2":{"92":1}}],["个分区",{"2":{"33":1}}],["个部分",{"2":{"3":1}}],["老的实例同步id",{"2":{"485":1}}],["老生代当空间占用到达某个值之后就会触发全局垃圾收回",{"2":{"33":1}}],["老生代的默认占比是",{"2":{"33":1}}],["老生代和新生代",{"2":{"33":1}}],["老年代回收器一般采用的是标记",{"2":{"32":1}}],["老年代回收器",{"2":{"32":1}}],["老年代并行收集器",{"2":{"30":2}}],["老年代单线程收集器",{"2":{"30":1}}],["老年代",{"2":{"29":1,"30":1}}],["老年代采用标记整理算法",{"2":{"25":1}}],["老年代使用标记",{"2":{"5":1}}],["整个看起来就像是优化过且线程安全的",{"2":{"388":1}}],["整个表达式的值才是",{"2":{"51":1}}],["整数除零等",{"2":{"313":1}}],["整数类型",{"2":{"45":1}}],["整体上来说",{"2":{"220":1}}],["整堆回收器",{"2":{"32":1}}],["整理的算法进行垃圾回收",{"2":{"32":1}}],["整理",{"2":{"30":1}}],["整理算法的执行过程如下图所示",{"2":{"28":1}}],["整理算法不同的是",{"2":{"28":1}}],["整理算法",{"0":{"28":1},"2":{"25":1,"28":1,"30":3}}],["此文件夹为隐藏文件夹",{"2":{"530":1}}],["此处可以任意设置",{"2":{"528":1}}],["此处的clientbeatchecktask同样是一个runnable",{"2":{"504":1}}],["此处的this",{"2":{"478":1}}],["此处进入leaparray类中",{"2":{"438":1}}],["此处不返回",{"2":{"330":1}}],["此实现提供所有可选的映射操作",{"2":{"366":1}}],["此题的出处是",{"2":{"311":1}}],["此类不保证映射的顺序",{"2":{"366":1}}],["此类异常的出现绝大数情况是代码本身有问题应该从逻辑上去解决并改进代码",{"2":{"286":1}}],["此类异常属于不受检异常",{"2":{"286":1}}],["此类错误发生时",{"2":{"284":1}}],["此类错误一般表示代码运行时",{"2":{"284":1}}],["此策略为我们提供可伸缩队列",{"2":{"265":1}}],["此策略将丢弃最早的未处理的任务请求",{"2":{"265":1}}],["此线程池支持定时以及周期性执行任务的需求",{"2":{"254":1}}],["此线程池不会对线程池大小做限制",{"2":{"254":1}}],["此线程池又可以智能的添加新线程来处理任务",{"2":{"254":1}}],["此线程池保证所有任务的执行顺序按照任务的提交顺序执行",{"2":{"254":1}}],["此线程终止",{"2":{"154":1}}],["此方式大大简少了代码量",{"2":{"251":1}}],["此方法会阻塞主进程的继续往下执行",{"2":{"153":1}}],["此方法可改变这个对象的属性",{"0":{"98":1}}],["此后",{"2":{"230":1}}],["此过程就构成了",{"2":{"203":1}}],["此时再从远程仓库拉取文件的时候会报错",{"2":{"544":1}}],["此时远程仓库和本地仓库本省建立了联系",{"2":{"540":1}}],["此时服务肯定需要增加更多实例来应对高并发",{"2":{"506":1}}],["此时不包含实例信息",{"2":{"484":1}}],["此时有两种情况",{"2":{"366":1}}],["此时这个对象锁还没有释放",{"2":{"208":1}}],["此时就会把锁从轻量级升级为重量级锁",{"2":{"203":1}}],["此时等待的线程都加锁可能是一种不太值得的操作",{"2":{"202":1}}],["此时",{"2":{"200":1,"371":1,"540":1,"714":2}}],["此时进入阻塞状态",{"2":{"159":1}}],["此时线程是处于就绪状态",{"2":{"154":1}}],["此时称系统处于死锁状态或系统产生了死锁",{"2":{"148":1}}],["此时的性能将会被降低",{"2":{"31":1}}],["此外",{"2":{"30":1,"173":1}}],["追求最短gc回收停顿时间",{"2":{"30":1}}],["追求高吞吐量",{"2":{"30":1}}],["具有排他性",{"2":{"270":1,"271":1}}],["具有指令重排的特性",{"2":{"200":1}}],["具有更好的可移植性",{"2":{"170":1}}],["具有很好的封装性",{"2":{"86":1}}],["具有高并发",{"2":{"30":1}}],["具体设置多少应该由当前业务来决定",{"2":{"710":1}}],["具体实现",{"0":{"696":1}}],["具体实现应该依赖于抽象",{"2":{"62":1}}],["具体命令如下",{"2":{"545":1}}],["具体包括",{"2":{"540":1}}],["具体计数方式",{"2":{"429":1}}],["具体内容还是查看源码吧",{"2":{"238":1}}],["具体位置依赖应用的配置",{"2":{"186":1}}],["具体唤醒哪一个线程由虚拟机控制",{"2":{"175":1}}],["具体构造如下图所示",{"2":{"12":1}}],["以用户id为key",{"2":{"688":1}}],["以保证能够写入新的数据",{"2":{"677":1}}],["以避免主从架构出现只能读不能写的情况",{"2":{"658":1}}],["以此类推",{"2":{"644":1}}],["以此来减少抽象类和接口之间的差异",{"2":{"64":1}}],["以简单命令来完成aof的重写",{"2":{"644":1}}],["以转账为例",{"2":{"619":1}}],["以免影响开发主线",{"2":{"545":1}}],["以淘宝为例",{"2":{"506":1}}],["以",{"2":{"429":1}}],["以下是hashset",{"2":{"360":1}}],["以减少搜索时间",{"2":{"339":1,"369":1,"385":1}}],["以等待计算的完成",{"2":{"258":1}}],["以reentrantlock为例",{"2":{"230":1}}],["以不同的顺序获取和释放锁",{"2":{"220":1}}],["以及来源信息",{"2":{"414":1}}],["以及",{"2":{"239":1,"338":1,"357":1,"484":1}}],["以及底层操作系统对线程的限制等",{"2":{"188":1}}],["以及创建和销毁的时间",{"2":{"3":1}}],["以便能够在对象销毁后进行垃圾回收",{"2":{"254":1}}],["以便其他在等待的线程就可以得到这个对象锁",{"2":{"167":1}}],["以便下次再切换回这个任务时",{"2":{"145":1}}],["以mycallable为参数创建futuretask对象",{"2":{"152":1}}],["以myrunnable作为target创建thead对象",{"2":{"152":1}}],["以后的",{"2":{"385":1}}],["以后引入的枚举类型也算是一种比较特殊的引用类型",{"2":{"117":1}}],["以后创建类对象的时候不会重新分配",{"2":{"56":1}}],["以上例子",{"2":{"88":1}}],["以上这些循环往复就构成了整个分代垃圾回收的整体执行流程",{"2":{"33":1}}],["以致于即使没有创建对象",{"2":{"56":1}}],["以前",{"2":{"46":1}}],["以获取最短回收停顿时间为目标的收集器",{"2":{"30":1}}],["收集器",{"2":{"30":2}}],["尽可能得使用标准异常有利于新加入的开发者看懂项目代码",{"2":{"327":1}}],["尽可能地提高程序执行的并行度",{"2":{"196":1}}],["尽量较少碰撞",{"2":{"384":1}}],["尽量减少同步的代码块",{"2":{"225":1}}],["尽量不要几个功能用同一把锁",{"2":{"225":1}}],["尽量不要使用",{"2":{"200":1}}],["尽量降低锁的使用粒度",{"2":{"225":1}}],["尽量使用",{"2":{"225":2}}],["尽量少用抽象类",{"2":{"64":1}}],["尽管使用异常有利于",{"2":{"328":1}}],["尽管线程",{"2":{"223":1}}],["尽管可以用this调用一个构造器",{"2":{"55":1}}],["尽管短生命周期对象已经不再需要",{"2":{"15":1}}],["尽快完成程序的运算任务",{"2":{"30":1}}],["高低位异或",{"2":{"377":1}}],["高位是没有起到任何作用的",{"2":{"377":1}}],["高16bit不变",{"2":{"371":1}}],["高16bit补0",{"2":{"371":1}}],["高优先级线程吞噬所有的低优先级线程的",{"2":{"226":1}}],["高优先级的线程在运行时会具有优先权",{"2":{"184":1}}],["高并发的",{"2":{"106":1}}],["高层次的模块不应该依赖于低层次的模块",{"2":{"62":1}}],["高吞吐量可以高效率的利用cpu时间",{"2":{"30":1}}],["高效利用",{"2":{"30":1}}],["=null",{"2":{"296":1,"300":1,"372":2}}],["=10",{"2":{"88":1}}],["=2",{"2":{"83":1}}],["==============1",{"2":{"696":1}}],["============>从数据库查询",{"2":{"692":1,"694":1,"696":1}}],["==指引用是否相同",{"2":{"360":1}}],["==是指对内存地址进行比较",{"2":{"360":1}}],["==是判断两个变量或实例是不是指向同一个内存空间",{"2":{"360":1}}],["==与equals的区别",{"2":{"360":1}}],["==null",{"2":{"360":1,"371":1}}],["==比较的是值",{"2":{"133":1}}],["==比较的是对象的内存地址",{"2":{"133":1}}],["==",{"0":{"94":1},"2":{"57":3,"94":7,"123":5,"133":5,"200":2,"214":3,"371":10,"372":6,"377":1,"389":4,"418":1,"423":3,"425":1,"427":2,"428":2,"429":1,"430":4,"431":4,"435":4,"437":2,"438":4,"440":1,"441":2,"442":5,"484":1,"489":2,"490":2,"491":2,"492":2,"499":1,"502":4,"503":1,"505":2,"510":1,"511":1,"515":1,"517":2,"608":6}}],["=3",{"2":{"47":1,"84":2}}],["=",{"0":{"48":2,"123":1,"133":1},"2":{"30":1,"47":1,"48":4,"57":8,"82":2,"83":3,"84":5,"85":1,"89":4,"94":4,"99":20,"112":4,"117":1,"120":10,"123":5,"124":2,"128":3,"129":3,"133":7,"140":3,"148":2,"152":8,"183":1,"200":2,"214":3,"230":1,"245":5,"266":30,"271":2,"296":3,"297":1,"300":6,"301":1,"310":8,"315":3,"316":4,"317":2,"330":2,"342":2,"346":3,"347":1,"351":2,"355":2,"356":2,"360":2,"364":1,"371":23,"372":41,"376":1,"377":1,"389":11,"401":2,"404":1,"405":3,"416":1,"417":3,"418":10,"422":4,"423":8,"425":5,"427":5,"428":4,"429":1,"430":10,"431":4,"435":9,"437":8,"438":10,"439":12,"440":1,"441":2,"442":9,"448":7,"449":2,"453":2,"455":1,"457":1,"478":1,"479":4,"480":3,"483":5,"484":5,"485":12,"489":3,"490":4,"491":13,"492":5,"496":2,"498":4,"499":10,"500":3,"502":19,"503":7,"504":2,"505":18,"510":3,"511":6,"512":1,"514":10,"515":6,"517":19,"595":5,"596":8,"597":10,"598":29,"600":6,"601":6,"602":9,"606":4,"608":13,"609":5,"611":13,"612":3,"613":3,"617":2,"675":2,"692":3,"694":3,"696":11,"704":3,"708":3,"713":3}}],["吞吐量还是非公平优于公平",{"2":{"234":1}}],["吞吐量优先",{"2":{"30":1}}],["吞吐量",{"2":{"30":1}}],["实时性低",{"2":{"695":1}}],["实时监控redis服务接收到的命令",{"2":{"585":1}}],["实际业务场景中我们不可能确保每个接口响应都是一致的",{"2":{"451":1}}],["实际大小大于阈值则扩容",{"2":{"371":1}}],["实际接到的是铅球",{"2":{"330":1}}],["实际开发中使用",{"2":{"215":1}}],["实际上有很多设计",{"2":{"111":1}}],["实际上java和javax没有区别",{"2":{"103":1}}],["实际上",{"2":{"99":2,"120":1}}],["实际上是serial收集器的多线程版本",{"2":{"30":1}}],["实例被删除的最长超时时间",{"2":{"504":1}}],["实例都在的情况下",{"2":{"502":1}}],["实例尚未注册",{"2":{"502":1}}],["实例心跳内容",{"2":{"495":1}}],["实例信息的核心api",{"2":{"484":1}}],["实例信息",{"2":{"474":1}}],["实例名",{"2":{"465":1}}],["实例化异常",{"2":{"313":1}}],["实例化错误",{"2":{"313":1}}],["实例方法则无此限制",{"2":{"76":1}}],["实例变量是属于实例对象的",{"2":{"74":1}}],["实例变量",{"2":{"74":1}}],["实参",{"2":{"55":1}}],["实现高可用的三种机制",{"0":{"650":1}}],["实现默认模式",{"2":{"415":1}}],["实现上述功能的核心骨架是一个叫做processorslotchain的类",{"2":{"414":1}}],["实现线程安全的方式",{"2":{"388":1}}],["实现线程同步的方法",{"2":{"179":1}}],["实现map",{"2":{"371":1}}],["实现是否支持",{"2":{"349":1}}],["实现一样",{"2":{"339":1}}],["实现一个改变对象参数状态的方法并不是一件难事",{"2":{"99":1}}],["实现的",{"2":{"221":1,"339":1,"359":1}}],["实现的是运行时的多态性",{"2":{"60":1}}],["实现的是编译时的多态性",{"2":{"60":1}}],["实现难度",{"2":{"214":1}}],["实现",{"2":{"152":4,"333":1,"348":1,"356":1,"388":1}}],["实现了",{"2":{"350":1,"356":1}}],["实现了访问顺序相关逻辑",{"2":{"339":1}}],["实现了读写的分离",{"2":{"234":1}}],["实现了lock接口的锁他与sychronized方法具有相同的基本行为和语义",{"2":{"179":1}}],["实现了异步非堵塞",{"2":{"106":1}}],["实现了多路复用",{"2":{"106":1}}],["实现接口并覆盖接口中同一方法",{"2":{"60":1}}],["实现原理是什么",{"0":{"389":1}}],["实现原理与公平锁非公平锁区别",{"0":{"231":1},"1":{"232":1}}],["实现原理",{"2":{"36":1}}],["实现简单",{"2":{"26":1,"27":1}}],["实现虚引用",{"2":{"21":1}}],["obsolete",{"2":{"504":1}}],["obj2",{"2":{"393":1}}],["obj1",{"2":{"393":1}}],["obj",{"2":{"330":2,"346":2,"393":1,"427":1}}],["objectutils",{"2":{"692":1,"694":2,"696":1,"704":2,"708":1,"713":1}}],["objectmapper",{"2":{"600":4}}],["objectnode",{"2":{"502":2,"517":3}}],["object>",{"2":{"360":1,"425":1,"492":1,"611":1,"696":1}}],["objectoutputstream",{"2":{"356":1}}],["object数组",{"2":{"339":2}}],["objectfieldoffset",{"2":{"271":2}}],["objects",{"2":{"217":2}}],["object类的方法",{"2":{"164":1}}],["object",{"0":{"166":1},"2":{"2":1,"148":4,"180":1,"356":1,"360":2,"371":1,"377":1,"393":3,"418":2,"422":1,"425":3,"426":2,"427":2,"428":1,"429":1,"430":1,"431":1,"432":1,"435":1,"440":1,"449":1,"492":1,"511":1,"622":1}}],["occurred",{"2":{"484":1}}],["occupytimeoutproperty",{"2":{"438":1}}],["occupiablebucketleaparray",{"2":{"437":1}}],["of",{"2":{"484":1,"490":1,"504":1,"515":1,"517":2}}],["offer",{"2":{"364":1,"489":1}}],["opsforhash",{"2":{"611":2}}],["opsforlist",{"2":{"611":2}}],["opsforset",{"2":{"611":2}}],["opsforzset",{"2":{"611":5}}],["opsforvalue",{"2":{"606":3,"609":2,"610":1,"612":2,"613":1,"617":2,"622":2,"675":2,"692":2,"694":3,"696":2,"704":2,"708":3,"713":2}}],["opsforxxx",{"2":{"606":1}}],["opt",{"2":{"573":2,"629":1}}],["optional",{"2":{"483":1,"502":5,"517":9}}],["options",{"2":{"409":1,"410":1}}],["op",{"2":{"505":2}}],["operations",{"2":{"502":1}}],["operation",{"2":{"270":1}}],["open到closed",{"2":{"441":1}}],["open到open的变化",{"2":{"441":1}}],["open到",{"2":{"441":1}}],["open到half",{"2":{"441":1}}],["open切换在fromopentohalfopen",{"2":{"441":1}}],["open状态",{"2":{"441":1}}],["openfeign快速开始",{"0":{"402":1},"1":{"403":1,"404":1,"405":1}}],["openfeign调用有没有校验token",{"2":{"401":1}}],["openfeign调用如何拦截请求",{"0":{"401":1}}],["openfeign拦截",{"2":{"401":1}}],["openfeign能够提高应用程序的可靠性",{"2":{"400":1}}],["openfeign可以通过注解的方式来声明请求参数",{"2":{"400":1}}],["openfeign是一种基于spring",{"2":{"400":1}}],["openfeign是什么",{"0":{"400":1}}],["openfeign",{"0":{"398":1},"1":{"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1},"2":{"403":2}}],["open",{"2":{"62":1,"441":12,"442":5,"505":1}}],["openjdk和oracle",{"2":{"42":1}}],["openjdk",{"0":{"42":1},"2":{"42":2,"558":1}}],["only",{"2":{"505":1,"570":1,"625":1,"635":1,"641":1}}],["onlyifabsent为false或者旧值为null",{"2":{"371":1}}],["onlyifabsent",{"2":{"371":2,"389":1}}],["ondelete",{"2":{"490":1}}],["onchange",{"2":{"490":1,"491":1}}],["onput方法如下",{"2":{"489":1}}],["onput",{"2":{"487":2,"489":1}}],["onpass",{"2":{"429":1}}],["onrequestcomplete",{"2":{"442":1}}],["on",{"2":{"431":1,"563":2,"627":1,"629":1,"635":1,"641":1,"655":2}}],["one",{"2":{"223":4}}],["o是a的实例",{"2":{"313":1}}],["org",{"2":{"597":1,"598":2,"606":4,"611":7,"617":4,"675":4,"704":5}}],["originnode",{"2":{"428":2}}],["originname",{"2":{"420":1}}],["origin放入",{"2":{"428":1}}],["originmethod",{"2":{"418":3}}],["origin名称",{"2":{"414":1}}],["origin",{"2":{"407":1,"410":1,"420":1,"422":2,"423":6,"428":1,"429":1,"430":2,"541":1}}],["orderid",{"2":{"405":5,"417":1,"422":1}}],["orders",{"2":{"405":2,"409":2}}],["order",{"2":{"356":1,"372":1,"415":2,"417":8,"422":1,"467":1,"484":1,"495":1}}],["or",{"2":{"298":1,"439":1,"484":1,"485":1}}],["oracle",{"0":{"42":1},"2":{"42":5}}],["oom",{"2":{"262":2}}],["os",{"2":{"184":1}}],["o来提升开发速率和更好的维护性",{"2":{"106":1}}],["o操作方法",{"2":{"106":1}}],["o模型",{"2":{"106":1}}],["o模式",{"2":{"106":1}}],["o",{"2":{"106":5,"159":2,"349":1,"371":1}}],["override",{"0":{"91":1,"92":1},"2":{"60":1,"152":4,"245":2,"266":2,"401":1,"422":1,"425":1,"426":1,"427":1,"428":1,"429":2,"430":1,"431":1,"432":1,"435":1,"437":1,"438":3,"439":1,"440":1,"441":2,"442":1,"479":1,"480":1,"486":1,"490":1,"491":1,"496":1,"499":1,"503":1,"504":1,"505":2,"510":1,"514":2,"613":1,"622":1,"704":1}}],["overload",{"0":{"92":1},"2":{"60":1}}],["out=",{"2":{"472":2}}],["outofmemoryerror",{"2":{"284":1,"313":1,"322":1}}],["output",{"2":{"266":1}}],["outputstream",{"2":{"105":1}}],["outmethod",{"2":{"88":1}}],["outer",{"2":{"82":3,"83":7,"84":1,"85":1,"88":1,"89":4}}],["out",{"2":{"57":2,"82":1,"83":2,"84":9,"85":1,"88":1,"89":3,"94":4,"99":10,"112":3,"120":3,"123":7,"124":2,"133":5,"148":6,"150":3,"152":9,"183":2,"201":1,"245":1,"266":3,"296":1,"300":4,"310":2,"311":5,"342":1,"346":1,"355":1,"356":3,"364":3,"418":1,"449":1,"504":1,"515":1,"595":2,"596":1,"597":1,"598":11,"600":1,"601":1,"602":2,"606":2,"609":2,"611":6,"612":1,"613":1,"617":1,"675":1,"692":2,"694":2,"696":3,"704":2,"708":2,"713":2}}],["ok",{"2":{"57":2,"475":1,"483":1,"495":1,"499":1,"502":1,"503":1,"507":1,"580":1,"631":2,"643":3}}],["oldservice",{"2":{"511":4,"515":4}}],["oldipmap",{"2":{"491":4}}],["oldinstance",{"2":{"485":3}}],["oldwindow的",{"2":{"437":2}}],["oldwindow",{"2":{"437":2}}],["oldval",{"2":{"389":1}}],["oldvalue",{"2":{"371":3}}],["oldtime",{"2":{"439":2}}],["oldthr",{"2":{"372":4}}],["oldtab指向hash桶数组",{"2":{"372":1}}],["oldtab",{"2":{"372":7}}],["oldcap",{"2":{"372":10}}],["old收集器",{"2":{"30":2}}],["old",{"2":{"30":2,"31":1,"32":2,"437":7,"515":1}}],["其run方法如下",{"2":{"499":1,"505":1}}],["其格式为",{"2":{"483":1}}],["其父类abstractautoserviceregistration也被初始化了",{"2":{"478":1}}],["其结构如下",{"2":{"474":1}}],["其项目结构",{"2":{"467":1}}],["其工作流如图",{"2":{"414":1}}],["其内部只有一个apply方法",{"2":{"401":1}}],["其内部是基于",{"2":{"339":1}}],["其直接继承接口有list与set",{"2":{"394":1}}],["其范围为",{"2":{"383":1}}],["其参数表示屏障拦截的线程数量",{"2":{"278":1}}],["其基本的特性就是在多线程环境下",{"2":{"270":1}}],["其它直接返回",{"2":{"431":1}}],["其它情况返回true",{"2":{"430":1}}],["其它数据类型和引用变量也可以进行相似操作",{"2":{"212":1}}],["其它线程才有机会获取该锁",{"2":{"230":1}}],["其它线程只能访问该对象的非同步方法",{"2":{"205":1}}],["其它线程是否可进入此对象的",{"0":{"205":1}}],["其它线程可以竞争获取锁",{"2":{"201":1}}],["其它要使用该资源的线程必须等待",{"2":{"179":1}}],["其它的构造函数必然也会有super语句的存在",{"2":{"55":1}}],["其次",{"2":{"174":1}}],["其他5个配置文件",{"2":{"671":1}}],["其他客户端的操作",{"2":{"585":1}}],["其他配置",{"2":{"410":1}}],["其他段的数据也能被其他线程访问",{"2":{"389":1}}],["其他线程尝试拿锁",{"2":{"708":1}}],["其他线程也访问同步方法",{"2":{"388":1}}],["其他线程再tryacquire",{"2":{"230":1}}],["其他的版本控制工具",{"2":{"522":1}}],["其他的",{"2":{"288":1}}],["其他的诸如reentrantreadwritelock",{"2":{"229":1}}],["其他条件可能还没有满足",{"2":{"165":1}}],["其他阻塞",{"2":{"159":1}}],["其上下文切换和模式切换的时间消耗非常少",{"2":{"145":1}}],["其实是由额外的线程执行的",{"2":{"716":1}}],["其实是把消费者的udp端口",{"2":{"518":1}}],["其实是指从宏观上看",{"2":{"160":1}}],["其实就是注册中心服务",{"2":{"479":1}}],["其实就是通过接口注入比较元素大小的算法",{"2":{"395":1}}],["其实就相当于是调用了一个普通函数而已",{"2":{"154":1}}],["其实原理在于每个容器的内部数据结构不同",{"2":{"335":1}}],["其实都是提供的乐观锁",{"2":{"221":1}}],["其实都是创建一个新的对象",{"2":{"118":1}}],["其实传递的引用的地址",{"2":{"100":1}}],["其实可以一句话来解释",{"2":{"2":1}}],["其目的是",{"0":{"71":1}}],["其子类都必须覆写这些抽象方法",{"2":{"64":1}}],["其中很优秀的设计都可以从其中看到",{"2":{"587":1}}],["其中healthcheckreactor",{"2":{"504":1}}],["其中nacos提供的心跳的api接口为",{"2":{"495":1}}],["其中同步的任务封装为一个distrodelaytask对象",{"2":{"492":1}}],["其中value就是instances",{"2":{"487":1}}],["其中就包含nacos的服务注册表",{"2":{"484":1}}],["其中registerinstance就是注册服务实例",{"2":{"480":1}}],["其中最关键的register",{"2":{"478":1}}],["其中跟服务注册有关的就是nacosserviceregistryautoconfiguration这个类",{"2":{"477":1}}],["其中包含一个set",{"2":{"474":1}}],["其中包含了java的开发工具",{"2":{"36":1}}],["其中",{"2":{"433":1}}],["其中基于滑动时间窗口算法维护了计数器",{"2":{"429":1}}],["其中的call方法",{"2":{"505":1}}],["其中的com",{"2":{"482":1}}],["其中的超时时间同样是在com",{"2":{"504":1}}],["其中的run方法业务逻辑如下",{"2":{"514":1}}],["其中的run方法",{"2":{"505":1}}],["其中的run方法为",{"2":{"504":1}}],["其中的run方法如下",{"2":{"503":1}}],["其中的onput方法已经分析过了",{"2":{"492":1}}],["其中的mapconsistencyservice",{"2":{"486":1}}],["其中的服务注册是在instancecontroller类中",{"2":{"482":1}}],["其中的start方法流程",{"2":{"478":1}}],["其中的spring",{"2":{"418":1,"421":1}}],["其中的bind方法如下",{"2":{"478":1}}],["其中的bin目录中的protoc",{"2":{"471":1}}],["其中的几个成员变量",{"2":{"435":1}}],["其中的开发工具",{"2":{"36":1}}],["其中提供了一系列静态方法",{"2":{"394":1}}],["其中利用了锁分段的思想提高了并发度",{"2":{"237":1}}],["其中前面的是monitorenter",{"2":{"201":1}}],["其中有一个index文件就是暂存区",{"2":{"532":1}}],["其中有一项就是",{"2":{"145":1}}],["其中有隐含的强制类型转换",{"2":{"48":1}}],["其中编辑时多态是静态的",{"2":{"61":1}}],["其中用于回收新生代的收集器包括serial",{"2":{"30":1}}],["下标从0开始",{"2":{"582":1}}],["下载",{"2":{"572":1}}],["下载完成后得到安装文件",{"2":{"526":1}}],["下载地址",{"2":{"526":1,"572":1}}],["下载source",{"2":{"466":1}}],["下载nacos源码",{"0":{"466":1}}],["下一次aof文件就会到100mb才进行重写",{"2":{"644":1}}],["下一次",{"2":{"441":1}}],["下一个slot",{"2":{"427":1}}],["下一个线程再进入",{"2":{"276":1}}],["下一个线程才可以访问",{"2":{"222":1}}],["下",{"2":{"186":2}}],["下的类",{"2":{"183":1}}],["下操作大量数据",{"2":{"128":2,"129":2}}],["下面的distroprotocol",{"2":{"492":1}}],["下面大部分内容其实在aqs类注释上已经给出了",{"2":{"230":1}}],["下面我以一个常见的面试题为例讲解一下",{"2":{"200":1}}],["下面只是给大家看两个有代表性的例子",{"2":{"120":1}}],["下面再总结一下java中方法参数的使用情况",{"2":{"99":1}}],["下面通过一个例子来说明线程死锁",{"2":{"148":1}}],["下面通过",{"2":{"99":1}}],["下面有具体的xx省",{"2":{"62":1}}],["下面是一段标准的使用",{"2":{"165":1}}],["下面是对象创建的主要流程",{"2":{"8":1}}],["下面是java程序运行机制详细说明",{"2":{"2":1}}],["下图展示了7种作用于不同分代的收集器",{"2":{"30":1}}],["仍需要进行局部对象移动",{"2":{"28":1}}],["清理之前所有的容器",{"2":{"560":1}}],["清理算法存在的内存碎片问题",{"2":{"28":1}}],["清空所有数据库中的数据",{"2":{"585":1}}],["清空当前数据库",{"2":{"585":1}}],["清空",{"2":{"33":1}}],["清除数据",{"2":{"249":1}}],["清除的算法实现的",{"2":{"31":1}}],["清除过程效率低",{"2":{"26":1}}],["清除阶段",{"2":{"26":1}}],["清除算法可以应用在老年代中",{"2":{"28":1}}],["清除算法的效率不高的问题",{"2":{"27":1}}],["清除算法的执行的过程如下图所示",{"2":{"26":1}}],["清除算法之所以是基础的",{"2":{"26":1}}],["清除算法",{"0":{"26":1},"2":{"25":1,"26":1,"30":1}}],["因争夺资源而造成的一种互相等待的现象",{"2":{"226":1}}],["因请求被占用资源而发生阻塞时",{"2":{"149":1}}],["因为这些位被置为",{"2":{"695":1}}],["因为这个",{"2":{"234":1}}],["因为相同的订单号势必会有订单插入失败",{"2":{"687":1}}],["因为相同的方法可以在同一个接口被多个类实现时有不同的表现",{"2":{"333":1}}],["因为一个槽位可以存储多个数据",{"2":{"668":1}}],["因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法",{"2":{"72":1}}],["因为每次git提交都会使用该用户信息",{"2":{"528":1}}],["因为每一个容器的自身特点不同",{"2":{"335":1}}],["因为是阻塞队列",{"2":{"490":1}}],["因为nacos的客户端是基于springboot的自动装配实现的",{"2":{"477":1}}],["因为项目一般有多个实例",{"2":{"465":1}}],["因为工作队列默认采用轮询方式发送消息",{"2":{"451":1}}],["因为滑动窗口最多分成samplecount数量的小窗口",{"2":{"437":1}}],["因为时间是无限的",{"2":{"437":1}}],["因为线程安全的问题",{"2":{"385":1}}],["因为线程阻塞涉及到用户态和内核态切换的问题",{"2":{"202":1}}],["因为bucket数组大小是2的幂",{"2":{"371":1}}],["因为会引起其他元素位置改变",{"2":{"357":1}}],["因为他无序",{"2":{"357":1}}],["因为效率较低",{"2":{"340":1}}],["因为集合是可变长度的",{"2":{"334":1}}],["因为在很多情况下都不需要打印调用栈就知道哪里出错了",{"2":{"328":1}}],["因为在程序运行时才确定具体的类",{"2":{"61":1}}],["因为本来",{"2":{"320":1}}],["因为如果存在",{"2":{"310":1}}],["因为编译器硬性规定",{"2":{"309":1}}],["因为使用有很多的安全隐患吧",{"2":{"260":1}}],["因为可以限制线程的数量并且可以回收再利用这些线程",{"2":{"257":1}}],["因为创建一个对象要获取内存资源或者其它更多资源",{"2":{"254":1}}],["因为reentrantreadwritelock也就是读写锁允许多个线程同时对某一资源进行读",{"2":{"230":1}}],["因为其他线程总是被持续地获得唤醒",{"2":{"226":1}}],["因为其他线程总是能在它之前持续地对该同步块进行访问",{"2":{"226":1}}],["因为非静态方法上的",{"2":{"205":1}}],["因为jvm中",{"2":{"200":1}}],["因为java程序在父类中找不到没有参数的构造方法可供执行",{"2":{"70":1}}],["因为访问静态",{"2":{"200":1}}],["因为静态成员不属于任何一个实例对象",{"2":{"200":1}}],["因为监视器锁",{"2":{"199":1}}],["因为生产者如果不释放对临界资源的占用权",{"2":{"177":1}}],["因为stop和suspend及resume一样都是过期作废的方法",{"2":{"171":1}}],["因为static是被类的实例对象所共享",{"2":{"56":1}}],["因为当线程获取到",{"2":{"165":1}}],["因为锁被其它线程所占用",{"2":{"159":1}}],["因为我们采用的是限流",{"2":{"438":1}}],["因为我们用锁本来就是想让他们互斥的",{"2":{"150":1}}],["因为我们上面也说过了一旦所有用户线程都结束运行",{"2":{"146":1}}],["因为字符串是不可变的",{"2":{"127":1}}],["因为内存的分配方式不一样",{"2":{"122":1}}],["因为object的equals方法是比较的对象的内存地址",{"2":{"94":1}}],["因为它都在blockingqueue的实现类中被处理了",{"2":{"363":1}}],["因为它可以确保",{"2":{"346":1}}],["因为它是",{"2":{"321":1}}],["因为它不会锁住整个对象",{"2":{"178":1}}],["因为它有以下优点",{"2":{"86":1}}],["因为它经过了彻底的测试和稳定",{"2":{"42":1}}],["因为类调用时需要实例化",{"2":{"59":1}}],["因为this必然会调用其它的构造函数",{"2":{"55":1}}],["因为",{"2":{"48":1,"99":1,"181":1,"352":3}}],["因为老年代的对象存活率会较高",{"2":{"28":1}}],["因此其注册表结构为一个map",{"2":{"494":1}}],["因此不保证同步结果的强一致性",{"2":{"492":1}}],["因此不能被重写",{"2":{"91":1}}],["因此数组长度只要大于samplecount",{"2":{"437":1}}],["因此数组中每一个格子放入一个时间窗",{"2":{"437":1}}],["因此查找的时候非常快",{"2":{"350":1}}],["因此写了一个catch块",{"2":{"323":1}}],["因此只需要用一到两句话描述即可",{"2":{"320":1}}],["因此他具有一个很明显的特性",{"2":{"251":1}}],["因此最后一个monitorexit是保证在异常情况下",{"2":{"201":1}}],["因此有必要通过javap命令",{"2":{"201":1}}],["因此返回",{"2":{"200":1}}],["因此会给低优先级的线程以运行的机会",{"2":{"170":1}}],["因此避免了死锁",{"2":{"150":1}}],["因此程序不可能正常终止",{"2":{"148":1}}],["因此在工具类",{"2":{"254":1}}],["因此在静态方法里",{"2":{"77":1}}],["因此在任何的语言",{"2":{"49":1}}],["因此如果某个成员变量是被所有对象所共享的",{"2":{"56":1}}],["因此需要保证提供给他们尽可能多的信息",{"2":{"318":1}}],["因此需要强制类型转换float",{"2":{"47":1}}],["因此需要特定的命令解析器执行引擎",{"2":{"2":1}}],["因此",{"2":{"38":1,"42":1,"48":1,"56":1,"70":1,"95":1,"99":1,"103":1,"106":1,"177":1,"271":1,"284":1,"316":1,"318":1,"321":1,"324":1,"328":1,"329":1,"354":1,"359":1,"426":1,"438":2,"439":1,"465":1}}],["因此java语言可以实现跨平台",{"2":{"36":1}}],["因此就出现了一种标记",{"2":{"28":1}}],["因此这类开销积少成多后也是非常可观的执行成本",{"2":{"13":1}}],["因此该区更关注的是数据的存储",{"2":{"5":1}}],["因此大小不固定",{"2":{"5":1}}],["因此性能慢些",{"2":{"5":1}}],["按从大到小的顺序进行排序",{"2":{"584":1}}],["按序号索引数据需要进行前向或后向遍历",{"2":{"354":1}}],["按位置读取元素的平均时间复杂度为",{"2":{"349":1}}],["按位与",{"2":{"51":1}}],["按某一顺序申请资源",{"2":{"150":1}}],["按细分的时间片轮流",{"2":{"140":1}}],["按操作对象分类结构图",{"2":{"105":1}}],["按操作方式分类结构图",{"2":{"105":1}}],["按照最早讲的责任链顺序",{"2":{"426":1}}],["按照作用分为两类node",{"2":{"415":1}}],["按照函数注释",{"2":{"371":1}}],["按照java惯例",{"2":{"284":1}}],["按照线程在队列中的排队顺序",{"2":{"230":1}}],["按照流的角色划分为节点流和处理流",{"2":{"105":1}}],["按照流的流向分",{"2":{"105":1}}],["按照操作单元划分",{"2":{"105":1}}],["按照容量划分二个大小相等的内存区域",{"2":{"25":1}}],["按值调用",{"2":{"99":1}}],["按顺序分配内存即可",{"2":{"27":1}}],["把锁的值设置成唯一值",{"2":{"709":1}}],["把key放到布隆过滤器中=================",{"2":{"696":1}}],["把所有配置文件放在一个目录去管理redis",{"2":{"669":1}}],["把原先通过docker搭建的redis给down掉",{"2":{"629":1}}],["把redis内存中的数据",{"2":{"624":1}}],["把myzset1和myzset2根据元素名称求出交集",{"2":{"584":1}}],["把资料中的nginx上传到服务器",{"2":{"560":1}}],["把名单列表以",{"2":{"430":1}}],["把各种不同的异常进行分类",{"2":{"290":1}}],["把实际",{"2":{"238":1}}],["把instance声明为volatile之后",{"2":{"214":1}}],["把这几个功能拆分成不同的接口",{"2":{"62":1}}],["把面向过程抽象成类",{"2":{"59":1}}],["把",{"2":{"33":1,"589":1}}],["把存活对象复制到另外一个区域中",{"2":{"27":1}}],["把内存分配的动作按照线程划分在不同的空间之中进行",{"2":{"10":1}}],["产生死锁的必要条件",{"2":{"225":1}}],["产生死锁的条件是什么",{"0":{"225":1}}],["产生了复制算法",{"2":{"27":1}}],["产生大量不连续的内存碎片",{"2":{"26":1}}],["提交事务",{"2":{"620":1,"622":1}}],["提交时间等信息都会记录到日志中",{"2":{"539":1}}],["提交时设置的message",{"2":{"539":1}}],["提交人",{"2":{"539":1}}],["提交",{"2":{"525":1,"620":1}}],["提交后修改版本标识",{"2":{"221":1}}],["提升了读写的性能",{"2":{"234":1}}],["提升了代码执行效率",{"2":{"217":1}}],["提升系统并发能力和性能",{"2":{"137":1}}],["提供系统资源使用率",{"2":{"255":1}}],["提供定时执行",{"2":{"255":1}}],["提供",{"2":{"210":1,"246":1}}],["提供多线程共享变量可见性和禁止指令重排序优化",{"2":{"206":1}}],["提供了拉取服务列表的接口",{"2":{"517":1}}],["提供了高性能的数据结构和算法",{"2":{"336":1}}],["提供了上百种针对不同情况的异常类型",{"2":{"327":1}}],["提供了更优雅的方式来实现资源的自动释放",{"2":{"301":1}}],["提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值",{"2":{"258":1}}],["提供了无条件的",{"2":{"220":1}}],["提供了非阻塞的方法",{"2":{"106":1}}],["提供了",{"2":{"106":1,"210":1,"251":1}}],["提供了两种参数传递的方式",{"2":{"99":1}}],["提供的异常",{"2":{"327":1}}],["提供的",{"2":{"18":1}}],["提高并发访问率",{"2":{"388":1}}],["提高代码复用性和可操作性",{"2":{"336":1}}],["提高代码灵活度",{"2":{"110":1}}],["提高线程的可管理性",{"2":{"255":1}}],["提高系统资源的使用率",{"2":{"255":1}}],["提高响应速度",{"2":{"255":1}}],["提高对资源的利用率",{"2":{"254":1}}],["提高程序运行速度",{"2":{"138":1}}],["提高",{"2":{"102":1}}],["提高了程序速度和质量",{"2":{"336":1}}],["提高了程序的拓展性",{"2":{"60":1}}],["提高了系统的安全性",{"2":{"118":1}}],["提高了垃圾回收的频率",{"2":{"26":1}}],["提高复用性和安全性",{"2":{"60":1}}],["优先选择增量复制",{"2":{"653":1}}],["优先捕获最具体的异常",{"0":{"321":1}}],["优先明确的异常",{"0":{"318":1}}],["优化",{"2":{"86":1}}],["优点是代码简洁",{"2":{"349":1}}],["优点是简单高效",{"2":{"30":1}}],["优点",{"0":{"445":1},"2":{"26":1,"27":1,"28":1,"59":2,"110":1}}],["优势",{"2":{"12":1,"13":1}}],["900",{"2":{"627":1,"629":1}}],["99",{"2":{"611":2}}],["999",{"2":{"598":1,"611":1}}],["927055595",{"2":{"528":1}}],["9次扰动",{"2":{"377":1}}],["965",{"2":{"324":1}}],["945",{"2":{"324":1}}],["9",{"0":{"25":1,"26":1,"27":1,"28":1,"29":1,"77":1,"101":1,"102":1,"103":1,"123":1,"167":1,"207":1,"311":1,"325":1,"341":1,"353":1,"383":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1},"1":{"26":1,"27":1,"28":1,"29":1,"102":1,"103":1,"435":1,"436":1,"437":2,"438":2,"439":1},"2":{"438":1,"448":1,"595":1,"649":1}}],["新写入的数据会创建一个数据副本",{"2":{"631":1}}],["新增的实例",{"2":{"515":1}}],["新增实例",{"2":{"485":2}}],["新增元素都需要时间",{"2":{"243":1}}],["新窗口",{"2":{"437":1}}],["新的实例就添加",{"2":{"485":1}}],["新的cap",{"2":{"372":1}}],["新的threshold",{"2":{"372":1}}],["新的数据从而不影响原有的数据",{"2":{"241":1}}],["新生成结点放入桶中",{"2":{"371":1}}],["新生代里有",{"2":{"33":1}}],["新生代使用的是复制算法",{"2":{"33":1}}],["新生代默认的空间占比总空间的",{"2":{"33":1}}],["新生代垃圾回收器一般采用的是复制算法",{"2":{"32":1}}],["新生代垃圾回收器和老年代垃圾回收器都有哪些",{"0":{"32":1}}],["新生代回收器",{"2":{"32":1}}],["新生代并行收集器",{"2":{"30":1}}],["新生代收并行集器",{"2":{"30":1}}],["新生代单线程收集器",{"2":{"30":1}}],["新生代基本采用复制算法",{"2":{"25":1}}],["新定义的线程继承于thread类",{"2":{"166":1}}],["新创建了一个线程对象",{"2":{"159":1}}],["新建hash桶数组",{"2":{"372":1}}],["新建",{"2":{"159":1}}],["新类的定义可以增加新的数据或新的功能",{"2":{"60":1}}],["新加了一个叫做元数据区的native内存区",{"2":{"24":1}}],["新来的成员总是加入队尾",{"2":{"6":1}}],["译者注",{"2":{"24":1}}],["请添加相应的proxy",{"2":{"410":1}}],["请将该异常抛给它的调用者",{"2":{"330":1}}],["请确保将原始异常设置为原因",{"2":{"325":1}}],["请问执行此段代码的输出是什么",{"2":{"311":1}}],["请记住",{"2":{"185":1}}],["请知道一条原则",{"2":{"178":1}}],["请说出与线程同步以及线程调度相关的方法",{"0":{"163":1}}],["请求参数",{"2":{"475":1,"495":1,"507":1}}],["请求路径",{"2":{"475":1,"495":1,"507":1}}],["请求路径\\t",{"2":{"405":1}}],["请求类型",{"2":{"475":1,"495":1,"507":1}}],["请求经过所有插槽",{"2":{"442":1}}],["请求量",{"2":{"438":1}}],["请求通过后的回调",{"2":{"429":1}}],["请求通过了",{"2":{"429":1}}],["请求计数器",{"2":{"429":1}}],["请求进入后逐个执行即可",{"2":{"414":1}}],["请求头等信息",{"2":{"400":1}}],["请求方式",{"2":{"400":1}}],["请求完成后销毁",{"2":{"182":1}}],["请求时",{"2":{"159":1}}],["请求与保持条件",{"2":{"149":1,"225":1}}],["请看",{"2":{"99":1}}],["请参考下java8",{"2":{"24":1}}],["请简单描述",{"0":{"15":1}}],["88行",{"2":{"589":1}}],["8845",{"2":{"495":1}}],["8848",{"2":{"465":1}}],["8888",{"2":{"409":1}}],["806行",{"0":{"635":1}}],["8080",{"2":{"417":1,"560":3,"563":2}}],["8089",{"2":{"417":1}}],["8082",{"2":{"407":1}}],["8081",{"2":{"407":3}}],["80",{"2":{"407":1,"410":1,"584":2,"598":1}}],["8的concurrenthashmap",{"2":{"388":1}}],["8的结构一样",{"2":{"388":1}}],["8在hashmap中新增了红黑树的数据结构",{"2":{"378":1}}],["8在解决哈希冲突时有了较大的变化",{"2":{"369":1}}],["8新增红黑树",{"0":{"378":1}}],["8主要解决或优化了一下问题",{"2":{"370":1}}],["8之后concurrenthashmap启用了一种全新的方式实现",{"2":{"387":1}}],["8之后",{"0":{"369":1}}],["8之前采用的是拉链法",{"2":{"368":1}}],["8之前",{"0":{"368":1}}],["8之前hashmap由数组+链表组成的",{"2":{"339":1}}],["8中还能看到",{"2":{"388":1}}],["8中的hash",{"2":{"377":1}}],["8中",{"2":{"372":1,"377":1,"389":1}}],["8中有哪些不同",{"0":{"367":1},"1":{"368":1,"369":1,"370":1}}],["8中对hashmap的实现做了优化",{"2":{"366":1}}],["8以后在解决哈希冲突时有了较大的变化",{"2":{"339":1}}],["8后",{"2":{"237":1}}],["8版本中",{"2":{"372":1}}],["8版本的一个优化的地方",{"2":{"372":1}}],["8版本",{"0":{"236":1},"1":{"237":1,"238":1,"239":1,"240":1,"241":1}}],["8",{"0":{"24":1,"76":1,"97":1,"98":1,"99":1,"122":1,"150":1,"166":1,"206":1,"227":1,"310":1,"324":1,"340":1,"352":1,"370":1,"382":1,"432":1,"433":1,"586":1,"689":1},"1":{"98":1,"99":1,"100":1,"433":1},"2":{"33":1,"117":2,"301":1,"385":1,"388":3,"389":1,"500":1,"512":1,"514":1,"572":3,"573":1,"615":1,"655":3,"660":3,"670":6}}],["ff",{"2":{"598":1}}],["flag",{"2":{"598":6,"606":3,"609":3,"696":2}}],["flushall",{"2":{"585":1}}],["flushdb",{"2":{"585":1}}],["flow",{"2":{"435":1,"438":2}}],["flowexception",{"2":{"435":1}}],["flowrule",{"2":{"435":4}}],["flowrule>",{"2":{"435":1}}],["flowrule>>",{"2":{"435":1}}],["flowrulechecker",{"2":{"435":1}}],["flowslot的限流判断最终都由trafficshapingcontroller接口中的canpass方法来实现",{"2":{"438":1,"439":1}}],["flowslot是负责限流规则的判断",{"2":{"434":1}}],["flowslot",{"0":{"434":1},"1":{"435":1,"436":1,"437":1,"438":1,"439":1},"2":{"414":1,"429":1}}],["float",{"0":{"47":1},"2":{"45":1,"47":3,"112":1,"117":1,"132":2,"372":3}}],["found",{"2":{"475":1,"484":1,"485":1,"491":1,"492":1,"495":1,"499":1,"502":2,"507":1}}],["forbidden",{"2":{"475":1,"495":1,"507":1}}],["foreach",{"2":{"347":1,"349":3}}],["forinputstring",{"2":{"324":1}}],["forname",{"2":{"111":1,"112":1,"308":1}}],["for",{"2":{"57":4,"85":1,"119":1,"152":1,"208":1,"245":2,"266":1,"271":1,"324":2,"347":1,"349":2,"355":1,"356":1,"371":2,"372":1,"389":1,"418":2,"429":1,"430":2,"435":1,"438":3,"440":1,"442":1,"479":1,"485":2,"490":2,"491":7,"492":3,"502":1,"503":1,"504":3,"505":3,"511":1,"517":1,"598":1,"602":2,"611":1,"613":1,"692":1,"694":1,"696":2,"704":1}}],["feignclient",{"2":{"405":1}}],["feignconfig",{"2":{"401":1,"405":2}}],["fh",{"2":{"389":1}}],["ft",{"2":{"372":3}}],["future",{"0":{"156":1},"2":{"156":4,"258":1,"259":1,"505":1}}],["futuretask详解",{"0":{"268":1}}],["futuretask等等皆是基于aqs的",{"2":{"229":1}}],["futuretask配合可以用来获取异步执行的结果",{"2":{"153":1}}],["futuretask",{"0":{"157":1},"2":{"152":5,"157":5}}],["function",{"2":{"418":1,"435":1}}],["fun",{"2":{"84":4}}],["full",{"2":{"23":1,"24":1,"243":1,"502":1,"514":1}}],["fatal",{"2":{"544":1}}],["fanoutmessage",{"2":{"453":1}}],["fanouttest",{"2":{"453":1}}],["fanoutbinding1",{"2":{"448":1}}],["fanoutqueue2",{"2":{"448":1}}],["fanoutqueue1",{"2":{"448":2}}],["fanout",{"2":{"448":6,"449":2,"453":1}}],["fanoutexchange",{"2":{"448":4,"453":2}}],["fanshe",{"2":{"112":1}}],["fallback",{"2":{"418":1}}],["false",{"2":{"51":1,"57":1,"94":1,"123":3,"133":2,"172":1,"371":1,"422":1,"430":3,"438":1,"439":4,"441":2,"478":1,"479":1,"495":2,"499":1,"504":2,"505":6,"511":1,"515":1,"517":3,"608":1}}],["factory",{"2":{"606":1,"611":2,"617":1,"675":1,"704":1}}],["factories声明需要就是自动装配的配置类",{"2":{"418":1,"421":1}}],["factor",{"2":{"372":1}}],["fasterxml",{"2":{"448":1}}],["fast机制",{"2":{"341":1}}],["fast",{"0":{"341":1},"2":{"341":1}}],["failoverreactor",{"2":{"511":3}}],["failover",{"2":{"511":1,"660":2}}],["failfast",{"2":{"479":1}}],["fail",{"0":{"341":1},"2":{"341":1}}],["failed",{"2":{"297":1,"300":1,"479":2,"491":1,"499":2,"505":1,"514":1,"517":1}}],["failure",{"2":{"31":1}}],["f",{"2":{"47":2,"330":1,"389":2,"505":2,"564":1,"643":1,"689":3}}],["f=3",{"0":{"47":1}}],["fromhalfopentoopen",{"2":{"442":1}}],["fromhalfopentoclose",{"2":{"442":1}}],["fromopentohalfopen",{"2":{"441":2}}],["from",{"2":{"33":7,"514":1,"558":1}}],["fix",{"2":{"498":1,"502":1}}],["fireentry",{"2":{"427":1,"428":1,"429":1,"430":1,"431":1,"432":2,"435":1,"440":1}}],["first应该就是",{"2":{"426":1}}],["first一定是这些实现类中的一个",{"2":{"426":1}}],["first",{"2":{"30":1,"95":1,"418":1,"426":2,"504":1}}],["filled",{"2":{"514":1}}],["filters",{"2":{"409":1}}],["filename",{"2":{"536":1}}],["filenotfoundexception",{"2":{"298":4,"315":1,"316":1,"317":1}}],["fileinputstream",{"2":{"301":1,"315":2,"316":2,"317":2}}],["filereader",{"2":{"296":1,"300":1}}],["file",{"2":{"296":4,"297":1,"300":5,"315":5,"316":5,"317":5,"625":1,"671":1}}],["filepath",{"2":{"296":2,"297":1,"298":2,"300":2}}],["files",{"2":{"107":9}}],["files的常用方法都有哪些",{"0":{"107":1}}],["fianlly",{"2":{"300":1}}],["finishcheck",{"2":{"505":1}}],["finish",{"2":{"468":1,"511":1}}],["finished",{"2":{"266":1,"479":1}}],["findbyid",{"2":{"417":1}}],["findsystemclass",{"2":{"308":1}}],["finalization",{"0":{"193":1}}],["finalize是object类的一个方法",{"2":{"193":1}}],["finalize是一个方法",{"2":{"54":1,"307":1}}],["finalize",{"0":{"193":1,"307":1},"2":{"193":1,"307":1}}],["finalize区别",{"0":{"54":1}}],["final可以修饰类",{"2":{"54":1,"307":1}}],["finally块必须对资源对象",{"2":{"330":1}}],["finally语句块总是会被执行",{"2":{"289":1}}],["finally一般作用在try",{"2":{"54":1,"307":1}}],["finally",{"0":{"54":1,"300":1,"307":1,"309":1,"310":2,"315":1,"316":1},"1":{"316":1,"317":1},"2":{"146":2,"183":1,"289":1,"290":1,"300":11,"301":2,"310":7,"311":1,"315":1,"316":2,"330":1,"418":1,"422":1,"423":1,"437":1,"499":1,"505":1,"511":1,"713":1}}],["final",{"0":{"53":1,"54":1,"66":1,"216":1,"307":1},"1":{"217":1},"2":{"66":2,"85":2,"88":1,"118":2,"119":1,"121":1,"128":1,"129":1,"217":1,"230":3,"245":1,"266":4,"271":2,"360":1,"371":2,"377":1,"480":1,"483":3,"503":1,"511":2,"512":1,"596":3,"597":4}}],["field",{"2":{"120":1,"313":1}}],["fifo",{"2":{"6":1}}],["会进行自旋",{"2":{"712":1}}],["会进入cluster类型的init",{"2":{"505":1}}],["会根据淘汰策略去删除指定的key",{"2":{"680":1}}],["会根据maximumpoolsize",{"2":{"181":1}}],["会先判断这个key是否过期",{"2":{"679":1}}],["会先计算对象的",{"2":{"95":1}}],["会删除哪些key",{"0":{"678":1}}],["会维护偏移量",{"2":{"653":1}}],["会优先加载aof文件",{"2":{"638":1}}],["会影响redis的性能",{"2":{"635":1,"641":1}}],["会阻塞redis服务器写入数据",{"2":{"631":1}}],["会阻塞当前线程",{"2":{"274":1}}],["会对aof进行优化",{"2":{"625":1}}],["会对service加锁",{"2":{"494":1}}],["会记录到日志中",{"2":{"538":1}}],["会发送udp广播给所有订阅者",{"2":{"519":1}}],["会开启定时任务",{"2":{"505":1}}],["会拷贝旧的实例列表",{"2":{"484":1}}],["会引入nacos",{"2":{"482":1}}],["会引起其他线程阻塞",{"2":{"206":1}}],["会保存在一个本地注册表中",{"2":{"474":1}}],["会在后台开启一个线程去执行这个操作",{"2":{"678":1}}],["会在注册时被调用",{"2":{"504":1}}],["会在nacos的consistency模块中编译出这些java代码",{"2":{"472":1}}],["会在字符串常量池中进行缓存",{"2":{"118":1}}],["会调用circuitbreaker的onrequestcomplete方法",{"2":{"442":1}}],["会调用tryacquire",{"2":{"230":1}}],["会获取processorslotchain对象",{"2":{"425":1}}],["会创建一个执行链",{"2":{"425":1}}],["会创建entrancenode",{"2":{"420":1}}],["会创建不同的defaultnode节点",{"2":{"415":1}}],["会从注册中心拉取服务列表",{"2":{"409":1}}],["会将其扩充为2的幂次方大小",{"2":{"385":1}}],["会将全部线程由等待池移到锁池",{"2":{"175":1}}],["会直接使用你给定的大小",{"2":{"385":1}}],["会直接抛出",{"2":{"364":1}}],["会直接返回缓存的引用",{"2":{"118":1}}],["会返回",{"2":{"364":1}}],["会用新的v覆盖掉旧的v",{"2":{"360":1}}],["会自动去加载dump",{"2":{"633":1}}],["会自动在后台启动redis的服务端",{"2":{"573":1}}],["会自动生成一个iterator",{"2":{"347":1}}],["会自动调用",{"2":{"301":1}}],["会拖累整个应用的性能",{"2":{"328":1}}],["会严重影响应用的性能",{"2":{"326":1}}],["会顺着调用栈去查找看是否有可以处理异常的代码",{"2":{"305":1}}],["会覆盖前面的",{"2":{"300":1}}],["会抛出nosuchmethoderror",{"2":{"330":1}}],["会抛出",{"2":{"281":1}}],["会继续往下执行",{"2":{"274":1}}],["会执行",{"2":{"310":1}}],["会执行钩子方法",{"2":{"256":1}}],["会执行线程的相应准备工作",{"2":{"155":1}}],["会清理掉",{"2":{"248":1}}],["会被清理掉",{"2":{"248":1}}],["会被gc自动回收掉",{"2":{"15":1}}],["会消耗内存",{"2":{"243":1}}],["会unpark",{"2":{"230":1}}],["会作用于类的所有对象实例",{"2":{"200":1}}],["会使用多个",{"2":{"695":1}}],["会使用",{"2":{"187":1}}],["会让生产者交出对临界资源的占用权",{"2":{"177":1}}],["会唤醒所有的线程",{"2":{"175":1}}],["会有多个处于就绪状态的线程在等待",{"2":{"160":1}}],["会把发生的异常传递给它",{"2":{"305":1}}],["会把",{"2":{"155":1}}],["会启动一个线程并使线程进入了就绪状态",{"2":{"155":1}}],["会首先检查字符串常量池",{"2":{"116":1}}],["会按照static块的顺序来执行每个static块",{"2":{"56":1}}],["会造成精度损失",{"2":{"47":1}}],["会采用copyonwrite技术",{"2":{"494":1}}],["会采用",{"2":{"31":1}}],["会触发完全垃圾回收",{"2":{"23":1,"24":1}}],["7006",{"2":{"670":2,"673":1,"674":1}}],["7005",{"2":{"670":2,"673":1}}],["7004",{"2":{"670":2,"673":1}}],["7003",{"2":{"655":1,"670":2,"673":1,"675":1}}],["7002",{"2":{"655":1,"670":2,"673":1,"675":1}}],["7001",{"2":{"655":1,"670":2,"671":3,"673":1,"675":1}}],["7的concurrenthashmap",{"2":{"388":1}}],["7的时候",{"2":{"388":1}}],["7的",{"2":{"388":1}}],["75",{"2":{"372":2}}],["7中的4次位运算",{"2":{"377":1}}],["7中",{"2":{"372":1,"377":1,"389":1}}],["7和jdk1",{"0":{"367":1},"1":{"368":1,"369":1,"370":1}}],["7提供的一个新收集器",{"2":{"30":1}}],["7",{"0":{"23":1,"42":1,"75":1,"93":1,"94":1,"95":1,"96":1,"121":1,"149":1,"165":1,"205":1,"226":1,"260":1,"309":1,"317":1,"323":1,"339":1,"351":1,"370":1,"381":1,"431":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"585":1,"602":1,"613":1,"688":1},"1":{"94":1,"95":1,"96":1,"546":1,"547":1,"548":1,"549":1,"550":1},"2":{"46":1,"106":1,"251":1,"301":1,"389":1,"573":1,"615":1,"655":1,"660":1}}],["则再次获取当前时间戳t2",{"2":{"714":1}}],["则再次进入open状态",{"2":{"441":1}}],["则给锁续命",{"2":{"712":1}}],["则把真实数据放入缓存",{"2":{"694":1}}],["则把刚才",{"2":{"439":1}}],["则向缓存中插入一个无用的数据并设置生存时间",{"2":{"694":1}}],["则放入到缓存中",{"2":{"690":1}}],["则查询数据库",{"2":{"690":1}}],["则认为master宕机了",{"2":{"660":1}}],["则认为主节点真的挂了",{"2":{"658":1}}],["则使用jdk序列化器",{"2":{"608":1}}],["则使用永久实例更合适",{"2":{"506":1}}],["则存储成功",{"2":{"598":1}}],["则什么都不做",{"2":{"580":1,"581":1,"598":1}}],["则设置成功",{"2":{"581":1}}],["则设置",{"2":{"580":1}}],["则说明git仓库创建成功",{"2":{"530":1}}],["则开启定时更新功能",{"2":{"511":1}}],["则删除实例",{"2":{"504":1}}],["则构建心跳信息beatinfo",{"2":{"496":1}}],["则先保存旧的实例列表",{"2":{"485":1}}],["则从",{"2":{"442":1}}],["则拒绝请求",{"2":{"439":1}}],["则添加到集合中",{"2":{"438":1}}],["则跳过",{"2":{"438":1}}],["则对defaultnode统计",{"2":{"435":1}}],["则对该节点加synchronized锁",{"2":{"389":1}}],["则浏览器的正常功能可能都会受到影响",{"2":{"407":1}}],["则为同域",{"2":{"407":1}}],["则执行删除操作",{"2":{"679":1}}],["则执行addcount",{"2":{"389":1}}],["则执行过程不是一条线的",{"2":{"144":1}}],["则直接以0为基础",{"2":{"580":1}}],["则直接创建新的map",{"2":{"485":1}}],["则直接返回旧值",{"2":{"389":1}}],["则直接在树中插入键值对",{"2":{"371":1}}],["则遍历链表更新节点或插入新节点",{"2":{"389":1}}],["则调用cas插入相应的数据",{"2":{"389":1}}],["则调用异常处理代码",{"2":{"305":1}}],["则是根据在同一个桶的位置中进行判断",{"2":{"372":1}}],["则是在不管有没捕获异常",{"2":{"309":1}}],["则将冲突的值加到链表中即可",{"2":{"368":1}}],["则将当前的key",{"2":{"366":1}}],["则将当前请求资源的线程设置为有效的工作线程",{"2":{"230":1}}],["则覆盖原始值",{"2":{"366":1}}],["则hashcode方法也必须被覆盖",{"2":{"360":1}}],["则hashcode一定也是相同的",{"2":{"95":1,"360":1}}],["则在此直接返回",{"2":{"330":1}}],["则永远不会到达应该处理更具体的",{"2":{"321":1}}],["则抛出该异常",{"2":{"313":1}}],["则必须用catch显示声明以便进一步处理",{"2":{"309":1}}],["则就不会跳回执行",{"2":{"289":1}}],["则需要校验哪些数据要更新",{"2":{"515":1}}],["则需要",{"2":{"499":1}}],["则需要在方法正常结束时和",{"2":{"300":1}}],["则需要通过代码避免该情况的发生",{"2":{"286":1}}],["则需要通过修改代码来进行避免",{"2":{"286":1}}],["则需要由虚拟机维护一个列表来记录那些内存是可用的",{"2":{"9":1}}],["则线程被阻塞",{"2":{"251":1}}],["则可以保证变量的修改可见性和原子性",{"2":{"215":1}}],["则升级偏向锁为轻量级锁",{"2":{"203":1}}],["则jvm会把该线程放入锁池",{"2":{"159":1}}],["则会使用全量复制",{"2":{"653":1}}],["则会报错",{"2":{"580":1}}],["则会用新列表直接覆盖旧实例列表",{"2":{"484":1}}],["则会被抑制",{"2":{"301":1}}],["则会被分到堆内存中",{"2":{"122":1}}],["则会跳过",{"2":{"300":1}}],["则会调用父类中",{"2":{"70":1}}],["则实例化一个字符串放到池中",{"2":{"116":1}}],["则该class的两个对象无论如何都不会相等",{"2":{"360":1}}],["则该线程会被阻塞",{"2":{"251":1}}],["则该线程结束生命周期",{"2":{"159":1}}],["则该",{"2":{"95":1}}],["则",{"2":{"95":2,"442":1}}],["则返回所有元素名称",{"2":{"584":1}}],["则返回false",{"2":{"430":2}}],["则返回它的引用",{"2":{"116":1}}],["则返回",{"2":{"94":1,"172":1}}],["则通过treeifybin方法转化为红黑树",{"2":{"389":1}}],["则通过puttreeval方法往红黑树中插入节点",{"2":{"389":1}}],["则通过",{"2":{"94":1}}],["则编译时将发生错误",{"2":{"70":1}}],["则证明此对象是可以被回收的",{"2":{"22":1}}],["从机被哨兵提升为新主机",{"2":{"714":1}}],["从缓存中获取数据",{"2":{"708":1}}],["从缓存中查询",{"2":{"704":1,"713":1}}],["从数据库查询",{"2":{"692":1,"694":1,"696":1,"704":1,"708":1,"713":1}}],["从节点才会顶上去工作",{"2":{"668":1}}],["从节点在主节点正常工作时",{"2":{"668":1}}],["从节点在复制主节点数据时",{"2":{"653":1}}],["从节点投票的数量",{"2":{"660":1}}],["从节点信息",{"2":{"656":1}}],["从节点主动发起全量复制",{"2":{"653":1}}],["从节点增量复制失败",{"2":{"653":1}}],["从节点初次连接主节点",{"2":{"653":1}}],["从节点会同步主节点的数据",{"2":{"652":1}}],["从节点只能读",{"2":{"652":1}}],["从一个列表的右边弹出元素",{"2":{"582":1}}],["从右边弹出一个元素",{"2":{"582":1}}],["从左边弹出一个元素",{"2":{"582":1}}],["从list中获取数据",{"2":{"582":1}}],["从远程仓库更新代码",{"2":{"540":2}}],["从远程仓库拉取",{"2":{"540":1}}],["从远程仓库克隆",{"0":{"531":1},"2":{"529":1,"540":1}}],["从request中获取namespaceid和servicename",{"2":{"517":1}}],["从request中获取请求来源",{"2":{"422":1}}],["从待更新列表中移除",{"2":{"511":1}}],["从服务信息中获取实例列表并返回",{"2":{"510":1}}],["从nacos的注册表中",{"2":{"502":1}}],["从阻塞队列中获取任务",{"2":{"490":1}}],["从多个实例中挑选一个去访问",{"2":{"465":1}}],["从closed到open",{"2":{"441":1}}],["从half",{"2":{"441":2}}],["从限流算法来看",{"2":{"434":1}}],["从底层数据统计角度",{"2":{"434":1}}],["从原来的o",{"2":{"366":1}}],["从双向链表中的任意一个结点开始",{"2":{"352":1}}],["从map集合中检索元素时",{"2":{"338":1}}],["从等待队列中选择另一个线程进入",{"2":{"270":1}}],["从内存位置",{"2":{"223":1}}],["从实践角度而言",{"2":{"210":1}}],["从名字就可以看出来了",{"2":{"156":1}}],["从逻辑上来看那些任务是同时执行",{"2":{"140":1}}],["从常量池中查找",{"2":{"94":1}}],["从设计层面来说",{"2":{"64":1}}],["从而提高并发写能力",{"2":{"494":1}}],["从而提高对应数组存储下标位置的随机性",{"2":{"384":1}}],["从而获取统计数据",{"2":{"420":1}}],["从而导致通过hashcode",{"2":{"383":1}}],["从而导致该引用调用的具体方法随之改变",{"2":{"61":1}}],["从而找到对应值",{"2":{"366":1}}],["从而产生fail",{"2":{"341":1}}],["从而达到让一条消息让所有消费者都接受到",{"2":{"452":1}}],["从而达到",{"2":{"333":1}}],["从而达到执行不同的行为",{"2":{"61":1}}],["从而可以更好地定位具体错误信息",{"2":{"320":1}}],["从而可以更好地避免或处理异常",{"2":{"319":1}}],["从而覆盖了原始异常",{"2":{"301":1}}],["从而避免",{"2":{"271":1}}],["从而减少创建和销毁线程对象的开销",{"2":{"254":1}}],["从而减低了锁带来的性能消耗",{"2":{"203":1}}],["从而浪费更多的",{"2":{"223":1}}],["从本质上讲",{"2":{"55":1,"69":1}}],["从永久代到元数据区",{"2":{"24":1}}],["从",{"2":{"22":1,"46":2,"132":1,"184":1,"223":1,"441":1}}],["从上图可以看",{"2":{"2":1}}],["0以后不是单线程",{"2":{"716":1}}],["0以前是单线程",{"2":{"716":1}}],["03",{"2":{"696":1}}],["0版本后默认就开启了混合持久化",{"2":{"646":1}}],["07",{"2":{"597":1,"598":1}}],["04",{"2":{"597":1,"598":1,"704":1}}],["0d",{"2":{"441":1,"442":2}}],["0表示成功",{"2":{"230":1}}],["0",{"2":{"22":1,"57":4,"85":1,"94":1,"99":5,"152":4,"245":8,"256":1,"266":1,"310":2,"330":1,"355":1,"371":3,"372":9,"377":1,"389":1,"418":1,"431":4,"435":2,"437":1,"438":3,"439":7,"442":2,"478":1,"485":1,"490":1,"491":2,"499":1,"502":1,"505":1,"511":1,"514":1,"515":3,"517":5,"558":1,"572":3,"573":1,"582":1,"584":6,"589":2,"595":1,"597":1,"598":8,"602":2,"611":2,"613":1,"615":1,"617":1,"631":8,"643":17,"655":3,"660":4,"668":1,"670":6,"695":1,"696":1,"704":2}}],["了thread1",{"2":{"185":1}}],["了",{"0":{"310":1},"2":{"22":1,"172":1,"185":1,"276":1}}],["存值",{"2":{"583":1}}],["存入到新集合中",{"2":{"584":1}}],["存入的数据顺序跟读取顺序相同",{"2":{"582":1}}],["存入的数据顺序跟读取顺序相反",{"2":{"582":1}}],["存入和取出顺序有可能不一致",{"2":{"338":1,"357":1}}],["存放服务列表变更的事件",{"2":{"489":1}}],["存放的内容",{"2":{"5":1}}],["存取高效",{"2":{"384":1}}],["存在所致",{"2":{"695":1}}],["存在",{"2":{"583":1,"585":1}}],["存在数据依赖关系的不允许重排序",{"2":{"195":1}}],["存在多个副本",{"2":{"75":1}}],["存储的是对key进行修改的命令",{"2":{"636":1}}],["存储对象",{"0":{"612":1},"2":{"612":1}}],["存储10000数据",{"2":{"602":1}}],["存储字节",{"2":{"601":1}}],["存储gender=1键值对",{"2":{"598":1}}],["存储结果的集合名",{"2":{"583":1}}],["存储介质",{"2":{"570":1}}],["存储pushservice中",{"2":{"518":1}}],["存储运送的信息",{"2":{"447":1}}],["存储时会把对象转成字节数组来存储",{"2":{"612":1}}],["存储时",{"2":{"366":1}}],["存储键",{"2":{"338":1}}],["存储元素的线程会等待队列可用",{"2":{"251":1}}],["存储在栈内存中",{"2":{"69":1}}],["存储在堆内存中",{"2":{"69":1}}],["存储位置",{"2":{"69":1}}],["存活的对象放入",{"2":{"33":1}}],["存活",{"2":{"22":1}}],["67",{"2":{"696":2}}],["679行",{"0":{"635":1}}],["69行",{"2":{"589":1}}],["64mb",{"2":{"635":1,"641":1,"644":2}}],["64",{"2":{"505":1}}],["6以后",{"2":{"388":1}}],["6380",{"2":{"696":1}}],["6379的master",{"2":{"660":1}}],["6379>",{"2":{"631":4,"643":8}}],["6379",{"2":{"573":2,"575":1,"595":1,"596":1,"597":1,"605":1,"615":2,"617":1,"655":5,"660":2,"696":2}}],["63",{"2":{"324":1}}],["65",{"2":{"324":2}}],["60",{"2":{"254":1,"606":1,"609":1,"627":1,"629":1,"694":1}}],["6版本关键要素",{"2":{"237":1}}],["6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升",{"2":{"215":1}}],["6对锁的实现引入了大量的优化",{"2":{"199":1}}],["6",{"0":{"22":1,"41":1,"57":1,"74":1,"89":1,"90":1,"91":1,"92":1,"120":1,"148":1,"157":1,"164":1,"204":1,"215":1,"225":1,"259":1,"301":1,"308":1,"322":1,"338":1,"350":1,"379":1,"380":1,"430":1,"540":1,"541":1,"542":1,"543":1,"544":1,"584":1,"599":1,"600":1,"601":1,"612":1,"644":1,"648":1,"687":1},"1":{"91":1,"92":1,"541":1,"542":1,"543":1,"544":1,"600":1,"601":1},"2":{"199":1,"203":1,"208":1,"330":1,"477":1,"584":1,"696":2}}],["幻影引用",{"2":{"21":1}}],["幽灵引用",{"2":{"21":1}}],["虚拟主机",{"2":{"448":1}}],["虚拟的双向队列即不存在队列实例",{"2":{"230":1}}],["虚拟机自动抛出并自动捕获",{"2":{"286":1}}],["虚拟机运行错误",{"2":{"284":1}}],["虚拟机将试图跟踪每一个对象",{"2":{"254":1}}],["虚拟机将每一条要执行的字节码送给解释器",{"2":{"38":1}}],["虚拟机中",{"2":{"180":1}}],["虚拟机中内存最大的一块",{"2":{"3":1}}],["虚拟机控制",{"2":{"162":1}}],["虚拟机的一项任务就是负责线程的调度",{"2":{"160":1}}],["虚拟机的实现",{"2":{"11":1}}],["虚拟机会将其分配到常量池中",{"2":{"122":1}}],["虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象",{"2":{"94":1}}],["虚拟机遇到一条new指令时",{"2":{"8":1}}],["虚拟机栈",{"2":{"3":1}}],["虚拟机规范规定的区域分为以下",{"2":{"3":1}}],["虚拟机规范",{"2":{"3":1}}],["虚拟机所管理的内存被划分为如下几个区域",{"2":{"3":1}}],["虚拟机在执行",{"2":{"3":1}}],["虚引用的用途是在",{"2":{"21":1}}],["虚引用",{"2":{"21":1}}],["弱引用",{"2":{"21":1}}],["软引用",{"2":{"21":1}}],["通用命令",{"0":{"585":1}}],["通配符规则",{"0":{"457":1}}],["通配符模式",{"0":{"456":1}}],["通信",{"2":{"164":1}}],["通知数据的处理由交给了hostreactor的processservicejson方法",{"2":{"515":1}}],["通知",{"2":{"110":1}}],["通知gc运行",{"2":{"20":1}}],["通讯",{"2":{"106":1}}],["通道",{"2":{"106":1}}],["通常是数据集较大",{"2":{"695":1}}],["通常用来对软件开发过程中的源代码文件进行管理",{"2":{"525":1}}],["通常遇到这种错误",{"2":{"303":1}}],["通常应用程序会被终止",{"2":{"303":1}}],["通常不会自定义该类异常",{"2":{"287":1}}],["通常不建议使用yield",{"2":{"170":1}}],["通常有",{"2":{"284":1}}],["通常被用于暂停执行",{"2":{"164":1}}],["通常被用于线程间交互",{"2":{"164":1}}],["通常一个进程都有若干个线程",{"2":{"144":1}}],["通常我们将一定要执行的代码方法finally代码块中",{"2":{"307":1}}],["通常我们将一定要执行的代码方法finally代码块",{"2":{"54":1}}],["通常",{"2":{"20":1,"291":1,"296":1}}],["通过docker",{"2":{"660":1}}],["通过bgsave命令会手动触发rdb",{"2":{"631":1}}],["通过一些方式永久的保存到磁盘上",{"2":{"624":1}}],["通过一个单线程的线程池来不断从阻塞队列中获取任务",{"2":{"490":1}}],["通过命令行客户端工具操作redis",{"0":{"590":1}}],["通过版本号就可以回到历史版本",{"2":{"537":1}}],["通过git",{"2":{"525":1,"539":1,"545":1}}],["通过git就可以管理和协调",{"2":{"523":1}}],["通过notifycenter发布服务变更的事件",{"2":{"513":1}}],["通过nio建立tcp连接",{"2":{"505":1}}],["通过new对象实现反射机制",{"2":{"112":1}}],["通过pushreceiver监听服务端推送的变更数据",{"2":{"513":1}}],["通过processtask来处理健康检测的任务",{"2":{"505":1}}],["通过post请求将上述参数",{"2":{"480":1}}],["通过两次扰动使得它自己的哈希值高低位自行进行异或运算",{"2":{"383":1}}],["通过使用jdk自带的集合类",{"2":{"336":1}}],["通过使用继承可以提高代码复用性",{"2":{"60":1}}],["通过这些在无关api之间的简易的互用性",{"2":{"333":1}}],["通过这种方式",{"2":{"245":1}}],["通过这种方式确定哪些对象是",{"2":{"20":1}}],["通过传入的类路径参数没有找到该类",{"2":{"308":1}}],["通过面向对象的方法进行异常处理",{"2":{"290":1}}],["通过引入一个",{"2":{"270":2}}],["通过threadpoolexecutor构造函数自定义参数创建",{"2":{"266":1}}],["通过源码分析",{"2":{"243":1}}],["通过内置的fifo队列来完成获取资源线程的排队工作",{"2":{"230":1}}],["通过某种方式不加锁来处理资源",{"2":{"222":1}}],["通过某种逻辑关联监视器",{"2":{"180":1}}],["通过自旋循环一定次数来获取锁",{"2":{"203":1}}],["通过jdk",{"2":{"201":1}}],["通过管道进行线程间通信",{"2":{"177":1}}],["通过调用线程的",{"2":{"159":1}}],["通过调用thread类的start",{"2":{"154":1}}],["通过并发编程的形式可以将多核cpu的计算能力发挥到极致",{"2":{"137":1}}],["通过类名",{"2":{"112":1}}],["通过类名实现反射机制",{"2":{"112":1}}],["通过建立对象",{"2":{"112":1}}],["通过路径实现反射机制",{"2":{"112":1}}],["通过反射机制来调用方法",{"2":{"330":1}}],["通过反射是可以修改所谓的",{"2":{"120":1}}],["通过反射加载数据库的驱动程序",{"2":{"111":1}}],["通过反射去调用对应的字节码",{"2":{"111":1}}],["通过上面的链地址法",{"2":{"378":1}}],["通过上面两张图可以很清晰的看出",{"2":{"99":1}}],["通过上面例子",{"2":{"99":1}}],["通过编辑之后会变成两个不同的函数",{"2":{"61":1}}],["通过",{"2":{"10":1,"99":1,"111":1,"148":1,"207":1,"265":1}}],["当请求并发数高的情况下",{"2":{"703":1}}],["当应用被冗余",{"2":{"686":1}}],["当应用试图在要求使用对象的地方使用了null时",{"2":{"313":1}}],["当应用试图根据字符串形式的类名构造类",{"2":{"313":1}}],["当hash环上的节点宕机的数量达到一半",{"2":{"668":1}}],["当redis",{"0":{"666":1}}],["当主节点宕机后",{"2":{"658":2,"668":1}}],["当从节点因为某些原因突然跟主节点断开后",{"2":{"653":1}}],["当提交时才执行队列中操作",{"2":{"620":1}}],["当安装git后首先要做的事情是设置用户名称和email地址",{"2":{"528":1}}],["当nacos中的服务列表更新时",{"2":{"519":1}}],["当服务列表变化时",{"2":{"518":1}}],["当快的消费者消费完成后",{"2":{"451":1}}],["当数组放满后",{"2":{"437":1}}],["当调用beatreactor的",{"2":{"498":1}}],["当调用自身服务不在同一模块中时",{"2":{"404":1}}],["当调用线程对象的",{"2":{"159":1}}],["当插入元素时会回调该方法比较元素的大小",{"2":{"395":1}}],["当处理固定大小的基本数据类型的时候",{"2":{"391":1}}],["当两个不同的输入值",{"2":{"375":1}}],["当两个或多个线程之间同时等待对方释放资源的时候就会形成线程之间的死锁",{"2":{"179":1}}],["当链表中的节点数据超过八个之后",{"2":{"366":1}}],["当链表长度大于阈值",{"2":{"339":1,"369":1,"385":1}}],["当在添加一个元素时",{"2":{"363":1}}],["当在方法上声明抛出异常时",{"2":{"319":1}}],["当读取到最后一个元素后停止",{"2":{"349":1}}],["当你抛出或捕获异常的时候",{"2":{"329":1}}],["当你尝试首先捕获较不具体的异常时",{"2":{"321":1}}],["当你以错误的格式提供",{"2":{"320":1}}],["当你在",{"2":{"317":1}}],["当你把对象加入",{"2":{"95":1}}],["当试图将一个string转换为指定的数字类型",{"2":{"313":1}}],["当试图通过newinstance",{"2":{"313":1}}],["当访问某个类的不存在的方法时抛出该异常",{"2":{"313":1}}],["当访问某个类的不存在的属性时抛出该异常",{"2":{"313":1}}],["当访问某个序列的索引值小于0或大于等于序列大小时",{"2":{"313":1}}],["当可用内存不足以让java虚拟机分配给一个对象时抛出该错误",{"2":{"313":1}}],["当使用类似inputstream这种需要使用后关闭的资源时",{"2":{"315":1}}],["当使用索引值访问某个字符串中的字符",{"2":{"313":1}}],["当使用",{"2":{"308":1}}],["当某个子系统故障",{"2":{"297":1}}],["当某个类除了它的外部类",{"2":{"87":1}}],["当try语句块内发生异常时",{"2":{"289":1}}],["当程序中可能出现这类异常时",{"2":{"286":1}}],["当程序员创建对象时",{"2":{"20":1}}],["当此类错误发生时",{"2":{"284":1}}],["当最大池被填满时",{"2":{"265":1}}],["当我们想拦截openfeign请求做验证和操作时",{"2":{"401":1}}],["当我们需要对某一个集合实现两种排序方式",{"2":{"393":1}}],["当我们put的时候",{"2":{"371":1}}],["当我们往hashmap中put元素时",{"2":{"366":1}}],["当我们不指定",{"2":{"265":1}}],["当我们调用system",{"2":{"54":1}}],["当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数",{"2":{"264":1}}],["当任务到达时",{"2":{"255":1}}],["当任务数增加时",{"2":{"254":1}}],["当消费者线程试图从中取出一个元素时",{"2":{"251":1}}],["当生产者线程试图向",{"2":{"251":1}}],["当iterator",{"2":{"241":1}}],["当线程要获取锁时",{"2":{"230":1}}],["当线程",{"2":{"224":1}}],["当线程获取该锁时",{"2":{"201":1}}],["当对",{"2":{"389":2}}],["当对数组的索引值为负数或大于等于数组大小时抛出",{"2":{"313":1}}],["当对一个共享变量执行操作时",{"2":{"223":1}}],["当对象对当前使用这个对象的应用程序变得不可触及的时候",{"2":{"23":1}}],["当多个线程对集合进行结构上的改变的操作时",{"2":{"341":1}}],["当多个线程尝试使用",{"2":{"221":1}}],["当多个线程同时访问同一个方法",{"2":{"182":1}}],["当有写入操作时",{"2":{"635":1,"641":1}}],["当有多个线程同时对单个",{"2":{"271":1}}],["当有多个线程同时执行这些类的实例包含的方法时",{"2":{"270":1}}],["当有其他线程需要读取时",{"2":{"210":1}}],["当有若干个线程都要使用某一共享资源时",{"2":{"179":1}}],["当其再次想要获取这个对象的锁的时候还是可以获取的",{"2":{"208":1}}],["当计数器值为0时",{"2":{"201":1}}],["当计数器为",{"2":{"22":1}}],["当队列空时",{"2":{"177":1}}],["当队列满时",{"2":{"177":2,"251":1}}],["当然也可以是",{"2":{"266":1}}],["当然",{"2":{"220":1,"229":1,"230":1}}],["当然这种概率已经非常小了",{"2":{"214":1}}],["当然你也可以让它锁住整个对象",{"2":{"178":1}}],["当然了",{"2":{"166":1}}],["当然在调用此方法的时候",{"2":{"163":1}}],["当",{"2":{"159":1,"305":1}}],["当分配到时间片后就可以开始运行了",{"2":{"155":1}}],["当发生死锁时",{"2":{"149":1}}],["当后台处理完成",{"2":{"106":1}}],["当面对十万甚至百万级连接的时候",{"2":{"106":1}}],["当时只是扩展",{"2":{"103":1}}],["当创建string类型的对象时",{"2":{"94":1}}],["当方法中发生异常",{"2":{"300":1}}],["当方法执行结束后",{"2":{"88":1}}],["当方法调用完",{"2":{"69":2}}],["当所在的方法的形参需要被匿名内部类使用时",{"2":{"85":1}}],["当超类对象引用变量引用子类对象时",{"2":{"61":1}}],["当年龄到达",{"2":{"33":1}}],["当剩余内存不能满足程序运行要求时",{"2":{"31":1}}],["当前实例的端口",{"2":{"480":1}}],["当前实例的ip地址",{"2":{"480":1}}],["当前服务处于未运行状态时",{"2":{"478":1}}],["当前时间",{"2":{"438":1,"439":1,"441":1,"504":2}}],["当前时间的",{"2":{"438":1}}],["当前节点",{"2":{"427":2}}],["当前节点加入上一节点的",{"2":{"427":1}}],["当前资源的",{"2":{"427":1}}],["当前资源节点",{"2":{"420":1}}],["当前面两步弄好之后",{"2":{"405":1}}],["当前线程删掉了别的线程上的锁",{"2":{"709":1}}],["当前线程并不会阻塞",{"2":{"274":1}}],["当前线程会被挂起",{"2":{"173":1}}],["当前线程到了就绪状态",{"2":{"168":1}}],["当前线程所执行的字节码的行号指示器",{"2":{"3":1}}],["当前任务在执行完",{"2":{"145":1}}],["当前商业虚拟机都采用分代收集的垃圾收集算法",{"2":{"29":1}}],["当一个携带参数的请求到来后",{"2":{"433":1}}],["当一个异常在应用的多个层级之间传递时",{"2":{"328":1}}],["当一个应用递归调用的层次太深而导致堆栈溢出或者陷入死循环时抛出该错误",{"2":{"313":1}}],["当一个应用试图通过java的new操作符构造一个抽象类或者接口时抛出该异常",{"2":{"313":1}}],["当一个应用试图访问",{"2":{"313":1}}],["当一个方法出现异常后便抛出一个异常对象",{"2":{"290":1}}],["当一个共享变量被",{"2":{"210":1}}],["当一个未捕获异常将造成线程中断的时候",{"2":{"187":1}}],["当一个线程占用锁访问其中一个段数据时",{"2":{"389":1}}],["当一个线程访问同步方法时",{"2":{"388":1}}],["当一个线程进入一个对象的",{"0":{"205":1}}],["当一个线程对共享的数据进行操作时",{"2":{"179":1}}],["当一个线程需要调用对象的",{"2":{"167":2}}],["当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用",{"2":{"145":1}}],["当一个对象实例作为一个参数被传递到方法中时",{"2":{"98":1}}],["当一个对象被当作参数传递到一个方法后",{"0":{"98":1}}],["当一个对象到",{"2":{"22":1}}],["当一块用完的时候将活着的对象复制到另一块上",{"2":{"25":1}}],["当gc确定一些对象为",{"2":{"20":1}}],["它使用的key和value的序列化器就是string序列化器",{"2":{"610":1}}],["它使java程序员在编写程序时不再考虑内存管理的问题",{"2":{"19":1}}],["它还提供了负载均衡和服务发现等功能",{"2":{"400":1}}],["它简化了与http服务交互的过程",{"2":{"400":1}}],["它有一个compare",{"2":{"393":1}}],["它有一个",{"2":{"393":1}}],["它有一个缺点不能解决循环引用的问题",{"2":{"22":1}}],["它提高了程序速度和质量",{"2":{"333":1}}],["它提供了对集合对象进行基本操作的通用接口方法",{"2":{"394":1}}],["它提供了",{"2":{"283":1}}],["它提供了一个交换的同步点",{"2":{"277":1}}],["它减少了程序设计的辛劳",{"2":{"333":1}}],["它接受一个",{"2":{"325":1}}],["它不仅会捕获所有异常",{"2":{"322":1}}],["它不面向任何特定的处理器",{"2":{"38":2}}],["它将被",{"2":{"320":1}}],["它将垃圾收集分为两个阶段",{"2":{"26":1}}],["它发现后面还有finally",{"2":{"310":1}}],["它主要用于回收在try块里打开的物力资源",{"2":{"289":1}}],["它要做的事情是",{"2":{"278":1}}],["它也可以实现线程间的技术等待",{"2":{"278":1}}],["它才执行",{"2":{"274":1}}],["它可用于通讯协议",{"2":{"470":1}}],["它可以让某一个线程等待直到倒计时结束",{"2":{"278":1}}],["它可以很好的控制线程之间的通信",{"2":{"251":1}}],["它可能打印在控制台或者日志文件中",{"2":{"186":1}}],["它摒弃了",{"2":{"238":1}}],["它被正确创建",{"2":{"217":1}}],["它对写并发应用有什么帮助",{"0":{"217":1}}],["它会列出每一个远程服务器的简称",{"2":{"541":1}}],["它会等待队列中的可用空间",{"2":{"363":1}}],["它会等待队列变为非空",{"2":{"363":1}}],["它会去内存中读取新值",{"2":{"210":1}}],["它会保证修改的值会立即被更新到主存",{"2":{"210":1}}],["它会释放这个对象的锁",{"2":{"167":1}}],["它需要满足以下两个条件",{"2":{"195":1}}],["它需要相当可观的处理器时间",{"2":{"145":1}}],["它负责为",{"2":{"162":1}}],["它相当于只有一个线程的任务",{"2":{"144":1}}],["它支持面向缓冲的",{"2":{"106":1}}],["它用来描述各种程序设计语言",{"2":{"99":1}}],["它们都允许直接按序号索引元素",{"2":{"354":1}}],["它们都将无法推进下去",{"2":{"148":1,"226":1}}],["它们会报告无法访问的代码块",{"2":{"321":1}}],["它们通常用于指示发生了异常情况",{"2":{"283":1}}],["它们可以自动的保证对于他们的操作是原子的并且不需要使用同步",{"2":{"270":1}}],["它们可以在当前正在执行的线程中工作",{"2":{"169":1}}],["它们将会串行执行",{"2":{"239":1}}],["它们中的一个或者全部都在等待某个资源被释放",{"2":{"148":1}}],["它们也不一定是相等的",{"2":{"95":1,"360":1}}],["它们的默认占比是",{"2":{"33":1}}],["它实际上是返回一个int整数",{"2":{"95":1}}],["它内部原理是什么呢",{"2":{"88":1}}],["它必须要实现继承的类或者实现的接口的所有抽象方法",{"2":{"85":1}}],["它的每个数据结点中都有两个指针",{"2":{"352":1}}],["它的类名很可能已经描述了这种错误",{"2":{"320":1}}],["它的子类型即线程池接口是",{"2":{"254":1}}],["它的主要用途并不是作为容器",{"2":{"251":1}}],["它的优势有",{"2":{"220":1}}],["它的状态不能在创建后再被修改",{"2":{"217":1}}],["它的执行便依赖于线程调度器的实现",{"2":{"162":1}}],["它的执行流程如下",{"2":{"33":1}}],["它的",{"2":{"127":1}}],["它的特点是模式简单使用方便",{"2":{"106":1}}],["它的特点是",{"2":{"95":1}}],["它的作用是限制某段代码块的并发数",{"2":{"276":1}}],["它的作用是判断两个对象的地址是不是相等",{"2":{"94":1}}],["它的作用也是判断两个对象是否相等",{"2":{"94":1}}],["它的创建方式外部类实例",{"2":{"83":1}}],["它当且仅当在类初次加载时会被初始化",{"2":{"75":1}}],["它多态的实现机制遵循一个原则",{"2":{"61":1}}],["它是一个runnable",{"2":{"503":1}}],["它是浏览器最核心也最基本的安全功能",{"2":{"407":1}}],["它是",{"2":{"238":1,"290":1}}],["它是异步非阻塞的io模型",{"2":{"106":1}}],["它是通过动态绑定来实现的",{"2":{"61":1}}],["它是根据参数列表的不同来区分不同的函数",{"2":{"61":1}}],["它是低优先级的",{"2":{"17":1}}],["它代表当前对象名",{"2":{"55":1}}],["它引用当前对象的直接父类中的成员",{"2":{"55":1}}],["它为每个字符制订了一个唯一的数值",{"2":{"49":1}}],["它把内存空间划为两个相等的区域",{"2":{"27":1}}],["垃圾的自动收集等",{"2":{"37":1}}],["垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源",{"2":{"191":1}}],["垃圾回收的优点和原理",{"0":{"19":1}}],["垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行的",{"2":{"191":1}}],["垃圾回收不会发生在永久代",{"2":{"23":1,"24":1}}],["垃圾回收器",{"0":{"31":1},"2":{"31":1,"193":1}}],["垃圾回收器可以马上回收内存吗",{"0":{"20":1}}],["垃圾回收器的基本原理是什么",{"0":{"20":1}}],["垃圾回收器通常作为一个单独的低级别的线程运行",{"2":{"19":1}}],["垃圾回收有分代复制垃圾回收",{"2":{"19":1}}],["垃圾回收机制有效的防止了内存泄露",{"2":{"19":1}}],["垃圾收集时",{"2":{"27":1}}],["垃圾收集时移动对象是非常普遍的行为",{"2":{"12":1}}],["垃圾收集器是否会立即释放对象占用的内存",{"0":{"192":1}}],["垃圾收集器在做垃圾回收的时候",{"2":{"22":1}}],["垃圾收集器",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1}}],["忘记或者错误的内存",{"2":{"18":1}}],["为已经存在的key设置过期时间",{"2":{"585":1}}],["为集合中指定的名称的元素增加分数",{"2":{"584":1}}],["为http",{"2":{"465":1}}],["为整体的操作做前置准备",{"2":{"447":1}}],["为例",{"2":{"429":1}}],["为例子来说明为什么要有",{"2":{"95":1}}],["为当前资源创建",{"2":{"427":1}}],["为当前资源创建一个新的",{"2":{"427":1}}],["为链表结点",{"2":{"371":1}}],["为红黑树结点",{"2":{"371":1}}],["为线程池提供创建新线程的线程工厂",{"2":{"264":1}}],["为止",{"2":{"230":1}}],["为空",{"2":{"203":1}}],["为",{"2":{"200":1,"248":2,"256":1}}],["为的是让线程",{"2":{"148":1}}],["为其他前台线程服务",{"2":{"146":1}}],["为每一个不同参数值设置令牌桶",{"2":{"433":1}}],["为每一个segment提供了线程安全的保障",{"2":{"237":1}}],["为每一个基本数据类型都引入了对应的包装类型",{"2":{"132":1}}],["为每个主节点分配一个从节点",{"2":{"673":1}}],["为每个原始类型提供了包装类型",{"2":{"132":1}}],["为每个对象创建一个引用计数",{"2":{"22":1}}],["为了保证高可用",{"2":{"668":1}}],["为了更好的学习git",{"2":{"532":1}}],["为了能让",{"2":{"384":1}}],["为了针对这个问题",{"2":{"378":1}}],["为了减少散列的碰撞",{"2":{"371":1}}],["为了和同事更好的合作",{"2":{"329":1}}],["为了解决这个问题",{"2":{"270":1,"451":1}}],["为了解决标记",{"2":{"27":1}}],["为了让大家更清楚上面的面试题中的一些概念",{"2":{"266":1}}],["为了让这些线程都能得到有效执行",{"2":{"145":1}}],["为了提供性能",{"2":{"195":1}}],["为了实现监视器的互斥功能",{"2":{"180":1}}],["为了防止死锁的发生",{"2":{"179":1}}],["为了完善",{"2":{"102":1}}],["为一个引用",{"2":{"94":1}}],["为什么hashmap中string",{"0":{"381":1}}],["为什么不推荐使用线程组",{"2":{"260":1}}],["为什么在",{"0":{"260":1}}],["为什么使用",{"0":{"257":1}}],["为什么会有两个monitorexit呢",{"2":{"201":1}}],["为什么代码会重排序",{"0":{"195":1}}],["为什么线程通信的方法",{"0":{"166":1}}],["为什么我们不能直接调用",{"0":{"155":1}}],["为什么我们调用",{"0":{"155":1}}],["为什么重写equals时必须重写hashcode方法",{"2":{"95":1}}],["为什么要使用并发编程",{"0":{"137":1}}],["为什么要有",{"2":{"95":1}}],["为什么要加final呢",{"2":{"88":1}}],["为什么要gc",{"0":{"18":1}}],["为什么变量必须要加上final呢",{"2":{"88":1}}],["为什么变量必须要加上final",{"0":{"88":1}}],["为什么",{"0":{"72":1,"99":1,"165":1,"167":1,"169":1,"356":1},"2":{"281":1}}],["为什么说static块可以用来优化程序性能",{"2":{"56":1}}],["为对象分配内存",{"0":{"9":1}}],["guanxiaotong",{"2":{"704":1}}],["guanyu",{"2":{"598":1,"611":1}}],["gui",{"2":{"526":1}}],["ghy",{"2":{"597":1,"598":3,"606":1,"611":1,"617":1,"675":1,"704":2}}],["ghyredis",{"2":{"589":1,"595":1,"596":1,"597":1,"605":1,"696":1}}],["gz的安装方式下",{"2":{"587":1}}],["gz",{"2":{"572":2}}],["gz安装",{"0":{"572":1}}],["git工作区中的文件存在两种状态",{"2":{"533":1}}],["git工作区中文件的状态",{"0":{"533":1}}],["git隐藏文件夹就是版本库",{"2":{"532":1}}],["git文件夹中有很多文件",{"2":{"532":1}}],["git文件夹的目录就是工作区",{"2":{"532":1}}],["git文件夹",{"2":{"530":1}}],["git全局设置",{"0":{"528":1}}],["git常用命令",{"0":{"527":1},"1":{"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1}}],["git安装目录结构如下",{"2":{"526":1}}],["git下载与安装",{"0":{"526":1}}],["git简介",{"0":{"525":1}}],["git概述",{"0":{"524":1},"1":{"525":1,"526":1}}],["git通过仓库管理文件",{"2":{"523":1}}],["git支持多人协作",{"2":{"523":1}}],["git存在分支的概念",{"2":{"523":1}}],["git在管理文件过程中会记录日志",{"2":{"523":1}}],["git是一个分布式版本控制工具",{"2":{"522":1}}],["git",{"0":{"520":1,"535":1,"536":1,"537":1,"538":1,"539":1,"541":1,"542":1,"543":1,"544":1},"1":{"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"527":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1},"2":{"525":4,"526":3,"528":3,"531":1,"534":5,"535":2,"536":3,"537":3,"538":2,"539":1,"540":14,"541":2,"542":1,"543":1,"544":2,"545":5,"546":4,"547":1,"548":1,"549":1,"550":1}}],["github",{"2":{"466":2,"471":1}}],["global",{"2":{"528":2}}],["globalexecutor",{"2":{"505":2}}],["globalconfig",{"2":{"487":1}}],["globalcors",{"2":{"409":1}}],["groupedservicename",{"2":{"480":4,"496":4,"498":1}}],["group",{"2":{"479":4,"480":2,"483":1,"484":1}}],["groupname",{"2":{"475":1,"480":6,"495":1,"496":3,"507":1,"510":3}}],["groupid>junit",{"2":{"595":1}}],["groupid>redis",{"2":{"595":1}}],["groupid>com",{"2":{"417":1,"448":1,"465":1}}],["groupid>",{"2":{"403":2,"409":1,"417":1,"448":2,"465":1,"595":3,"601":1,"604":1,"696":1}}],["groupid>org",{"2":{"403":2,"409":1,"448":1,"595":1,"601":1,"604":1,"696":1}}],["green",{"2":{"455":1}}],["grade",{"2":{"435":2,"438":4,"442":1}}],["go",{"2":{"418":1}}],["goods",{"2":{"415":2}}],["gfedcba",{"2":{"124":2}}],["genericobjectpoolconfig",{"2":{"596":3,"597":3,"598":1}}],["generateinstanceid",{"2":{"485":1}}],["generated",{"2":{"99":1}}],["gender",{"2":{"585":1,"598":7,"606":1,"629":1,"643":2}}],["gethosts",{"2":{"510":1,"515":2}}],["getmapping",{"2":{"517":1}}],["getmax",{"2":{"505":1}}],["getmessage",{"2":{"499":1,"505":1}}],["getmetadata",{"2":{"480":1,"499":1,"502":1,"517":1}}],["getglobalconfig",{"2":{"504":1}}],["getgroupname",{"2":{"499":1,"505":1,"515":2}}],["getgroupedname",{"2":{"480":1,"496":1,"510":2}}],["getgroup",{"2":{"479":1}}],["getpushcachemillis",{"2":{"517":1}}],["getpushreceiverudpport",{"2":{"514":1}}],["getpushservice",{"2":{"491":1,"503":1,"504":1}}],["getperiod",{"2":{"498":2,"499":1}}],["getprocessor",{"2":{"492":1}}],["getport",{"2":{"478":1,"479":1,"480":1,"498":1,"499":1,"500":1,"502":2,"503":2,"505":1}}],["getkey",{"2":{"491":2,"511":3,"515":3}}],["getvalue",{"2":{"491":1,"504":2,"505":3,"611":1}}],["getvalue1",{"2":{"490":1}}],["getvalue0",{"2":{"490":1}}],["gettcphealthparams",{"2":{"505":1}}],["gettcphealthcheckmonitor",{"2":{"505":1}}],["gettask",{"2":{"505":1}}],["gettaskdispatchperiod",{"2":{"487":1}}],["gettotalcount",{"2":{"442":1}}],["getdata",{"2":{"514":1}}],["getdatumkey",{"2":{"485":3,"491":1}}],["getdom2beatsizemonitor",{"2":{"498":1}}],["getdefaultcachemillis",{"2":{"517":2}}],["getdefckport",{"2":{"505":1}}],["getdelaytaskexecuteengine",{"2":{"492":2}}],["getdeclaredfield",{"2":{"120":1,"271":1}}],["getnacosinstancefromregistration",{"2":{"479":1}}],["getnamespaceid",{"2":{"485":1,"491":1,"505":3}}],["getname",{"2":{"99":4,"112":3,"152":7,"245":1,"266":2,"427":3,"428":1,"430":1,"431":5,"432":1,"435":1,"440":1,"485":2,"491":5,"503":2,"504":1,"505":6,"515":2}}],["getweight",{"2":{"480":1,"499":1,"502":1}}],["getwebserver",{"2":{"478":1}}],["getwindowintervalinsec",{"2":{"438":1}}],["getelement",{"2":{"598":1}}],["geterrmsg",{"2":{"499":1}}],["geterrcode",{"2":{"499":1}}],["geterrorcount",{"2":{"442":1}}],["geterror",{"2":{"442":1}}],["getenginelog",{"2":{"492":2}}],["getentrycallbacks",{"2":{"429":1}}],["getentrytype",{"2":{"429":1,"431":1}}],["getoccupytimeout",{"2":{"438":1}}],["getorcreateoriginnode",{"2":{"428":1}}],["getoriginnode",{"2":{"429":3}}],["getorigin",{"2":{"428":2,"430":2}}],["getrule",{"2":{"440":2}}],["getrater",{"2":{"435":2}}],["getregistration",{"2":{"478":2}}],["getresource",{"2":{"596":1,"597":3,"598":5,"600":1,"601":1,"602":2}}],["getresourcekey",{"2":{"492":1}}],["getresourcetype",{"2":{"428":1,"492":1}}],["getresourcename",{"2":{"418":1,"422":1}}],["getrequestattributename",{"2":{"422":1}}],["getlock",{"2":{"713":1}}],["getlastreftime",{"2":{"515":4}}],["getlastbeat",{"2":{"504":2}}],["getlastnode",{"2":{"427":1}}],["getlimitapp",{"2":{"430":4,"435":2,"440":1}}],["getipdeletetimeout",{"2":{"504":1}}],["getip",{"2":{"479":1,"480":1,"498":1,"499":1,"500":1,"502":2,"503":2,"505":2}}],["getid",{"2":{"428":1,"600":2,"601":1,"612":2}}],["getint",{"2":{"310":2}}],["getinstanceheartbeattimeout",{"2":{"504":1}}],["getinstanceheartbeatinterval",{"2":{"502":1}}],["getinstancelist",{"2":{"485":1,"491":1}}],["getinstanceid",{"2":{"485":2,"499":1,"502":1}}],["getinstances",{"2":{"465":1}}],["getinstance",{"2":{"214":1,"502":1}}],["getudpport",{"2":{"511":1}}],["geturi",{"2":{"465":1}}],["getuseragent",{"2":{"517":1}}],["getuserid",{"2":{"417":1}}],["getuser",{"2":{"401":1}}],["getunsafe",{"2":{"271":1}}],["getuniqueinstance",{"2":{"200":2}}],["getuncaughtexceptionhandler",{"2":{"187":1}}],["getchecksum",{"2":{"517":1}}],["getconfiguration",{"2":{"478":1}}],["getcontext",{"2":{"425":1}}],["getcontextname",{"2":{"422":1}}],["getcircuitbreakers",{"2":{"440":1}}],["getcurrentcpuusage",{"2":{"431":1}}],["getcurrentsystemavgload",{"2":{"431":1}}],["getcurentry",{"2":{"428":1,"429":4,"441":1,"442":1}}],["getclientbeatinterval",{"2":{"502":1}}],["getclusters",{"2":{"515":2}}],["getcluster",{"2":{"499":1,"500":1,"502":2,"503":1,"505":2}}],["getclustermap",{"2":{"485":2,"491":1,"503":1,"505":1}}],["getclustername",{"2":{"480":1,"485":4,"491":7}}],["getclusternode",{"2":{"428":1}}],["getclassloader",{"2":{"608":1}}],["getclass",{"2":{"112":1,"608":1}}],["getc",{"2":{"330":1}}],["getbloomfilter",{"2":{"696":1}}],["getblockerror",{"2":{"441":1}}],["getb",{"2":{"330":1}}],["getbytes",{"2":{"126":1,"601":1}}],["getallinstances",{"2":{"510":1}}],["getalltaskkeys",{"2":{"492":1}}],["getaddress",{"2":{"492":2,"514":1}}],["getapplicationcontext",{"2":{"478":1}}],["getauthorityrules",{"2":{"430":1}}],["getargs",{"2":{"418":2}}],["getannotation",{"2":{"418":1}}],["geta",{"2":{"330":1}}],["getscore",{"2":{"598":1,"611":1}}],["getset",{"2":{"580":2}}],["getserviceinfo0",{"2":{"511":2}}],["getserviceinfodirectlyfromserver",{"2":{"510":1}}],["getserviceinfo",{"2":{"510":1,"511":2}}],["getserviceid",{"2":{"479":2}}],["getservicename",{"2":{"499":3,"500":1,"517":1}}],["getservice",{"2":{"484":2,"491":2,"502":1,"503":1,"505":4,"511":1,"517":1}}],["getservernamespace",{"2":{"478":1}}],["getstarttime",{"2":{"505":1}}],["getstate",{"2":{"230":1}}],["getstrategy",{"2":{"430":1}}],["getsuppressed",{"2":{"301":1}}],["get",{"2":{"112":1,"120":1,"148":10,"150":9,"152":1,"153":1,"157":1,"241":1,"245":1,"248":1,"258":1,"355":1,"388":1,"409":1,"410":1,"423":3,"427":2,"430":1,"431":1,"437":1,"438":1,"439":2,"441":2,"442":2,"478":1,"485":2,"490":2,"491":3,"499":3,"503":1,"505":1,"507":1,"511":1,"512":1,"515":1,"517":1,"572":2,"580":2,"586":1,"595":1,"597":1,"598":1,"600":1,"601":1,"606":1,"609":1,"612":1,"617":1,"631":1,"675":1,"684":1,"692":1,"694":1,"696":1,"704":1,"708":1,"713":1}}],["gateway",{"2":{"409":3}}],["gateway网关解决跨域问题",{"0":{"409":1}}],["garbage",{"2":{"30":1,"193":1}}],["gabage",{"2":{"18":1}}],["g1回收的范围是整个java堆",{"2":{"30":1}}],["g1收集器不同于之前的收集器的一个重要特点是",{"2":{"30":1}}],["g1收集器基于",{"2":{"30":1}}],["g1收集器是jdk1",{"2":{"30":1}}],["g1",{"2":{"30":1,"32":1}}],["gcc",{"2":{"572":1}}],["gc本来就是内存回收了",{"2":{"193":1}}],["gc是非常重要的原因",{"2":{"23":1,"24":1}}],["gc是什么",{"0":{"18":1}}],["gc就有责任回收这些内存空间",{"2":{"20":1}}],["gc就开始监控这个对象的地址",{"2":{"20":1}}],["gc采用有向图的方式记录和管理堆",{"2":{"20":1}}],["gc",{"2":{"18":2,"20":1,"21":2,"22":2,"23":1,"24":1,"31":1,"54":1,"182":1,"243":2}}],["gt",{"2":{"8":1,"38":6,"147":2,"200":2,"371":3,"474":5,"494":3,"644":1}}],["进的键值只要有一个",{"2":{"385":1}}],["进而无法匹配存储位置",{"2":{"383":1}}],["进而改变通过获得的value引用改变数组的结构",{"2":{"120":1}}],["进一步使得遍历复杂度降低至o",{"2":{"378":1}}],["进一步降低hash碰撞的概率",{"2":{"377":1}}],["进行验证是否删除的是自己的锁",{"2":{"709":1}}],["进行自增",{"2":{"580":1}}],["进行扩容",{"2":{"371":3}}],["进行转换",{"2":{"351":1}}],["进行声明抛出",{"2":{"286":1}}],["进行",{"2":{"223":1,"695":1}}],["进行了一些操作变成了",{"2":{"223":1}}],["进行了非常多的改进",{"2":{"208":1}}],["进行比较的预期原值",{"2":{"221":1}}],["进行回收",{"2":{"17":1}}],["进入到三个容器的内部",{"0":{"656":1}}],["进入到了servicemanager",{"2":{"483":1}}],["进入容器内部",{"2":{"629":1,"643":1}}],["进入这个目录中",{"2":{"530":1}}],["进入dosrvipxt",{"2":{"517":1}}],["进入1",{"2":{"511":1}}],["进入tcpsupersenseprocessor的process方法",{"2":{"505":1}}],["进入trueenter方法",{"2":{"423":1}}],["进入初始化逻辑",{"2":{"505":1}}],["进入instancecontroller类",{"2":{"483":1}}],["进入nacos",{"2":{"472":1}}],["进入exceptioncircuitbreaker的onrequestcomplete方法",{"2":{"442":1}}],["进入entrywithpriority方法",{"2":{"425":1}}],["进入passlocalcheck",{"2":{"435":1}}],["进入下一个",{"2":{"430":1,"431":1,"432":1}}],["进入下一个循环条件",{"2":{"57":1}}],["进入规则校验的相关slot了",{"2":{"429":1}}],["进入同步代码库前要获得给定对象的锁",{"2":{"200":1}}],["进入同步代码前要获得当前对象实例的锁",{"2":{"200":1}}],["进程已获得资源",{"2":{"225":1}}],["进程已结束",{"2":{"154":1}}],["进程的进程",{"2":{"186":1}}],["进程是操作系统资源分配的基本单位",{"2":{"144":1}}],["进程与线程的区别",{"0":{"144":1}}],["进程中的一个执行任务",{"2":{"143":1}}],["进程",{"2":{"143":1,"149":6}}],["进栈",{"2":{"6":1}}],["才能正常操作",{"2":{"590":1}}],["才能继续往下执行",{"2":{"274":1}}],["才进行初始化",{"2":{"478":1}}],["才等价于h",{"2":{"383":1}}],["才会允许其他redis客户端正常向服务器写入数据",{"2":{"631":1}}],["才会回来执行try或者catch块中的return或者throw语句",{"2":{"289":1}}],["才会触发执行",{"2":{"17":1}}],["才由",{"2":{"270":1}}],["才诞生了读写锁",{"2":{"234":1}}],["才真正回收对象占用的内存空间",{"2":{"193":1}}],["才",{"2":{"159":1}}],["才需要同步锁",{"2":{"10":1}}],["四个特性",{"2":{"619":1}}],["四",{"0":{"16":1,"108":1,"218":1,"314":1,"390":1,"406":1,"507":1,"560":1,"578":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"109":1,"110":1,"111":1,"112":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"391":1,"392":1,"393":1,"394":1,"395":1,"407":1,"408":1,"409":1,"410":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1}}],["长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露",{"2":{"15":1}}],["但",{"2":{"716":1}}],["但很多时候",{"2":{"454":1}}],["但相比于hashcode返回的int类型",{"2":{"376":1}}],["但threshold大于零",{"2":{"372":1}}],["但在1",{"2":{"372":1}}],["但在代码运行期时",{"2":{"330":1}}],["但仍是非线程安全的",{"2":{"370":1}}],["但插入和删除容易",{"2":{"367":1,"376":1}}],["但插入数据时只需要记录当前项的前后项即可",{"2":{"354":1}}],["但性能上较arraylist差",{"2":{"354":1}}],["但同时该",{"2":{"347":1}}],["但现实是经常会出现无法预料的异常",{"2":{"323":1}}],["但问题在于",{"2":{"321":1}}],["但aqs也支持自定义同步器同时实现独占和共享两种方式",{"2":{"230":1}}],["但要注意",{"2":{"230":1}}],["但没有剩余可用资源",{"2":{"230":1}}],["但可能存在潜藏的问题",{"2":{"223":1}}],["但可以被重载",{"2":{"91":1}}],["但毕竟还是有的嘛~",{"2":{"214":1}}],["但用volatile修饰long和double可以保证其操作原子性",{"2":{"213":1}}],["但无法保证原子性",{"2":{"213":1}}],["但此时",{"2":{"200":1}}],["但这经常会给同一个异常输出多条日志",{"2":{"324":1}}],["但这里并不是说要对错误信息长篇大论",{"2":{"320":1}}],["但这样",{"2":{"234":1}}],["但这依赖于线程调度的实现",{"2":{"184":1}}],["但这不能说明反射机制没有用",{"2":{"111":1}}],["但它并不能保证原子性",{"2":{"212":1}}],["但它需要重新获取该对象的锁",{"2":{"174":1}}],["但它一般有两种使用情况",{"2":{"94":1}}],["但却要冒多线程不安全的风险",{"2":{"128":1,"129":1}}],["但却不能调用两个",{"2":{"55":1}}],["但实际上很有规则",{"2":{"105":1}}],["但对对象引用的改变是不会影响到调用者的",{"2":{"98":1}}],["但不能用void声明构造函数",{"2":{"73":1}}],["但不能选择性地继承父类",{"2":{"60":1}}],["但oracle",{"2":{"42":1}}],["但小程序的主类要求必须是public类",{"2":{"39":1}}],["但只能有一个类是主类",{"2":{"39":1}}],["但是我们期望的是第一次查询数据库",{"2":{"703":1}}],["但是我们也可以通过",{"2":{"286":1}}],["但是缓存空间占用很少",{"2":{"695":1}}],["但是需要更新",{"2":{"511":1}}],["但是无论是性能",{"2":{"470":1}}],["但是响应无法返回",{"2":{"407":1}}],["但是要求传入第二个参数",{"2":{"395":1}}],["但是已经简化了属性",{"2":{"388":1}}],["但是concurrenthashmap都不允许",{"2":{"387":1}}],["但是当我们的hashmap中存在大量数据时",{"2":{"378":1}}],["但是set只能用迭代",{"2":{"357":1}}],["但是插入元素要涉及数组元素移动等内存操作",{"2":{"354":1}}],["但是更加安全",{"2":{"346":1}}],["但是没有做任何处理或者记录日志",{"2":{"323":1}}],["但是你永远不应该这样做",{"2":{"322":1}}],["但是你一旦对一段代码加上try",{"2":{"309":1}}],["但是又违反域或方法的可见性声明",{"2":{"313":1}}],["但是呢",{"2":{"310":1}}],["但是还有几个没有",{"2":{"441":1}}],["但是还不想直接抛出到上一级",{"2":{"293":1}}],["但是还是没法满足实时性要求",{"2":{"243":1}}],["但是还是加锁了",{"2":{"234":1}}],["但是运行后可能会出现某些未知的错误",{"2":{"293":1}}],["但是会继续处理等待队列中的任务",{"2":{"256":1}}],["但是会破坏多线程的执行语义",{"2":{"195":1}}],["但是对多个共享变量操作时",{"2":{"223":1}}],["但是volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块",{"2":{"215":1}}],["但是如果多个线程同时改变数组的元素",{"2":{"211":1}}],["但是如果发现有相同",{"2":{"95":1}}],["但是必须有释放锁的配合动作",{"2":{"208":1}}],["但是在应用中最好不要捕获太多的调用栈",{"2":{"328":1}}],["但是在运行时却找不到了",{"2":{"308":1}}],["但是在管理环境下",{"2":{"245":1,"246":1}}],["但是在更新的时候会判断一下在此期间别人有没有去更新这个数据",{"2":{"221":1}}],["但是在",{"2":{"208":1,"385":1}}],["但是在多线程环境下会导致一个线程获得还没有初始化的实例",{"2":{"200":1}}],["但是在老年代就不能选择复制算法了",{"2":{"28":1}}],["但是由于",{"2":{"200":1}}],["但是不能随意重排序",{"2":{"195":1}}],["但是不推荐这个方法",{"2":{"171":1}}],["但是这两者还是各有不同侧重点的",{"2":{"274":1}}],["但是这种策略会降低对于新任务提交速度",{"2":{"265":1}}],["但是这并不能保证高优先级的线程会在低优先级的线程前执行",{"2":{"184":1}}],["但是这个被调用的方法必须是在超类中定义过的",{"2":{"61":1}}],["但是性能可以提升不用处理太多的",{"2":{"182":1}}],["但是性能和可靠性都不好",{"2":{"106":1}}],["但是很多人都会答不上来",{"2":{"155":1}}],["但是很多初学者却容易忽视",{"2":{"117":1}}],["但是线程不能独立执行",{"2":{"144":1}}],["但是一般我们也不怎么使用",{"2":{"621":1}}],["但是一般我们不会这么做",{"2":{"120":1}}],["但是一个线程访问vector的话代码要在同步操作上耗费大量的时间",{"2":{"353":1}}],["但是一个线程崩溃整个进程都死掉",{"2":{"144":1}}],["但是并发编程并不总是能提高程序运行速度的",{"2":{"138":1}}],["但是为了能够将这些基本数据类型当成对象操作",{"2":{"132":1}}],["但是为了编程的方便还是引入了基本数据类型",{"2":{"132":1}}],["但是使用数组过于麻烦",{"2":{"117":1}}],["但是它的功能比",{"2":{"278":1}}],["但是它只能表示单个字符",{"2":{"117":1}}],["但是它效率不高",{"2":{"28":1}}],["但是长整型",{"2":{"46":1}}],["但是接口可以多继承",{"2":{"41":1}}],["但是实现的虚拟机是相同的",{"2":{"38":1}}],["但是java语言规范并不保证gc一定会执行",{"2":{"20":1}}],["但是因为长生命周期对象持有它的引用而导致不能被回收",{"2":{"15":1}}],["但是",{"2":{"15":1,"42":1,"103":1,"106":2,"156":1,"161":1,"315":1,"374":1,"384":1,"388":1,"391":1}}],["但都会遵从",{"2":{"3":1}}],["也会把",{"2":{"695":1}}],["也会删除",{"2":{"678":1}}],["也许向hashmap中添加元素会更快",{"2":{"386":1}}],["也应该重写",{"2":{"380":1}}],["也有直接音译为",{"2":{"374":1}}],["也有两种方式",{"2":{"8":1}}],["也需要做一次元素复制操作",{"2":{"350":1}}],["也需要进行文档说明",{"2":{"319":1}}],["也并非高枕无忧",{"2":{"330":1}}],["也将捕获所有的错误",{"2":{"322":1}}],["也没有使用throws抛出该异常",{"2":{"288":1}}],["也",{"2":{"286":1}}],["也在读数据",{"2":{"234":1}}],["也是对回调模式的应用",{"2":{"395":1}}],["也是一个通信媒介",{"2":{"329":1}}],["也是阿里巴巴",{"2":{"263":1}}],["也是在实际编程中使用频率很高的一个锁",{"2":{"232":1}}],["也是runnable",{"2":{"157":1}}],["也从内存中取出",{"2":{"223":1}}],["也即对象属性值",{"2":{"217":1}}],["也可能是其他线程",{"2":{"168":1}}],["也可以叫做stage",{"2":{"532":1}}],["也可以叫同步点",{"2":{"278":1}}],["也可以自行下载",{"2":{"466":1}}],["也可以用迭代器",{"2":{"357":1}}],["也可以用父类的功能",{"2":{"60":1}}],["也可以存储引用数据类型",{"2":{"335":1}}],["也可以捕获多种类型异常",{"2":{"298":1}}],["也可以通过",{"2":{"286":1}}],["也可以不处理",{"2":{"286":1}}],["也可以有线程组",{"2":{"260":1}}],["也可以放入线程池中",{"2":{"157":1}}],["也可以说守护线程是",{"2":{"146":1}}],["也可以使用",{"2":{"76":1}}],["也可以系一个气球",{"2":{"67":1}}],["也可以访问静态的",{"2":{"56":1}}],["也可以去访问",{"2":{"56":1}}],["也可以是",{"2":{"46":1}}],["也就说当程序中出现此类异常时",{"2":{"288":1}}],["也就不存在临界区的问题",{"2":{"140":1}}],["也就可以理解为常量",{"2":{"128":1,"129":1}}],["也就是5秒对实例的心跳状态做一次检测",{"2":{"504":1}}],["也就是persistentconsistencyservicedelegateimpl",{"2":{"486":1}}],["也就是spring",{"2":{"479":1}}],["也就是具体的节点信息",{"2":{"474":1}}],["也就是resource名称",{"2":{"428":1}}],["也就是next",{"2":{"426":1}}],["也就是要尽量把数据分配均匀",{"2":{"384":1}}],["也就是通过下标来遍历",{"2":{"357":1}}],["也就是不保证线程安全",{"2":{"352":1}}],["也就是不需要重载",{"2":{"193":1}}],["也就是相当于单线程串行执行所有任务",{"2":{"254":1}}],["也就是给当前类加锁",{"2":{"200":1}}],["也就是无界队列的话",{"2":{"181":1}}],["也就是线程中断后会抛出interruptedexception",{"2":{"172":1}}],["也就是当run方法完成后线程终止",{"2":{"171":1}}],["也就是一个",{"2":{"117":1}}],["也就是应用操作之后会直接返回",{"2":{"106":1}}],["也就是",{"2":{"106":1,"374":1,"486":1}}],["也就是同一个内存空间",{"2":{"100":1}}],["也就是变量所对应的内存空间的地址",{"2":{"100":1}}],["也就是我们所说的多态性",{"2":{"61":1}}],["也就是main",{"2":{"40":1}}],["也就是说一个资源只有一个clusternode",{"2":{"428":1}}],["也就是说创建一个链表数组",{"2":{"368":1}}],["也就是说当编译器检查到应用中的某处可能会此类异常时",{"2":{"288":1}}],["也就是说当一个类加载完毕之后",{"2":{"56":1}}],["也就是说并不会立即被垃圾收集器立刻回收",{"2":{"192":1}}],["也就是说不要让你的程序依赖于线程的优先级",{"2":{"162":1}}],["也就是说不会产生内存碎片",{"2":{"30":1}}],["也就是说允许单个程序创建多个并行执行的线程来完成各自的任务",{"2":{"141":1}}],["也就是说多开辟了一块内存区域给",{"2":{"120":1}}],["也就是说传递前和传递后都指向同一个引用",{"2":{"100":1}}],["也就是说传递后就互不相关了",{"2":{"100":1}}],["也就是说被子类覆盖的方法",{"2":{"61":1}}],["也就是说",{"2":{"15":1,"56":1,"76":1,"99":4,"145":1,"156":1,"159":1,"286":1,"309":1,"384":1,"385":1,"438":1}}],["也不会导致用户读取到脏数据",{"2":{"484":1}}],["也不能使用",{"2":{"388":1}}],["也不利于定位问题",{"2":{"330":1}}],["也不需要重新定义wait",{"2":{"166":1}}],["也不用过多考虑系统的过载",{"2":{"106":1}}],["也不可以访问非静态变量成员",{"2":{"77":1}}],["也叫",{"2":{"106":1}}],["也一定为",{"2":{"95":1}}],["也称为工作目录",{"2":{"532":1}}],["也称为散列码",{"2":{"95":1}}],["也称为后绑定",{"2":{"60":1}}],["也称为前绑定",{"2":{"60":1}}],["也称为窄化",{"2":{"47":1}}],["也能使用属性和调用方法",{"2":{"56":1}}],["也包括了jre",{"2":{"36":1}}],["三种限流模式",{"2":{"435":1}}],["三种流控效果",{"2":{"434":2}}],["三种流控模式",{"2":{"434":2}}],["三部分都相同",{"2":{"407":1}}],["三方调用框架",{"0":{"398":1},"1":{"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1}}],["三来解决了",{"2":{"383":1}}],["三个接口存取元素时",{"0":{"338":1}}],["三",{"0":{"14":1,"58":1,"104":1,"197":1,"302":1,"365":1,"402":1,"448":1,"495":1,"527":1,"559":1,"574":1},"1":{"15":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"105":1,"106":1,"107":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"403":1,"404":1,"405":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"575":1,"576":1,"577":1},"2":{"159":1,"177":1}}],["速度更快",{"2":{"13":1}}],["中文",{"2":{"570":1}}],["中间是缓存与新数据的对比",{"2":{"515":1}}],["中间以",{"2":{"457":1}}],["中间用",{"2":{"456":1}}],["中add",{"2":{"360":1}}],["中支持了",{"2":{"349":1}}],["中使用它",{"2":{"380":1}}],["中使用迭代器方法来获取迭代器实例",{"2":{"345":1}}],["中使用的",{"2":{"248":1}}],["中处理异常并不是一个简单的事情",{"2":{"314":1}}],["中也可以通过提升编译器的语法检查级别来产生警告或错误",{"2":{"310":1}}],["中也包含",{"2":{"300":1}}],["中直接用编译错误的方式来阻止程序员干这种龌龊的事情",{"2":{"310":1}}],["中返回或者修改返回值会对程序造成很大的困扰",{"2":{"310":1}}],["中修改了返回值",{"2":{"310":1}}],["中改变返回值的做法是不好的",{"2":{"310":1}}],["中哪个部分可以省略",{"0":{"309":1}}],["中允许使用",{"2":{"307":1}}],["中包含了",{"2":{"300":1}}],["中抛出一个异常",{"2":{"297":1}}],["中除",{"2":{"287":1,"304":1}}],["中可以通过锁和循环",{"2":{"270":1}}],["中可以创建",{"2":{"211":1}}],["中有哪些原子类",{"0":{"270":1}}],["中强制线程池不允许使用",{"2":{"262":1}}],["中不推荐使用",{"0":{"260":1}}],["中更是如此",{"2":{"254":1}}],["中放入元素",{"2":{"251":1}}],["中就会出现key为null的entry",{"2":{"248":1}}],["中则是一次锁住一个桶",{"2":{"241":1}}],["中采用了一种粒度更细的加锁机制",{"2":{"239":1}}],["中采用的就是这种方式",{"2":{"13":1}}],["中导致饥饿的原因",{"2":{"226":1}}],["中取出",{"2":{"223":1}}],["中锁分为乐观锁和悲观锁",{"2":{"222":1}}],["中能创建",{"0":{"211":1}}],["中对函数式编程的支持",{"2":{"395":1}}],["中对",{"2":{"208":1}}],["中等待对象的锁",{"2":{"205":1}}],["中获取线程堆栈",{"0":{"186":1}}],["中怎么获取一份线程",{"0":{"186":1}}],["中你怎样唤醒一个阻塞的线程",{"0":{"174":1}}],["中断正在执行任务的线程",{"2":{"256":1}}],["中断状态",{"2":{"172":1}}],["中断",{"2":{"172":1}}],["中用到的线程调度算法是什么",{"0":{"160":1}}],["中非守护线程的",{"2":{"146":1}}],["中引入了",{"2":{"106":1}}],["中引入了nio框架",{"2":{"106":1}}],["中引入了枚举类型",{"2":{"46":1}}],["中常用的包有哪些",{"0":{"102":1}}],["中的add",{"2":{"360":1}}],["中的非",{"2":{"356":1}}],["中的数组定义如下",{"2":{"356":1}}],["中的方法由于加了",{"2":{"354":1}}],["中的元素",{"0":{"347":1}}],["中的原始异常",{"2":{"325":1}}],["中的异常处理除了包括捕获异常和处理异常之外",{"2":{"306":1}}],["中的代码还会执行吗",{"2":{"300":1}}],["中的代码都会执行",{"2":{"300":1}}],["中的同步集合与并发集合有什么区别",{"0":{"240":1}}],["中的",{"0":{"220":1},"2":{"221":1,"300":1,"301":1}}],["中的基本数据类型只有",{"2":{"117":1}}],["中的对象引用",{"2":{"99":1}}],["中的所有对象",{"2":{"20":1}}],["中方法参数传递方式",{"2":{"99":1}}],["中只有值传递",{"0":{"99":1}}],["中",{"0":{"105":1,"172":1,"238":1,"258":1,"274":1,"310":2,"349":1,"364":1},"2":{"46":1,"54":1,"57":1,"159":2,"181":1,"185":1,"199":1,"243":1,"254":1,"290":1,"372":1,"385":2,"511":1,"517":1}}],["中都有哪些引用类型",{"0":{"21":1}}],["中存储的直接就是对象地址",{"2":{"13":1}}],["中提供的几种对象创建方式",{"2":{"8":1}}],["代理",{"2":{"444":2}}],["代表命令的第二个字符串",{"2":{"643":1}}],["代表命令的第一个字符串",{"2":{"643":1}}],["代表第二个字符串由1字符组成",{"2":{"643":1}}],["代表第一个字符串由6字符组成",{"2":{"643":1}}],["代表下面的指令由两个字符串组成",{"2":{"643":1}}],["代表下标保持不变的链表的头元素",{"2":{"372":1}}],["代表要操作的数据类型",{"2":{"606":1}}],["代表一个字符",{"2":{"585":1}}],["代表一个对象在内存中的起始地址",{"2":{"11":1}}],["代表0到多个字符",{"2":{"585":1}}],["代表message",{"2":{"538":1}}],["代表集群中的多个实例",{"2":{"494":1}}],["代表集群一致性的接口",{"2":{"486":1}}],["代表group分组",{"2":{"474":1}}],["代表分组及组内的服务",{"2":{"474":1}}],["代表当前资源的",{"2":{"429":1}}],["代表当前链路的",{"2":{"429":1}}],["代表调用链路上下文",{"2":{"420":1}}],["代表资源",{"2":{"415":1}}],["代表链路树中的每一个资源",{"2":{"415":1}}],["代表扩容后变换下标",{"2":{"372":1}}],["代表扩容后不用变换下标",{"2":{"372":1}}],["代表桶中就一个元素",{"2":{"372":1}}],["代表有参构造有cap传入",{"2":{"372":1}}],["代表最高优先级",{"2":{"184":1}}],["代表最低优先级",{"2":{"184":1}}],["代码实现",{"0":{"713":1},"2":{"696":1}}],["代码维护较为复杂",{"2":{"695":1}}],["代码测试",{"2":{"595":1}}],["代码回溯",{"2":{"523":1}}],["代码管理工具",{"0":{"520":1},"1":{"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"527":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1}}],["代码如下",{"2":{"478":1,"480":1}}],["代码方面比之简单模式多创建方法绑定了队列而已",{"2":{"451":1}}],["代码交互发送用convertandsend",{"2":{"448":1}}],["代码这样来实现",{"2":{"417":1}}],["代码示例",{"2":{"351":1,"364":1}}],["代码示例2",{"2":{"310":1}}],["代码示例1",{"2":{"310":1}}],["代码在运行期时也只不过是在正常运行的基础上加一层皮",{"2":{"309":1}}],["代码会进入",{"2":{"300":1}}],["代码块执行后或异常处理后自动关闭",{"2":{"317":1}}],["代码块执行完毕之后再向调用者返回其值",{"2":{"310":1}}],["代码块成功执行之后还是你在",{"2":{"316":1}}],["代码块总是会被执行",{"2":{"316":1}}],["代码块不同",{"2":{"316":1}}],["代码块的最后部分",{"2":{"315":1}}],["代码块是有原因的",{"2":{"315":1}}],["代码块内代码会正常执行",{"2":{"315":1}}],["代码块中处理完异常后都会执行",{"2":{"316":1}}],["代码块中不同的是",{"2":{"301":1}}],["代码块中包含",{"2":{"300":1}}],["代码块退出时",{"2":{"301":1}}],["代码块直接进入",{"2":{"300":1}}],["代码块加锁",{"2":{"207":1}}],["代码块",{"0":{"316":1},"2":{"201":1,"300":3,"310":1}}],["代码块上都是是给",{"2":{"200":1}}],["代码段不被多个线程同时执行",{"2":{"199":1}}],["代码来源于",{"2":{"148":1}}],["代码模拟了上图的死锁的情况",{"2":{"148":1}}],["代码转换成字节码",{"2":{"2":1}}],["指的是值是否相同",{"2":{"360":1}}],["指的是在方法调用时",{"2":{"100":2}}],["指出不应该由应用程序处理的严重问题",{"2":{"322":1}}],["指定redis的最大内存",{"2":{"680":1}}],["指定redis的端口号",{"2":{"671":1}}],["指定使用序列化器",{"0":{"609":1}}],["指定当所有线程都到达时执行的业务功能",{"2":{"274":1}}],["指定加锁对象",{"2":{"200":1}}],["指令都支持",{"2":{"270":1}}],["指令重排在单线程环境下不会出现问题",{"2":{"200":1}}],["指某个方法在多线程环境中被调用时",{"2":{"182":1}}],["指java语言编写的程序",{"2":{"36":1}}],["指向分配的内存地址",{"2":{"200":1}}],["指向的时同一个数组对象",{"2":{"99":1}}],["指向固定内存地址",{"2":{"11":1}}],["指向对象",{"2":{"11":1}}],["指针",{"2":{"11":1}}],["指针还没来得及修改",{"2":{"10":1}}],["指针碰撞",{"2":{"8":1,"9":1}}],["两次请求的最小间隔",{"2":{"439":2}}],["两次就够了",{"2":{"384":1}}],["两大类",{"2":{"338":1}}],["两者的对比图",{"2":{"388":1}}],["两者都是由应用程序控制之外的情况引起的",{"2":{"322":1}}],["两者都是可重入锁",{"2":{"208":2}}],["两者都可以暂停线程的执行",{"2":{"164":1}}],["两者均可并发执行",{"2":{"144":1}}],["两者有什么不同",{"0":{"96":1}}],["两种一起使用",{"2":{"625":1}}],["两种锁方案",{"2":{"180":1}}],["两种通道都支持阻塞和非阻塞两种模式",{"2":{"106":1}}],["两种不同的套接字通道实现",{"2":{"106":1}}],["两种方式",{"2":{"11":1}}],["两个时间",{"2":{"710":1}}],["两个从节点选择一个当主节点",{"2":{"658":1}}],["两个计数器都是arraymetric类型",{"2":{"437":1}}],["两个线程就可以交换数据",{"2":{"277":1}}],["两个线程由于互相持有对方需要的锁",{"2":{"224":1}}],["两个队列和两台咖啡机",{"2":{"140":1}}],["两个队列和一台咖啡机",{"2":{"140":1}}],["两个引用没有引用同一对象",{"2":{"133":1}}],["两个对象",{"2":{"123":1}}],["两个对象有相同的hashcode值",{"2":{"95":1,"360":1}}],["两个对象相等",{"2":{"95":1,"360":1}}],["两个对象的",{"2":{"95":1}}],["两个组件为runtime",{"2":{"2":1}}],["两个子系统为class",{"2":{"2":1}}],["和键值对读写是由一个线程来完成的",{"2":{"716":1}}],["和null",{"2":{"385":1}}],["和notifyall",{"2":{"166":1}}],["和equals",{"2":{"382":1}}],["和扰动函数我们成功让我们的数据分布更平均",{"2":{"378":1}}],["和数组类似",{"2":{"357":1}}],["和把",{"2":{"301":1}}],["和错误",{"2":{"288":1}}],["和非受检异常",{"2":{"288":1}}],["和long",{"2":{"270":1}}],["和公平的锁获取方式",{"2":{"234":1}}],["和公平锁",{"2":{"220":1}}],["和新值",{"2":{"222":1}}],["和拟写入的新值",{"2":{"221":1}}],["和隐式监视器",{"2":{"180":1}}],["和时间分片",{"0":{"162":1}}],["和future",{"2":{"153":1}}],["和线程",{"2":{"148":1}}],["和重写",{"0":{"92":1}}],["和接口",{"2":{"60":1}}],["和super",{"2":{"55":1}}],["和this",{"2":{"55":2}}],["和短路或运算符",{"2":{"51":1}}],["和",{"0":{"42":1,"94":1,"132":1,"147":1,"153":1,"154":1,"156":1,"164":1,"166":1,"167":1,"169":1,"172":1,"175":1,"207":1,"208":1,"215":1,"241":1,"258":1,"259":1,"274":1,"303":1,"306":1,"308":1,"348":1,"352":1,"353":1,"357":1,"364":1,"387":1,"388":1,"391":1,"392":1,"393":1,"394":1,"395":1},"2":{"11":1,"29":1,"33":2,"51":1,"95":1,"99":2,"106":2,"157":1,"165":1,"166":1,"169":1,"177":1,"180":1,"182":2,"200":1,"217":1,"259":1,"262":2,"271":1,"276":1,"278":2,"283":1,"290":1,"338":2,"348":1,"352":1,"353":1,"357":1,"380":2,"388":4,"389":1,"423":1,"479":1}}],["句柄访问",{"0":{"12":1}}],["句柄不发生变化",{"2":{"11":1}}],["句柄不直接指向对象",{"2":{"11":1}}],["句柄",{"2":{"11":2}}],["时效性差",{"2":{"446":1}}],["时另一个线程修改它",{"2":{"347":1}}],["时被阻塞",{"2":{"278":1}}],["时就会失败",{"2":{"230":1}}],["时就可以被回收",{"2":{"22":1}}],["时间窗口的分隔数量",{"2":{"437":1}}],["时间窗口请求量统计",{"0":{"437":1}}],["时间成本相对较高",{"2":{"199":1}}],["时间可以基于线程优先级或者线程等待的时间",{"2":{"162":1}}],["时间分配给可用的",{"2":{"162":1}}],["时间分片是指将可用的",{"2":{"162":1}}],["时间",{"2":{"145":1,"162":1,"226":1}}],["时间片切换到另一个任务之前会先保存自己的状态",{"2":{"145":1}}],["时间跟踪线程",{"2":{"141":1}}],["时返回一个通知",{"2":{"21":1}}],["时只会改变句柄中的实例数据指针",{"2":{"12":1}}],["时",{"2":{"10":1,"20":1,"33":1,"95":1,"230":1,"270":1,"320":1,"339":1,"369":1,"385":1,"695":1}}],["就立即向下一个redis实例申请加锁",{"2":{"714":1}}],["就产生了死锁",{"2":{"709":1}}],["就一定存在",{"2":{"695":1}}],["就完成了",{"2":{"695":1}}],["就好像穿透了缓存层",{"2":{"691":1}}],["就代表连接上整个集群了",{"2":{"668":1}}],["就该成功的成功",{"2":{"620":1}}],["就使用配置文件改变工作队列默认的发送消息方式",{"2":{"451":1}}],["就形成了跨域",{"2":{"407":1}}],["就赋值为整数最大的阀值",{"2":{"372":1}}],["就调用resize方法进行扩容",{"2":{"372":1}}],["就意味着它支持",{"2":{"349":1}}],["就比hashmap多了个线程安全",{"2":{"340":1}}],["就比arraylist多了个同步化机制",{"2":{"340":1}}],["就比如一个手机拥有打电话",{"2":{"62":1}}],["就又重新形成了一条返回路径",{"2":{"310":1}}],["就等于显示地承诺编译器",{"2":{"309":1}}],["就需要",{"2":{"291":1}}],["就需要用多个",{"2":{"117":1}}],["就必须采用某种方式进行处理",{"2":{"288":1}}],["就算我们没写异常捕获语句运行时也会抛出错误",{"2":{"286":1}}],["就要解决两个问题",{"2":{"232":1}}],["就可以看到更新实例列表的逻辑了",{"2":{"491":1}}],["就可以创建具体的调用接口了",{"2":{"405":1}}],["就可以最大可能地避免",{"2":{"225":1}}],["就可以让引用变量绑定到各种不同的类实现上",{"2":{"61":1}}],["就无法保证操作的原子性",{"2":{"223":1}}],["就无需再单独安装jre了",{"2":{"36":1}}],["就不用担心旧数据被覆盖的问题了",{"2":{"437":1}}],["就不用会调用读操作",{"2":{"214":1}}],["就不要定义自己的异常",{"2":{"327":1}}],["就不会产生并发",{"2":{"389":1}}],["就不会存在锁竞争",{"2":{"388":1}}],["就不会发生死锁",{"2":{"225":1}}],["就不会让队列有空间",{"2":{"177":1}}],["就不会让其加入操作成功",{"2":{"95":1}}],["就不能改变",{"2":{"217":1}}],["就绪状态",{"2":{"168":1}}],["就绪状态是进入到运行状态的唯一入口",{"2":{"159":1}}],["就获取不到了",{"2":{"150":1}}],["就是",{"2":{"606":1,"609":1}}],["就是非关系型数据库",{"2":{"570":1}}],["就是集群同步的逻辑了",{"2":{"492":1}}],["就是通过distro协议将数据同步给集群中的其它nacos节点",{"2":{"487":1}}],["就是那个多重map",{"2":{"487":1}}],["就是先获取旧的实例列表",{"2":{"485":1}}],["就是服务注册的方法了",{"2":{"483":1}}],["就是该集群下的实例的集合",{"2":{"474":1}}],["就是因为数据定义的格式为",{"2":{"470":1}}],["就是降级规则判断了",{"2":{"440":1}}],["就是把",{"2":{"437":1}}],["就是统计时长",{"2":{"432":1}}],["就是最大令牌数量",{"2":{"432":1}}],["就是clusterbuilderslot",{"2":{"427":1}}],["就是责任链中的第一个",{"2":{"426":1}}],["就是hash桶数组不为空",{"2":{"372":1}}],["就是容器中存储数据的方式",{"2":{"335":1}}],["就是一个routingkey更为灵活了",{"2":{"456":1}}],["就是一个信号量",{"2":{"276":1}}],["就是一套规则",{"2":{"447":1}}],["就是一种以空间换时间的做法",{"2":{"245":1}}],["就是走它的构造函数",{"2":{"262":1}}],["就是合适读多写少的场景",{"2":{"243":1}}],["就是很乐观",{"2":{"221":1}}],["就是在更新注册表",{"2":{"491":1}}],["就是在统计通过该节点的qps",{"2":{"437":1}}],["就是在多线程的环境下",{"2":{"199":1}}],["就是在监视线程的中断状态",{"2":{"172":1}}],["就是长度为2的数组",{"2":{"117":1}}],["就是我们平常使用的传统",{"2":{"106":1}}],["就是局部内部类",{"2":{"84":1}}],["就是成员内部类",{"2":{"83":1}}],["就是静态内部类",{"2":{"82":1}}],["就是你出国要说你是中国人",{"2":{"62":1}}],["就有几份成员变量",{"2":{"74":1}}],["就近原则",{"2":{"69":1}}],["就自动释放",{"2":{"69":2}}],["就会影响redis的读写性能",{"2":{"678":1}}],["就会变成从节点加入到主从架构中",{"0":{"666":1}}],["就会作为一个从节点跟随在新的主节点进行工作",{"2":{"658":1}}],["就会使用全量复制",{"2":{"653":1}}],["就会永久保存到磁盘上",{"2":{"619":1}}],["就会通知我们",{"2":{"518":1}}],["就会执行心跳",{"2":{"498":1}}],["就会把信息组织并存入这个map中",{"2":{"474":1}}],["就会出现多次数据库查询的情况",{"2":{"704":1}}],["就会出现快的消费者等待慢的消费者消费消息的情况",{"2":{"451":1}}],["就会出错",{"2":{"88":1}}],["就会创建多个",{"2":{"427":1}}],["就会改变modcount的值",{"2":{"341":1}}],["就会返回对应的值对象",{"2":{"338":1}}],["就会返回修改后的值",{"2":{"310":1}}],["就会产生意外情况",{"2":{"330":1}}],["就会抛出",{"2":{"346":1}}],["就会抛出该异常",{"2":{"308":1}}],["就会抛出中断异常",{"2":{"172":1}}],["就会将该异常转交给默认的异常处理器",{"2":{"305":1}}],["就会将线程的",{"2":{"186":1}}],["就会发生",{"2":{"224":1}}],["就会发现永久代也是被回收的",{"2":{"23":1,"24":1}}],["就会造成死锁",{"2":{"208":1}}],["就会运行该对象的finalize",{"2":{"193":1}}],["就会破坏数据的完整性",{"2":{"179":1}}],["就会终止线程的运行",{"2":{"161":1}}],["就会重新散列到其他位置",{"2":{"95":1}}],["就会去加载被static修饰的部分",{"2":{"56":1}}],["就失去了语句的意义",{"2":{"55":1}}],["就在哪个线程的",{"2":{"10":1}}],["就从空闲列表中分配",{"2":{"8":1}}],["哪些集合类是线程安全的",{"0":{"340":1}}],["哪些对象已经",{"2":{"22":1}}],["哪些对象是",{"2":{"20":1,"22":1}}],["哪怕这个类中有多个不相关联的同步块",{"2":{"178":1}}],["哪怕只是修改一个指针所指向的位置",{"2":{"10":1}}],["哪个是更好的选择",{"0":{"178":1}}],["哪个线程要分配内存",{"2":{"10":1}}],["+inf",{"2":{"584":3}}],["+inf代表最大值",{"2":{"584":1}}],["+最近一次请求的可执行时间",{"2":{"439":1}}],["++j",{"2":{"372":1}}],["++size",{"2":{"371":1}}],["++modcount",{"2":{"371":1}}],["++bincount",{"2":{"371":1,"389":1}}],["++x",{"2":{"330":2}}],["+=",{"2":{"48":1,"245":1,"438":1,"442":2}}],["+useconcmarksweepgc",{"2":{"31":1}}],["+1",{"2":{"22":1,"33":1,"429":4,"437":1,"442":2,"684":1}}],["+",{"0":{"48":1},"2":{"10":2,"33":1,"48":2,"57":6,"82":1,"83":2,"89":3,"99":8,"120":4,"148":6,"150":3,"152":8,"186":1,"237":1,"245":2,"266":5,"271":1,"323":1,"372":1,"389":3,"423":3,"435":1,"438":3,"439":3,"484":3,"485":3,"491":1,"492":2,"500":1,"502":4,"505":3,"506":1,"511":4,"512":1,"514":3,"515":3,"595":2,"597":1,"598":12,"600":3,"601":1,"602":6,"606":2,"609":2,"611":6,"612":3,"613":3,"617":1,"675":1,"692":5,"694":5,"696":8}}],["对读操作可以执行",{"2":{"680":1}}],["对数据安全要求高",{"2":{"648":1}}],["对数据安全要求不高",{"2":{"648":1}}],["对非临时实例做健康检测",{"2":{"505":1}}],["对外提供键值存储服务的主要流程",{"2":{"716":1}}],["对外暴露根据id查询用户的接口",{"2":{"467":1}}],["对外的接口",{"2":{"333":1}}],["对clusternode统计",{"2":{"435":1}}],["对进入资源的部分链路",{"2":{"434":1}}],["对进入资源的所有请求",{"2":{"434":1}}],["对被标记的方法做环绕增强",{"2":{"418":1}}],["对",{"2":{"388":1}}],["对整个桶数组进行了分割分段",{"2":{"388":1}}],["对null",{"2":{"385":1}}],["对称性",{"2":{"382":1}}],["对两个equals方法返回true",{"2":{"360":1}}],["对两个对象分别调用equals方法都返回true",{"2":{"95":1}}],["对调用者来说",{"2":{"330":1}}],["对大段代码进行try",{"2":{"330":1}}],["对异常进行文档说明",{"0":{"319":1}}],["对这段代码可能抛出的异常进行捕获而非向上抛出处理",{"2":{"309":1}}],["对其进行捕获和处理",{"2":{"308":1}}],["对资源的共享方式",{"2":{"230":1}}],["对不可变对象的读取不需要进行额外的同步手段",{"2":{"217":1}}],["对它进行捕获处理",{"2":{"286":1}}],["对它进行任何操作",{"2":{"118":1}}],["对它的写操作就会有一个内存屏障",{"2":{"214":1}}],["对比同步它有什么优势",{"0":{"220":1}}],["对比",{"2":{"208":1}}],["对给定对象加锁",{"2":{"200":1}}],["对已获得的资源保持不放",{"2":{"149":1,"225":1}}],["对应的方法是addipaddresses",{"2":{"485":1}}],["对应的实现在degradeslot类中",{"2":{"440":1}}],["对应的api如下",{"2":{"420":1}}],["对应两个计数器",{"2":{"437":1}}],["对应",{"2":{"106":1}}],["对吗",{"2":{"95":1}}],["对所有类可见",{"2":{"50":1}}],["对同一包内的类和所有子类可见",{"2":{"50":1}}],["对于非临时实例",{"2":{"505":1}}],["对于非稳定代码的catch尽可能进行区分异常类型",{"2":{"330":1}}],["对于临时实例",{"2":{"501":1}}],["对于基本类型数据",{"2":{"391":1}}],["对于基本数据类型",{"2":{"133":1}}],["对于在map中插入",{"2":{"386":1}}],["对于集合容器",{"2":{"335":1}}],["对于调用端解决问题的帮助不会太多",{"2":{"330":1}}],["对于公司外的http",{"2":{"330":1}}],["对于session中获取的数据",{"2":{"330":1}}],["对于可伸缩的应用程序",{"2":{"265":1}}],["对于可见性",{"2":{"210":1}}],["对于资源竞争严重",{"2":{"223":1}}],["对于double",{"2":{"214":1}}],["对于64位的引用地址的读写",{"2":{"213":1}}],["对于64位的long和double",{"2":{"213":1}}],["对于多个线程访问同一个实例变量需要加锁进行同步",{"2":{"213":1}}],["对于所分配到的资源具有排它性",{"2":{"149":1}}],["对于对象引用类型",{"2":{"133":1}}],["对于三者使用的总结",{"2":{"128":1,"129":1}}],["对于任意一个对象",{"2":{"109":1}}],["对于任意一个类",{"2":{"109":1}}],["对于高负载",{"2":{"106":1}}],["对于低负载",{"2":{"106":1}}],["对于修改是封闭的",{"2":{"62":1}}],["对于java而言",{"2":{"61":1}}],["对于",{"2":{"48":1,"106":1}}],["对于每一种数据都定义了明确的具体的数据类型",{"2":{"45":1}}],["对于要求服务器响应速度的应用上",{"2":{"31":1}}],["对于gc来说",{"2":{"20":1}}],["对分配内存空间的动作进行同步处理",{"2":{"10":1}}],["对象多了也需要存储",{"2":{"334":1}}],["对象封装数据",{"2":{"334":1}}],["对象内的",{"2":{"245":1}}],["对象可以对调用了",{"2":{"157":1}}],["对象创建之后",{"2":{"118":1}}],["对象相等判断",{"0":{"93":1},"1":{"94":1,"95":1,"96":1}}],["对象名",{"2":{"76":1}}],["对象引用是按值传递的",{"2":{"99":1}}],["对象引用及其他的拷贝同时引用同一个对象",{"2":{"99":1}}],["对象引用存放在栈内存中",{"2":{"67":1}}],["对象引用指向对象实例",{"2":{"67":1}}],["对象实例在堆内存中",{"2":{"67":1}}],["对象实例与对象引用有何不同",{"0":{"67":1}}],["对象存活率高时会频繁进行复制",{"2":{"27":1}}],["对象什么时候可以被垃圾回收",{"0":{"23":1}}],["对象的个数不确定的可以用集合",{"2":{"334":1}}],["对象的个数确定可以使用数组",{"2":{"334":1}}],["对象的数据",{"2":{"217":1}}],["对象的属性可以在被调用过程中被改变",{"2":{"98":1}}],["对象的相等",{"2":{"96":1}}],["对象的相等与指向他们的引用相等",{"0":{"96":1}}],["对象的内容一样",{"2":{"94":1}}],["对象的访问方式取决于",{"2":{"11":1}}],["对象的访问定位",{"0":{"11":1},"1":{"12":1,"13":1}}],["对象的创建在虚拟机中是一个非常频繁的行为",{"2":{"10":1}}],["对象的创建",{"0":{"8":1}}],["对象",{"2":{"10":1,"118":1,"120":1,"128":1,"129":1,"245":1,"259":1,"437":1,"579":1}}],["bset",{"2":{"689":2}}],["b关注的人",{"2":{"689":1}}],["bgrewriteaof",{"2":{"644":1}}],["bgsave子进程会从数据副本中获取数据",{"2":{"631":1}}],["bgsave",{"2":{"627":1,"629":1,"631":2}}],["branch",{"2":{"545":2,"546":4,"547":1}}],["break",{"2":{"57":3,"186":1,"371":2,"389":3,"430":1}}],["bodymap",{"2":{"500":3}}],["boot",{"2":{"448":2,"604":2,"606":1,"611":1,"617":1,"675":1,"704":1}}],["boolean来反映中间有没有变过",{"2":{"270":1}}],["boolean",{"2":{"45":1,"57":1,"112":1,"117":1,"132":2,"230":1,"330":1,"360":1,"371":2,"422":1,"425":2,"426":1,"427":1,"428":1,"429":1,"430":4,"431":1,"432":1,"435":7,"438":3,"439":2,"440":1,"441":3,"475":3,"484":1,"485":2,"491":2,"495":1,"499":1,"500":1,"505":2,"507":1,"510":1,"512":1,"515":1,"517":6,"598":2,"606":1,"608":1,"609":1,"696":1,"708":1}}],["black",{"2":{"430":1}}],["blockexception",{"2":{"416":1,"417":1,"418":1,"422":1,"425":4,"431":1,"435":2,"440":1}}],["blocked",{"2":{"170":1}}],["blockingqueue接口是java集合框架的一部分",{"2":{"363":1}}],["blockingqueue是一个队列",{"2":{"363":1}}],["blockingqueue是什么",{"0":{"363":1}}],["blockingqueue",{"2":{"251":4}}],["blocking",{"2":{"106":2}}],["block",{"2":{"106":1,"159":1,"300":5,"414":1}}],["bus",{"2":{"671":1}}],["buster",{"2":{"558":1}}],["buildkey",{"2":{"498":1}}],["buildinstancelistkey",{"2":{"484":1,"485":1,"505":2}}],["buildbeatinfo",{"2":{"480":1,"496":1}}],["builder",{"2":{"449":1}}],["build",{"2":{"417":1,"448":1,"449":1,"558":1,"560":1,"563":1}}],["buffers",{"2":{"470":1}}],["bufferedreader",{"2":{"296":2,"300":2}}],["buffer等抽象",{"2":{"106":1}}],["buffer",{"2":{"8":1,"10":1,"470":1,"514":3}}],["background",{"2":{"631":1}}],["backend",{"2":{"410":1}}],["bash窗口",{"2":{"530":1}}],["bash",{"2":{"526":1,"564":1,"629":1,"656":1}}],["basewebmvcconfig",{"2":{"422":1}}],["basepackages",{"2":{"404":1}}],["bad",{"2":{"475":1,"495":1,"507":1}}],["barrier",{"2":{"278":1}}],["b线程正在使用的",{"2":{"245":1}}],["biconsumer",{"2":{"441":1}}],["bind",{"2":{"448":1,"478":1,"589":1}}],["bindings",{"2":{"448":1}}],["bindingbuilder",{"2":{"448":1}}],["binding",{"2":{"447":1,"448":1}}],["bin",{"2":{"389":1}}],["bincount",{"2":{"371":2,"389":1}}],["bit",{"2":{"371":1}}],["bigdecimal",{"2":{"217":1}}],["biginteger",{"2":{"217":1}}],["bio是基于socket通信",{"2":{"717":1}}],["bio",{"0":{"106":1},"2":{"106":3}}],["benchmark",{"2":{"586":2}}],["been",{"2":{"502":1}}],["beatkey",{"2":{"505":1}}],["beattask",{"0":{"499":1},"2":{"498":1,"499":1}}],["beat",{"2":{"495":2,"498":3,"499":6,"500":5,"502":14,"503":5,"504":1,"505":17}}],["beatreactor",{"0":{"498":1},"2":{"480":2,"496":2,"499":2}}],["beatinfo",{"0":{"497":1},"2":{"480":3,"496":3,"498":11,"499":14,"500":8}}],["beans",{"2":{"606":1,"611":2,"617":1,"675":1,"704":1}}],["bean",{"2":{"111":1,"401":1,"448":5,"609":1}}],["behavior",{"2":{"435":1}}],["be",{"2":{"418":1,"423":1,"485":1,"505":1}}],["before这么做的目的",{"2":{"196":1}}],["before指定的顺序来执行的",{"2":{"196":1}}],["before关系给编写正确同步的多线程程序的程序员创造了一个幻境",{"2":{"196":1}}],["before关系保证正确同步的多线程程序的执行结果不被改变",{"2":{"196":1}}],["before规则的区别",{"0":{"196":1}}],["before",{"2":{"139":1,"210":1}}],["b2",{"2":{"133":2}}],["b1",{"2":{"133":2}}],["b相当于num1",{"2":{"99":1}}],["b中的值",{"2":{"99":1}}],["b的值进行交换",{"2":{"99":1}}],["by",{"2":{"99":2,"505":1,"514":1}}],["bytes>",{"2":{"680":1}}],["bytes",{"2":{"601":2}}],["byte",{"0":{"46":1},"2":{"45":1,"46":1,"117":1,"126":1,"132":2,"514":3,"601":3}}],["bbb",{"2":{"355":1}}],["bb",{"2":{"94":2,"583":1,"598":1}}],["b为另一个引用",{"2":{"94":1}}],["b",{"0":{"133":1,"204":1,"205":1},"2":{"10":1,"84":3,"94":3,"99":6,"133":3,"148":3,"205":1,"221":2,"222":2,"223":1,"224":3,"234":1,"311":1,"689":3}}],["接受不同的数据类型",{"2":{"448":1}}],["接受新的任务",{"2":{"256":1}}],["接收推送数据",{"2":{"514":1}}],["接收参数",{"2":{"259":1}}],["接收出结果",{"2":{"78":1}}],["接口描述",{"2":{"495":1,"507":1}}],["接口说明",{"2":{"475":1}}],["接口名或其它可唯一标识的字符串",{"2":{"416":1}}],["接口以实现元素的比较",{"2":{"395":1}}],["接口从而根据键对元素进",{"2":{"395":1}}],["接口提供遍历任何",{"2":{"345":1}}],["接口常用实现类是",{"2":{"338":1,"357":1}}],["接口通常用来形成规范",{"2":{"333":1}}],["接口允许我们操作集合时不必关注具体实现",{"2":{"333":1}}],["接口并进行了扩展",{"2":{"258":1}}],["接口继承了",{"2":{"258":1,"353":1}}],["接口对象能执行我们的线程任务",{"2":{"258":1}}],["接口定义一个执行线程的工具",{"2":{"254":1}}],["接口的子类型",{"2":{"395":1}}],["接口的实现和对集合运算的算法",{"2":{"333":1}}],["接口的实现类",{"2":{"157":1,"266":1}}],["接口的类",{"2":{"301":1}}],["接口的一个具体实现",{"2":{"234":1}}],["接口比同步方法和同步块提供了更具扩展性的锁操作",{"2":{"220":1}}],["接口表示异步任务",{"2":{"156":1}}],["接口类似于",{"2":{"156":1}}],["接口和抽象类各有优缺点",{"2":{"64":1}}],["接口和抽象类都不能实例化",{"2":{"64":1}}],["接口是",{"2":{"251":1}}],["接口是行为的抽象",{"2":{"64":1}}],["接口是抽象方法的集合",{"2":{"64":1}}],["接口分离原则isp",{"2":{"62":1}}],["接口",{"0":{"220":1,"338":1},"2":{"45":1,"50":2,"85":1,"152":4,"153":4,"266":2,"317":1,"333":1,"348":1,"349":1,"350":1,"353":2,"356":1,"357":1,"395":1}}],["接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的",{"2":{"167":1}}],["接着就由这个线程自行进行",{"2":{"106":1}}],["接着在成员位置找",{"2":{"69":1}}],["接着会在java堆中划分一块内存分配给对象",{"2":{"9":1}}],["接着是做一些必要的对象设置",{"2":{"8":1}}],["接下来就要添加实例到服务中",{"2":{"484":1}}],["接下来",{"2":{"429":1,"437":1,"465":1}}],["接下来我们跟踪源码",{"2":{"424":1}}],["接下来分配内存",{"2":{"8":1}}],["接下来类加载器又将这些",{"2":{"2":1}}],["ttl",{"2":{"585":2,"680":1}}],["tuple>",{"2":{"598":1}}],["tuple",{"2":{"598":5}}],["tuhaobang",{"2":{"584":14,"598":5,"611":5}}],["tue",{"2":{"266":20}}],["tz",{"2":{"563":1}}],["tz=asia",{"2":{"558":1,"560":1,"573":1,"615":1,"655":3,"670":6}}],["tcp",{"2":{"505":1}}],["tail",{"2":{"643":1}}],["tar",{"2":{"572":3}}],["taskprocessor是一个callable",{"2":{"505":1}}],["taskprocessor",{"2":{"505":2}}],["taskqueue",{"2":{"505":3}}],["taskkey",{"2":{"492":5}}],["task",{"2":{"490":2,"492":8,"505":5}}],["tasks",{"2":{"489":1,"490":1,"505":4}}],["take",{"2":{"490":1}}],["tags",{"2":{"466":1}}],["tabat",{"2":{"389":1}}],["tab为空则创建",{"2":{"371":1}}],["tab",{"2":{"371":8,"389":2}}],["table未初始化或者长度为0",{"2":{"371":1}}],["table",{"2":{"371":2,"372":2}}],["t>",{"2":{"437":6,"438":6}}],["txt",{"2":{"315":1,"316":1,"317":1}}],["tianmi",{"2":{"704":1}}],["tid",{"2":{"517":3,"518":1}}],["tidying",{"2":{"256":2}}],["timezone",{"2":{"558":1}}],["timestamp",{"2":{"489":1}}],["timeslice",{"2":{"159":1}}],["timeutil",{"2":{"438":1,"439":3,"441":1}}],["timeunit",{"2":{"225":1,"266":3,"498":1,"499":1,"505":2,"606":2,"609":1,"611":1,"694":1,"713":1}}],["timemillis",{"2":{"437":6,"438":4}}],["timecounters",{"2":{"433":1}}],["timeouttask",{"2":{"505":1}}],["timeout",{"2":{"164":1,"225":1,"505":2,"596":3,"597":2,"660":2}}],["time",{"0":{"162":1},"2":{"266":24,"438":2,"504":1,"505":1}}],["two",{"2":{"223":3}}],["t2",{"2":{"200":1}}],["t1",{"2":{"200":1,"714":1}}],["t",{"2":{"147":3,"245":2,"322":2,"330":1,"423":1,"426":2,"484":1,"515":2,"558":1,"560":1}}],["tmp",{"2":{"147":3,"315":1,"316":1,"317":1,"660":2}}],["truncated",{"2":{"635":1,"641":1}}],["trueenter",{"2":{"423":2}}],["true",{"2":{"51":1,"57":1,"94":5,"95":1,"120":1,"123":4,"133":3,"146":1,"172":1,"371":1,"409":2,"410":1,"422":2,"430":3,"435":2,"437":1,"438":1,"439":3,"441":2,"478":1,"480":1,"495":1,"498":1,"499":1,"503":2,"504":1,"505":6,"510":1,"514":1,"515":1,"608":5}}],["tracked",{"2":{"533":1}}],["traceexception",{"2":{"418":1}}],["traffictype",{"2":{"425":3}}],["transfertojsonnode",{"2":{"517":1}}],["transformtoopen",{"2":{"442":1}}],["transformentry",{"2":{"426":1}}],["transport",{"2":{"417":1}}],["transient",{"0":{"356":1},"2":{"356":3,"360":1}}],["tradeclient",{"2":{"405":1}}],["tradeapplication",{"2":{"404":2}}],["trade",{"2":{"404":1,"405":2,"409":2}}],["treebin",{"2":{"388":1}}],["treeifybin",{"2":{"371":1}}],["treeify",{"2":{"371":1}}],["treenode",{"2":{"371":2,"372":2}}],["treeset",{"0":{"395":1},"2":{"337":1,"338":1,"339":1,"357":1,"395":1}}],["treemap是更好的选择",{"2":{"386":1}}],["treemap",{"0":{"386":1,"395":1},"2":{"337":1,"338":1,"339":1,"395":1}}],["tryinit",{"2":{"696":1}}],["trydecompress",{"2":{"514":1}}],["trypass",{"2":{"440":1,"441":1}}],["tryoccupynext",{"2":{"438":1}}],["try块中的return语句执行成功后",{"2":{"330":1}}],["try中的",{"2":{"310":1}}],["try+catch适合处理运行时异常+普通异常",{"2":{"309":1}}],["try只适合处理运行时异常",{"2":{"309":1}}],["trywithresourcetest",{"2":{"301":1}}],["tryreleaseshared",{"2":{"230":1}}],["tryrelease",{"2":{"230":2}}],["tryacquireshared``",{"2":{"230":1}}],["tryacquireshared",{"2":{"230":1}}],["tryacquire",{"2":{"230":1}}],["trylock",{"2":{"220":2,"225":1,"437":1}}],["try",{"0":{"300":1,"301":1,"309":1,"310":1,"315":1,"317":1},"1":{"316":1,"317":1},"2":{"148":2,"150":1,"152":1,"183":1,"266":1,"286":1,"289":1,"290":1,"291":1,"297":1,"298":3,"300":2,"301":2,"308":1,"310":2,"311":1,"315":5,"316":4,"317":3,"321":2,"322":1,"323":2,"324":1,"325":1,"330":2,"416":1,"417":1,"418":1,"422":2,"423":1,"425":1,"429":1,"437":1,"439":1,"479":1,"490":3,"491":1,"492":1,"499":2,"504":1,"505":4,"511":2,"514":2,"517":2,"708":1,"713":1}}],["trim",{"2":{"126":1,"514":1}}],["typedtuple",{"2":{"611":5}}],["type",{"2":{"117":1,"410":1,"448":1,"514":2,"517":1,"585":1}}],["tex",{"2":{"540":1}}],["tenant",{"2":{"517":2}}],["terminated",{"2":{"256":3}}],["template",{"2":{"401":2}}],["temp",{"2":{"99":4}}],["testhotdata",{"2":{"704":2,"708":2,"713":1}}],["test2",{"2":{"602":1}}],["testdirectqueue",{"2":{"455":1,"457":1}}],["testdemo04",{"2":{"57":1}}],["testdemo03",{"2":{"57":1}}],["testfanoutqueue",{"2":{"449":1}}],["testfunctionclass",{"2":{"84":1}}],["testexceptionhandling",{"2":{"324":5}}],["testthreadlocal",{"2":{"245":1}}],["test1",{"2":{"94":1,"602":1}}],["teststaticfunctionclass",{"2":{"84":2}}],["test",{"2":{"57":2,"85":1,"99":2,"449":1,"453":1,"455":1,"457":1,"595":1,"596":1,"597":1,"598":7,"600":1,"601":1,"602":2,"606":3,"609":1,"610":1,"611":6,"612":1,"613":1,"617":5,"622":1,"675":3,"692":1,"694":1,"696":1,"704":5,"708":1,"713":1}}],["than",{"2":{"439":1}}],["that",{"2":{"324":1,"325":1,"438":1}}],["through",{"2":{"418":1}}],["thrown",{"2":{"505":1}}],["throw关键字作用是在方法内部抛出一个throwable类型的异常",{"2":{"292":1}}],["throw",{"0":{"306":1},"2":{"271":1,"289":1,"290":1,"297":1,"300":1,"306":3,"324":2,"325":1,"356":1,"418":4,"423":1,"425":1,"429":1,"430":1,"431":5,"435":1,"438":1,"440":1,"484":1,"485":1,"502":1}}],["throwable>",{"2":{"418":1}}],["throwable",{"0":{"283":1,"322":1},"2":{"193":1,"283":3,"290":1,"299":1,"322":4,"325":1,"418":2,"425":1,"426":1,"427":1,"428":1,"429":2,"430":1,"431":1,"432":1,"435":1,"440":1,"442":2,"490":3,"492":1,"505":2}}],["throws",{"0":{"306":1},"2":{"112":1,"193":1,"286":1,"288":1,"289":1,"290":1,"291":3,"296":2,"297":1,"300":1,"306":5,"308":1,"318":2,"319":2,"324":1,"325":1,"356":1,"418":1,"422":1,"425":3,"426":1,"427":1,"428":1,"429":1,"430":2,"431":2,"432":1,"435":3,"440":2,"453":2,"480":2,"483":1,"484":4,"485":2,"486":1,"487":1,"491":1,"496":1,"500":1,"502":1,"505":4,"510":1,"511":1,"512":1,"517":3,"595":1,"596":1,"597":1,"598":5,"600":1,"601":1,"602":2,"606":1,"609":1,"610":1,"611":4,"612":1,"613":2,"622":2,"704":1}}],["threshold已经被初始化成最小2的n次幂",{"2":{"372":1}}],["threshold",{"2":{"371":2,"372":6,"442":1}}],["threapoolexecutor创建线程池方式只有一种",{"2":{"262":1}}],["threads",{"2":{"266":1}}],["threadpooltaskexecutor",{"2":{"265":2}}],["threadpoolexecutordemo",{"2":{"266":1}}],["threadpoolexecutor饱和策略",{"0":{"265":1}}],["threadpoolexecutor其他常见参数",{"2":{"264":1}}],["threadpoolexecutor构造函数重要参数分析",{"0":{"264":1}}],["threadpoolexecutor",{"2":{"258":1,"262":1,"263":2,"264":1,"265":10,"266":5}}],["threadfactory",{"2":{"264":1,"514":1}}],["threadgroup",{"2":{"260":1}}],["threadid",{"2":{"203":4}}],["thread1",{"2":{"185":2}}],["thread2",{"2":{"185":5}}],["threadlocal内存泄漏解决方案",{"0":{"249":1}}],["threadlocal内存泄漏分析与解决方案",{"0":{"247":1},"1":{"248":1,"249":1}}],["threadlocal方法后",{"2":{"248":1}}],["threadlocal造成内存泄漏的原因",{"0":{"248":1}}],["threadlocalmap实现中已经考虑了这种情况",{"2":{"248":1}}],["threadlocalmap",{"2":{"245":2,"248":2}}],["threadlocal",{"0":{"245":1},"2":{"182":1,"245":22,"246":1,"248":2}}],["thread线程类的静态方法",{"2":{"164":1}}],["thread",{"0":{"162":1,"168":1,"169":1},"2":{"8":1,"10":1,"148":13,"150":10,"152":26,"155":2,"169":1,"187":2,"188":1,"245":20,"257":1,"266":23,"324":1,"431":1,"437":2,"438":1,"439":1,"505":1,"514":7,"598":1,"704":1,"708":1}}],["then",{"2":{"504":1}}],["they",{"2":{"484":1}}],["there",{"2":{"425":1}}],["theadtest",{"2":{"152":1}}],["the",{"2":{"62":3,"119":1,"315":1,"316":1,"317":1,"324":1,"325":1,"356":1,"418":2,"423":1,"431":1,"438":1,"484":1,"502":1,"505":2,"517":1}}],["this是一个指向本对象的指针",{"2":{"55":1}}],["this和super不能同时出现在一个构造函数里面",{"2":{"55":1}}],["this",{"2":{"55":3,"89":2,"201":1,"217":1,"230":1,"266":2,"315":1,"322":1,"323":2,"371":1,"372":1,"425":1,"427":1,"429":1,"437":1,"478":6,"491":2,"499":2,"503":2,"504":2,"505":6,"514":6,"608":24}}],["this与super的区别",{"0":{"55":1}}],["tom",{"2":{"582":1,"598":1,"611":1}}],["too",{"2":{"505":1}}],["toobj",{"2":{"500":1,"502":1,"514":1,"515":1}}],["toupdateinstances",{"2":{"491":6}}],["touppercase",{"2":{"126":1}}],["toipaddr",{"2":{"485":1,"491":1}}],["tojson",{"2":{"480":1,"485":2,"491":1,"499":2,"500":1,"504":1,"505":1}}],["totalcount",{"2":{"442":5}}],["total计数器",{"2":{"442":1}}],["tokens",{"2":{"438":1}}],["tokencounters",{"2":{"433":1}}],["toarray",{"2":{"351":2,"392":1}}],["tostring",{"2":{"266":1,"299":1,"401":1,"479":2,"491":3,"492":1,"500":1,"503":2,"505":1,"514":1}}],["topics",{"0":{"456":1}}],["top",{"2":{"147":2}}],["tolowercase",{"2":{"126":1}}],["todo",{"2":{"99":1,"183":1}}],["to",{"2":{"33":6,"271":1,"315":1,"316":1,"317":1,"351":2,"389":1,"409":1,"423":1,"448":1,"479":1,"484":3,"491":1,"492":1,"498":1,"499":2,"500":1,"514":1,"517":3,"544":1}}],["tlab",{"2":{"8":1,"10":4}}],["a可能认识的人",{"2":{"689":1}}],["a和c共同关注",{"2":{"689":1}}],["a关注的人也关注他",{"2":{"689":1}}],["a关注的人",{"2":{"689":1}}],["aof文件会发生变化",{"2":{"647":1}}],["aof文件",{"2":{"644":1}}],["aof文件在重写时",{"2":{"644":1}}],["aof文件的扩充比例",{"2":{"644":1}}],["aof文件的重写规则",{"0":{"644":1}}],["aof文件的内容",{"2":{"643":1}}],["aof文件加载时机",{"0":{"638":1}}],["aof文件存储的内容",{"0":{"636":1}}],["aof文件到达多少容量进行重写",{"2":{"635":1,"641":1,"644":1}}],["aof的扩充比例",{"2":{"635":1,"641":1}}],["aof机制演示效果",{"0":{"643":1}}],["aof机制演示",{"0":{"639":1},"1":{"640":1,"641":1,"642":1,"643":1,"644":1}}],["aof机制保存数据的文件",{"2":{"635":1,"641":1}}],["aof机制",{"0":{"634":1},"1":{"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1}}],["aof",{"0":{"648":1},"2":{"625":1,"635":5,"641":5,"643":3,"644":2,"647":1}}],["amqp",{"2":{"448":1}}],["amqp依赖",{"2":{"448":1}}],["amqp的一种",{"2":{"444":1}}],["amqp官网",{"2":{"444":1}}],["amp",{"2":{"36":2,"51":10,"270":2,"371":1,"372":1,"383":2,"384":4}}],["afterpropertiesset",{"2":{"608":2}}],["after",{"2":{"438":1,"660":2}}],["afternodeinsertion",{"2":{"371":1}}],["afternodeaccess",{"2":{"371":1}}],["avg",{"2":{"438":1}}],["avgusedtokens",{"2":{"438":3}}],["avgrt",{"2":{"431":1}}],["auth",{"2":{"595":1,"660":2}}],["author",{"2":{"418":1,"597":1,"598":1,"704":1}}],["authority",{"2":{"430":2}}],["authorityrulechecker",{"2":{"430":1}}],["authorityrule",{"2":{"430":2}}],["authorityrule>",{"2":{"430":1}}],["authorityrule>>",{"2":{"430":1}}],["authorityrulemanager",{"2":{"430":1}}],["authorityrules",{"2":{"430":3}}],["authorityexception",{"2":{"430":2}}],["authorityslot",{"0":{"430":1},"2":{"414":1,"429":1}}],["authorization",{"2":{"410":1}}],["autowired",{"2":{"606":2,"609":1,"610":1,"611":2,"617":2,"675":2,"704":2}}],["automaticallycloseresource",{"2":{"317":1}}],["autocloseable",{"2":{"301":1,"317":1}}],["auto",{"2":{"99":1,"504":1,"635":2,"641":2,"644":2}}],["acid",{"2":{"619":1}}],["active",{"2":{"605":1,"617":1}}],["actiontypes",{"2":{"483":1,"502":1,"517":1}}],["action",{"2":{"182":2,"483":1,"485":6,"489":4,"490":5,"492":2,"502":1,"517":1}}],["ack",{"2":{"514":2}}],["accept",{"2":{"441":1}}],["access",{"2":{"349":4,"410":4}}],["acquire",{"2":{"439":1}}],["acquirecount",{"2":{"435":4,"438":5,"439":3}}],["attach",{"2":{"505":1}}],["at",{"2":{"324":5}}],["atomic包中的类基本的特性就是在多线程环境下",{"2":{"271":1}}],["atomic包里提供了一个类",{"2":{"223":1}}],["atomicmarkablereference",{"2":{"270":1}}],["atomicreferencefieldupdater",{"2":{"270":1}}],["atomicreferencearray",{"2":{"270":1}}],["atomicreference",{"2":{"270":1}}],["atomicstampedreference",{"2":{"223":1,"270":1}}],["atomiclongfieldupdater",{"2":{"270":1}}],["atomiclongarray",{"2":{"270":1}}],["atomiclong",{"2":{"222":1,"270":1}}],["atomicboolean",{"2":{"222":1,"270":1}}],["atomicintegerfieldupdater",{"2":{"270":1}}],["atomicintegerarray",{"2":{"270":1}}],["atomicinteger",{"2":{"210":1,"212":1,"222":1,"270":1,"271":3}}],["atomic",{"0":{"212":1,"270":1,"271":1},"2":{"210":1,"212":1,"221":1,"222":1,"270":2}}],["atomic开头的原子类",{"2":{"139":1}}],["a不是b的父类或子类",{"2":{"313":1}}],["an",{"2":{"484":1}}],["announce",{"2":{"671":3}}],["annotation",{"2":{"418":13,"606":1,"611":2,"617":1,"675":1,"704":1}}],["annoyance",{"2":{"311":5}}],["any",{"2":{"356":1,"484":1,"517":1}}],["and",{"2":{"221":1,"222":1,"230":2,"271":1,"356":1,"608":1}}],["alibaba公司出品",{"2":{"464":1}}],["alibaba",{"2":{"417":2,"418":1,"465":2,"466":2,"477":1,"482":1,"484":1,"498":1,"504":1,"514":1}}],["alive",{"2":{"266":2}}],["always",{"2":{"410":1,"573":1,"615":1,"635":1,"637":1,"641":1,"655":3,"660":2,"670":6}}],["allkeys",{"2":{"680":3}}],["allmemberswithoutself",{"2":{"492":1}}],["allips",{"2":{"485":1,"491":1,"503":1,"504":1,"505":1}}],["allow",{"2":{"410":4,"544":1}}],["allowcredentials",{"2":{"409":1}}],["allowedheaders",{"2":{"409":1}}],["allowedmethods",{"2":{"409":1}}],["allowedorigins",{"2":{"409":1}}],["allowedoriginpatterns",{"2":{"409":1}}],["allocation",{"2":{"8":1,"10":1}}],["all",{"2":{"266":1,"356":1,"517":1,"608":1}}],["addnodeaddress",{"2":{"696":1}}],["added",{"2":{"517":1}}],["addclient",{"2":{"517":1,"518":1}}],["addchild",{"2":{"423":1,"427":1}}],["addorreplaceservice",{"2":{"505":1}}],["addoccupiedpass",{"2":{"438":1}}],["addtask时",{"2":{"489":1}}],["addtask",{"2":{"489":3,"492":1}}],["addipaddresses",{"2":{"484":2,"485":1}}],["addinstance",{"2":{"484":2}}],["adding",{"2":{"389":1,"498":1}}],["addbeatinfo",{"2":{"480":1,"496":1,"498":2}}],["addr",{"2":{"465":1,"495":1}}],["address",{"2":{"580":3,"610":1}}],["addresses",{"2":{"409":1}}],["addrequestheader=k1",{"2":{"409":1}}],["addandget",{"2":{"439":2}}],["addall",{"2":{"391":1}}],["addwaitingrequest",{"2":{"438":1}}],["addpass",{"2":{"437":2}}],["addpassrequest",{"2":{"429":7}}],["addsusppressed",{"2":{"301":1}}],["add10bythreadlocal",{"2":{"245":2}}],["add",{"0":{"536":1,"542":1},"2":{"243":1,"342":2,"351":2,"355":2,"360":1,"364":1,"409":1,"410":4,"438":1,"442":2,"484":1,"485":3,"491":1,"505":2,"534":1,"536":2,"540":2,"542":1,"611":5,"695":2,"696":1}}],["a线程自己是可以重复获取此锁的",{"2":{"230":1}}],["a线程lock",{"2":{"230":1}}],["aqs类中的其他方法都是final",{"2":{"230":1}}],["aqs底层使用了模板方法模式",{"2":{"230":1}}],["aqs已经在顶层实现好了",{"2":{"230":1}}],["aqs定义两种资源共享方式",{"2":{"230":1}}],["aqs使用了模板方法模式",{"2":{"230":1}}],["aqs使用cas对该同步状态进行原子操作实现对其值的修改",{"2":{"230":1}}],["aqs使用一个int成员变量来表示同步状态",{"2":{"230":1}}],["aqs是将每条请求共享资源的线程封装成一个clh锁队列的一个结点",{"2":{"230":1}}],["aqs是一个用来构建锁和同步器的框架",{"2":{"229":1}}],["aqs核心思想是",{"2":{"230":1}}],["aqs的全称为",{"2":{"229":1}}],["aqs",{"0":{"228":1,"229":1,"230":1},"1":{"229":1,"230":1},"2":{"230":2}}],["a2",{"2":{"133":2}}],["a1",{"2":{"133":2}}],["a1==b1的结果是false",{"2":{"133":1}}],["a自动拆箱成int类型再和c比较",{"2":{"133":1}}],["a=40",{"2":{"310":1}}],["a=",{"0":{"133":1}}],["a==b",{"2":{"94":1}}],["aset",{"2":{"689":3}}],["aset存在于redis数据库中的set的key",{"2":{"689":1}}],["assert",{"2":{"608":1}}],["assets",{"2":{"201":1,"688":1}}],["asia",{"2":{"563":1}}],["asint",{"2":{"499":1}}],["asboolean",{"2":{"499":1}}],["aslong",{"2":{"499":1}}],["aslist",{"2":{"351":2,"392":1}}],["aspect",{"2":{"418":2}}],["asm",{"2":{"330":1}}],["as",{"0":{"196":1},"2":{"196":3}}],["ascii值",{"2":{"115":1}}],["asynchronous",{"2":{"106":2,"505":1}}],["aio",{"0":{"106":1},"2":{"106":6}}],["apache",{"2":{"597":1,"598":1}}],["apt",{"2":{"572":2}}],["ap",{"2":{"484":1}}],["app",{"2":{"430":2,"517":5,"518":1,"558":2}}],["apparray",{"2":{"430":2}}],["applicationutils",{"2":{"504":1}}],["applicationcontext",{"2":{"478":2}}],["application",{"2":{"409":2,"465":1,"479":1,"495":1,"560":2,"617":1,"675":1}}],["apply",{"2":{"401":1,"435":1}}],["applet小程序没有main方法",{"2":{"40":1}}],["appendfsync",{"2":{"635":4,"637":3,"641":4}}],["appendfilename",{"2":{"635":1,"641":1}}],["appendonly",{"0":{"638":1},"2":{"635":2,"641":2,"643":2}}],["append",{"2":{"124":2,"128":1,"491":4,"580":2,"625":1,"635":1,"641":1}}],["api之间可以来回传递集合",{"2":{"336":1}}],["api开放接口必须使用",{"2":{"330":1}}],["api",{"0":{"220":1,"270":1},"2":{"103":2,"318":1,"327":2,"329":1,"336":1,"404":2,"410":2,"498":1,"504":1,"517":1,"606":1,"611":1,"617":1,"675":1,"704":1}}],["aeqb",{"2":{"94":1}}],["aaa",{"2":{"355":1}}],["aa==bb",{"2":{"94":1}}],["aa",{"2":{"94":2,"583":2,"598":2,"675":6}}],["abc",{"2":{"301":1}}],["abcdefg",{"2":{"124":2}}],["abstractdelaytask",{"2":{"492":1}}],["abstractautoserviceregistration如图",{"2":{"478":1}}],["abstract",{"2":{"437":1}}],["abstractrule",{"2":{"435":1}}],["abstractsentinelinterceptor类的prehandle方法",{"2":{"425":1}}],["abstractsentinelinterceptor",{"0":{"422":1}}],["abstractsentinelaspectsupport",{"2":{"418":1}}],["abstractstringbuilder是stringbuilder与stringbuffer的公共父类",{"2":{"128":1}}],["abstractlist",{"2":{"356":1}}],["abstractqueuedsynchronizer",{"0":{"228":1},"1":{"229":1,"230":1},"2":{"229":1,"230":1}}],["aba",{"2":{"223":2,"270":1}}],["abortpolicy",{"2":{"181":1,"265":2}}],["ab",{"2":{"94":4,"224":1}}],["article",{"2":{"684":2}}],["artifactid>redisson",{"2":{"696":1}}],["artifactid>lombok",{"2":{"595":1}}],["artifactid>junit",{"2":{"595":1}}],["artifactid>jedis",{"2":{"595":1}}],["artifactid>jackson",{"2":{"448":1}}],["artifactid>",{"2":{"403":2,"409":1,"417":1,"448":2,"465":1,"595":3,"601":1,"604":1,"696":1}}],["artifactid>spring",{"2":{"403":2,"409":1,"417":1,"448":1,"465":1,"601":1,"604":1}}],["arguments",{"2":{"502":1}}],["args",{"2":{"89":1,"94":1,"99":3,"112":1,"133":1,"148":1,"152":4,"245":1,"266":1,"311":1,"404":2,"425":8,"426":2,"427":2,"428":2,"429":3,"430":2,"431":2,"432":4,"435":2,"440":2}}],["are",{"2":{"425":1}}],["area中的method",{"2":{"2":1}}],["area",{"2":{"2":4,"3":1}}],["around",{"2":{"418":1}}],["arithmeticexception",{"2":{"310":2,"313":1}}],["arithmeticexecption算术异常",{"2":{"286":1}}],["arraymetric",{"2":{"437":1}}],["arrays",{"2":{"351":2,"392":1}}],["arraystoreexception",{"2":{"312":1}}],["arraylist不是同步的",{"2":{"353":1}}],["arraylist的优点如下",{"2":{"350":1}}],["arraylist",{"0":{"350":1,"352":1,"353":1,"354":2,"355":1,"356":1,"391":1},"2":{"337":1,"338":1,"339":1,"342":1,"346":1,"350":5,"351":1,"352":7,"353":4,"354":1,"355":1,"356":6,"357":1,"391":4,"438":2,"485":1,"491":1,"510":1}}],["arrayindexoutofboundsexception",{"2":{"313":1}}],["arrayindexoutboundexception数组下标越界异常",{"2":{"286":1}}],["arrayblockingqueue",{"2":{"181":3,"251":1,"266":3}}],["array",{"0":{"391":1,"392":1},"2":{"99":4,"351":5,"356":1,"391":3,"392":3,"437":2,"438":2}}],["arr",{"2":{"99":6}}],["age本来是30",{"2":{"580":1}}],["age本来是0",{"2":{"580":1}}],["age本来是20",{"2":{"580":2}}],["agent",{"2":{"517":6,"518":1}}],["age",{"2":{"89":6,"449":1,"580":6,"581":4}}],["a",{"0":{"204":1,"205":1},"2":{"10":1,"84":3,"88":2,"94":4,"99":8,"117":1,"133":3,"148":4,"200":1,"221":2,"222":4,"223":4,"224":2,"234":1,"245":1,"310":16,"311":2,"315":1,"316":1,"317":1,"321":1,"324":1,"325":1,"484":1,"511":1,"546":1,"585":1,"689":3}}],["并设置有效时间",{"2":{"694":1}}],["并获取前2位",{"2":{"584":1}}],["并把相同名称的value加在一起",{"2":{"584":1}}],["并把链表头放入新数组的相应下标",{"2":{"372":1}}],["并集",{"2":{"583":1}}],["并基于udp协议来接收服务变更通知",{"2":{"519":1}}],["并返回缓存结果",{"2":{"511":1}}],["并返回其引用",{"2":{"116":1}}],["并放入集合",{"2":{"505":1}}],["并对null做处理",{"2":{"371":1}}],["并对不同类型的异常做出不同的处理",{"2":{"298":1}}],["并允许使用null值和null键",{"2":{"366":1}}],["并转交给",{"2":{"305":1}}],["并提示给用户",{"2":{"330":1}}],["并提供了良好的接口",{"2":{"290":1}}],["并提高程序健壮性",{"2":{"281":1}}],["并调用其模板方法",{"2":{"230":1}}],["并尝试获取独占锁",{"2":{"224":1}}],["并尝试去获取独占锁",{"2":{"224":1}}],["并可以使用",{"2":{"258":1}}],["并可以再次尝试",{"2":{"221":1}}],["并可返回变化后的结果",{"0":{"98":1}}],["并在队列中删除返回的对象",{"2":{"364":1}}],["并在需要同步的方法上加上关键字",{"2":{"239":1}}],["并在无法获取锁的时候立即返回或者等待一段时间",{"2":{"220":1}}],["并在分配后更新列表记录",{"2":{"9":1}}],["并将对应的proto文件定义在了consistency这个子模块中",{"2":{"469":1}}],["并将不太具体的",{"2":{"321":1}}],["并将",{"2":{"203":1,"425":1}}],["并将线程和异常作为参数传递给",{"2":{"187":1}}],["并将它们添加到要回收的集合中",{"2":{"17":1}}],["并进入挂起状态",{"2":{"177":1}}],["并避免程序员错误的认为可以在其他非运行线程调用这些方法",{"2":{"169":1}}],["并没有运行",{"2":{"154":1}}],["并重写run",{"2":{"152":1}}],["并行",{"2":{"140":2}}],["并行和并发有什么区别",{"0":{"140":1}}],["并行程序会比串行程序更适应业务需求",{"2":{"137":1}}],["并赋给引用s",{"2":{"120":1}}],["并且仓库中存在文件",{"2":{"544":1}}],["并且失败时会将任务重新入队并充实",{"2":{"492":1}}],["并且接收任务",{"2":{"492":1}}],["并且基于线程池异步执行队列中的任务",{"2":{"489":1}}],["并且时间窗未到",{"2":{"441":1}}],["并且传入了两个参数",{"2":{"437":1}}],["并且不包含origin",{"2":{"430":1}}],["并且不用强制子类来实现它",{"2":{"64":1}}],["并且包含origin",{"2":{"430":1}}],["并且设备上也难以提供这么多的存储空间",{"2":{"383":1}}],["并且最坏情况下还会将hashmap变成一个单链表",{"2":{"376":1}}],["并且解除旧数组中的引用",{"2":{"372":1}}],["并且oldcap大于默认值16",{"2":{"372":1}}],["并且在一段时间内",{"2":{"668":1}}],["并且在hashmap中如果k",{"2":{"360":1}}],["并且在遍历过程中使用一个",{"2":{"341":1}}],["并且其内部是通过",{"2":{"339":1}}],["并且描述抛出异常的场景",{"2":{"319":1}}],["并且资源可以正常关闭",{"2":{"315":1}}],["并且cyclicbarrier的构造方法可以传入barrieraction",{"2":{"274":1}}],["并且容量为",{"2":{"266":1}}],["并且执行读操作的线程和写操作的线程也可以并发的访问",{"2":{"239":1}}],["并且通常应该简短而不是阻塞",{"2":{"230":1}}],["并且将共享资源设置为锁定状态",{"2":{"230":1}}],["并且可以支持多个相关类的条件对象",{"2":{"220":1}}],["并且下一次垃圾回收动作发生时",{"2":{"193":1}}],["并且承受着多个因素制约",{"2":{"188":1}}],["并且要保证同步块或方法的锁对象与调用",{"2":{"174":1}}],["并且",{"2":{"166":1,"217":1,"223":1,"384":1,"494":1}}],["并且释放所持有的对象的锁",{"2":{"163":1}}],["并且平均分配每个线程占用的",{"2":{"160":1}}],["并且无法抛出返回结果的异常",{"2":{"156":1}}],["并且编程模型简单",{"2":{"106":1}}],["并且只会执行一次",{"2":{"56":1}}],["并不马上返回",{"2":{"330":1}}],["并不能确切的唤醒某一个等待状态的线程",{"2":{"163":1}}],["并不能直接交给底层操作系统去执行",{"2":{"2":1}}],["并不会在某个线程中执行它",{"2":{"155":1}}],["并不会影响到",{"2":{"99":1}}],["并不是完全开源的",{"2":{"42":1}}],["并考虑2种回收机制",{"0":{"19":1}}],["并发情况下",{"2":{"704":2}}],["并发控制使用",{"2":{"388":1}}],["并发性能更好",{"2":{"387":1}}],["并发性能的提升是显而易见的",{"2":{"241":1}}],["并发工具之semaphore与exchanger",{"0":{"275":1},"1":{"276":1,"277":1,"278":1}}],["并发工具之countdownlatch与cyclicbarrier",{"0":{"273":1},"1":{"274":1}}],["并发工具",{"0":{"272":1},"1":{"273":1,"274":1,"275":1,"276":1,"277":1,"278":1}}],["并发数控制等功能",{"2":{"255":1}}],["并发容器之blockingqueue详解",{"0":{"250":1},"1":{"251":1}}],["并发容器之threadlocal详解",{"0":{"244":1},"1":{"245":1,"246":1}}],["并发容器之copyonwritearraylist详解",{"0":{"242":1},"1":{"243":1}}],["并发容器之concurrenthashmap详解",{"0":{"236":1},"1":{"237":1,"238":1,"239":1,"240":1,"241":1}}],["并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性",{"2":{"239":1}}],["并发容器",{"0":{"235":1},"1":{"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1}}],["并发类代替自己手写锁",{"2":{"225":1}}],["并发关键字",{"0":{"197":1},"1":{"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1}}],["并发理论",{"0":{"189":1},"1":{"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1}}],["并发编程之美",{"2":{"148":1}}],["并发编程三要素",{"2":{"139":1}}],["并发编程三要素是什么",{"0":{"139":1}}],["并发编程的目的就是为了能提高程序的执行效率",{"2":{"138":1}}],["并发编程的优点",{"0":{"137":1}}],["并发编程的优缺点",{"0":{"136":1},"1":{"137":1,"138":1,"139":1,"140":1,"141":1}}],["并发编程有什么缺点",{"0":{"138":1}}],["并发编程基础知识",{"0":{"135":1},"1":{"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1}}],["并发处理能力低",{"2":{"106":1}}],["并发",{"2":{"8":1,"140":2}}],["叫做",{"2":{"8":1}}],["方便回退到历史版本",{"2":{"523":1}}],["方便以后服务变更后推送消息",{"2":{"518":1}}],["方便exception处理",{"2":{"259":1}}],["方便进行业务拆分",{"2":{"137":1}}],["方便我们使用的就是面向对象了",{"2":{"59":1}}],["方式创建本地仓库",{"2":{"540":1}}],["方式三",{"2":{"112":1}}],["方式二",{"2":{"112":1}}],["方式一",{"2":{"112":1}}],["方式",{"2":{"8":1,"540":1}}],["方式分配内存",{"2":{"8":1}}],["方法完成nacos集群的数据同步",{"2":{"484":1}}],["方法中",{"2":{"483":1,"505":2,"518":1}}],["方法标记为一个资源",{"2":{"417":1}}],["方法参数一致",{"2":{"405":1}}],["方法类型",{"2":{"405":1}}],["方法实现元素的比较",{"2":{"395":1}}],["方法如何比较元素",{"0":{"395":1}}],["方法用来排序",{"2":{"393":2}}],["方法用于执行线程的运行时代码",{"2":{"154":1}}],["方法用于启动线程",{"2":{"154":1}}],["方法尝试更新元素个数basecount",{"2":{"389":1}}],["方法返回的是int整数类型",{"2":{"383":1}}],["方法表示的在进行第一次初始化时会对其进行扩容",{"2":{"372":1}}],["方法序列化",{"2":{"356":1}}],["方法不存在异常",{"2":{"313":1}}],["方法不能修改传递给它的任何参数变量的内容",{"2":{"99":1}}],["方法创建某个类的实例",{"2":{"313":1}}],["方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作",{"2":{"307":1}}],["方法添加到原来的异常",{"2":{"301":1}}],["方法放在",{"2":{"301":1}}],["方法也可能抛出",{"2":{"301":1}}],["方法也必须被覆盖",{"2":{"95":1}}],["方法会使用hashmap",{"2":{"360":1}}],["方法会打印这些详细信息",{"2":{"299":1}}],["方法会原子性的进行增量操作把当前值加一",{"2":{"212":1}}],["方法告诉",{"2":{"278":1}}],["方法可以返回持有计算结果的",{"2":{"259":1}}],["方法可以让这种操作具有原子性如getandincrement",{"2":{"212":1}}],["方法获取计算的结果",{"2":{"258":1}}],["方法结束后",{"2":{"256":1}}],["方法加锁",{"2":{"208":1}}],["方法说明对象锁已经被取走",{"2":{"205":1}}],["方法占用的锁是当前实例对象锁",{"2":{"200":1}}],["方法占用的锁是当前类的锁",{"2":{"200":1}}],["方法什么时候被调用",{"0":{"193":1}}],["方法进行处理",{"2":{"187":1}}],["方法里面的代码才是被线程自身所调用的",{"2":{"185":1}}],["方法三",{"2":{"183":1}}],["方法二",{"2":{"183":1}}],["方法一",{"2":{"183":1}}],["方法必须在",{"2":{"174":1}}],["方法必须等待run",{"2":{"154":1}}],["方法则将随机解除该对象阻塞的线程",{"2":{"174":1}}],["方法都将导致线程阻塞",{"2":{"174":1}}],["方法都在一个线程执行所以不存在线程不安全情况",{"2":{"140":1}}],["方法就是选择委托方式的",{"2":{"486":1}}],["方法就是完成服务注册的关键",{"2":{"478":1}}],["方法就是一直等待客户端连接",{"2":{"173":1}}],["方法就是线程要执行的业务逻辑方法",{"2":{"152":1}}],["方法比较",{"2":{"360":1}}],["方法比",{"2":{"170":1}}],["方法没有声明任何异常",{"2":{"170":1}}],["方法声明抛出",{"2":{"170":1}}],["方法后转入就绪",{"2":{"170":1}}],["方法后转入阻塞",{"2":{"170":1}}],["方法给其他线程运行机会时不考虑线程的优先级",{"2":{"170":1}}],["方法和",{"0":{"170":1}}],["方法和构造方法的访问",{"2":{"50":1}}],["方法将其转换成线程安全的容器后再使用",{"2":{"355":1}}],["方法将在当前正在执行的线程上运行",{"2":{"169":1}}],["方法将会阻塞",{"2":{"157":1}}],["方法是一个本地方法",{"2":{"271":1}}],["方法是thread1",{"2":{"185":1}}],["方法是thread2",{"2":{"185":1}}],["方法是针对对象的",{"2":{"174":1}}],["方法是静态的",{"0":{"169":1}}],["方法是在本线程里的",{"2":{"154":1}}],["方法有两种重载的形式",{"2":{"395":1}}],["方法有什么区别",{"0":{"170":1,"259":1}}],["方法有什么作用",{"0":{"168":1}}],["方法有返回值",{"2":{"153":1}}],["方法时",{"2":{"167":1,"498":1}}],["方法时会执行",{"0":{"155":1}}],["方法要定义在object类中",{"2":{"166":1}}],["方法应该在循环调用",{"2":{"165":1}}],["方法被调用后",{"2":{"164":1}}],["方法被覆盖过",{"2":{"95":1}}],["方法使线程进入睡眠状态",{"2":{"161":1}}],["方法让出了对",{"2":{"161":1}}],["方法只会给相同优先级或更高优先级的线程以运行的机会",{"2":{"170":1}}],["方法只是",{"2":{"155":1}}],["方法只能抛出运行时异常",{"2":{"153":1}}],["方法方可启动线程并使线程进入就绪状态",{"2":{"155":1}}],["方法当成一个",{"2":{"155":1}}],["方法而不是run",{"2":{"154":1}}],["方法运行结束",{"2":{"154":1}}],["方法无需等待run方法体代码执行完毕",{"2":{"154":1}}],["方法无返回值",{"2":{"153":1}}],["方法称为线程体",{"2":{"154":1}}],["方法允许抛出异常",{"2":{"153":1}}],["方法执行完毕才能执行下面的代码",{"2":{"154":1}}],["方法执行完成后",{"2":{"164":1}}],["方法执行完成",{"2":{"152":4}}],["方法执行中",{"2":{"152":5}}],["方法执行结束",{"2":{"152":2,"154":1,"159":1}}],["方法正在执行",{"2":{"152":2,"154":1}}],["方法前执行",{"2":{"146":1}}],["方法并没有改变存储在变量",{"2":{"99":1}}],["方法得到的是对象引用的拷贝",{"2":{"99":1}}],["方法得到的是所有参数值的一个拷贝",{"2":{"99":1}}],["方法来实现的",{"2":{"511":1}}],["方法来创建一个只读集合",{"2":{"342":1}}],["方法来获取服务列表",{"2":{"517":1}}],["方法来获取",{"2":{"301":1}}],["方法来保证原子操作",{"2":{"271":1}}],["方法来控制并发线程的执行",{"2":{"170":1}}],["方法来启动一个线程",{"2":{"154":2}}],["方法来启动线程",{"2":{"152":1}}],["方法来检查",{"2":{"95":1}}],["方法来两个对象的内容相等",{"2":{"94":1}}],["方法名相同参数列表不同",{"2":{"92":1}}],["方法名",{"2":{"76":2,"92":1}}],["方法外部",{"2":{"69":1}}],["方法重写",{"2":{"60":1}}],["方法重载",{"2":{"60":1}}],["方法",{"0":{"125":2,"155":2,"205":2},"2":{"8":1,"40":1,"50":4,"54":1,"94":2,"124":1,"125":2,"152":3,"154":1,"155":2,"159":3,"164":1,"167":1,"170":1,"175":1,"193":3,"199":1,"200":2,"207":1,"208":1,"215":1,"220":2,"226":1,"248":1,"249":1,"300":1,"301":1,"307":1,"330":1,"347":1,"351":1,"360":1,"372":1,"380":2,"382":2,"383":1,"392":1,"395":1,"430":1,"437":2,"441":2,"448":1,"478":1,"489":1,"490":1,"492":1,"503":1,"505":1,"511":1}}],["方法区",{"2":{"3":1}}],["方法服务的",{"2":{"3":1}}],["方法的返回值可以为null",{"2":{"330":1}}],["方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果",{"2":{"78":1}}],["方法的线程就只能在等锁池",{"2":{"205":1}}],["方法的对象是同一个",{"2":{"174":1}}],["方法的区别",{"0":{"172":1}}],["方法的实现",{"2":{"166":1}}],["方法的代码",{"2":{"165":1}}],["方法的内容",{"2":{"155":1}}],["方法的重载和重写都是实现多态的方式",{"2":{"92":1}}],["方法的时候",{"2":{"54":1,"167":1,"248":1}}],["方法的类",{"2":{"39":1}}],["方法的",{"0":{"165":1},"2":{"3":1}}],["方法出口等信息",{"2":{"3":1}}],["先看构造函数",{"2":{"514":1}}],["先看这段代码",{"2":{"88":1}}],["先将要更新的实例信息写入本地实例列表",{"2":{"487":1}}],["先获取要更新的实例列表",{"2":{"484":1}}],["先根据角标获取数组中保存的",{"2":{"437":1}}],["先来看时间区间窗口的qps计数功能",{"2":{"436":1}}],["先调用",{"2":{"356":1}}],["先进后出",{"2":{"340":1}}],["先进后出的原则",{"2":{"5":1}}],["先到者先拿到锁",{"2":{"230":1}}],["先判断对象是否已经实例过",{"2":{"200":1}}],["先天的就适合于并发编程",{"2":{"137":1}}],["先理解下java中的编译器和解释器",{"2":{"38":1}}],["先检查常量池是否已经加载相应的类",{"2":{"8":1}}],["说明服务不存在",{"2":{"502":1}}],["说明心跳失败",{"2":{"502":1}}],["说明当前是close状态",{"2":{"442":1}}],["说明可以立即执行",{"2":{"439":1}}],["说明在阈值范围内",{"2":{"438":1}}],["说明超出阈值",{"2":{"438":1}}],["说明有并发更新",{"2":{"437":1}}],["说明正是要找的窗口",{"2":{"437":1}}],["说明是旧数据",{"2":{"437":1}}],["说明是第一次",{"2":{"437":1}}],["说明是一次更新操作",{"2":{"389":1}}],["说明是红黑树结构",{"2":{"389":1}}],["说明put操作对数据产生了影响",{"2":{"389":1}}],["说明",{"2":{"330":10}}],["说出下面代码的运行结果",{"2":{"311":1}}],["说说自己是怎么使用",{"0":{"200":1}}],["说说线程的生命周期及五种基本状态",{"0":{"159":1}}],["说一下",{"0":{"25":1,"153":1,"201":1,"271":1,"350":1,"359":1,"366":1},"1":{"26":1,"27":1,"28":1,"29":1}}],["说一下堆栈的区别",{"0":{"5":1}}],["说到对象的创建",{"2":{"8":1}}],["hdel",{"2":{"688":1}}],["hlen",{"2":{"581":1,"688":1}}],["hvals",{"2":{"581":1,"598":1}}],["hkeys",{"2":{"581":1,"598":1}}],["hgetall",{"2":{"581":1,"596":1,"688":1}}],["hget",{"2":{"581":1}}],["hsetnx",{"2":{"581":1}}],["hset",{"2":{"581":1,"596":2,"688":1}}],["hmget",{"2":{"581":1}}],["hmset",{"2":{"581":1,"598":1}}],["hm",{"2":{"563":4}}],["hmall",{"2":{"560":7,"563":4}}],["hmall\\t",{"2":{"448":1}}],["html",{"2":{"560":2,"563":2}}],["html页面等",{"2":{"522":1}}],["httpmethod",{"2":{"480":1,"500":1,"512":1}}],["httpservletresponse",{"2":{"422":1}}],["httpservletrequest",{"2":{"422":1,"483":1,"502":1,"517":1}}],["https",{"2":{"407":1,"466":2,"471":1,"526":1,"570":1,"572":1}}],["http",{"2":{"254":1,"407":9,"409":1,"410":1,"417":1,"517":1,"570":1,"572":1}}],["hot",{"2":{"704":2,"708":4,"713":3}}],["hotspot",{"2":{"13":1}}],["hotspot虚拟机对象探秘",{"0":{"7":1},"1":{"8":1,"9":1,"10":1,"11":1,"12":1,"13":1}}],["hobbies",{"2":{"611":2}}],["hold",{"2":{"511":3}}],["hosts",{"2":{"517":3}}],["hostreactor去处理",{"2":{"514":1}}],["hostreactor",{"0":{"511":1,"515":1},"2":{"510":2,"514":5}}],["host",{"2":{"447":1,"448":2,"560":1,"596":3,"597":2,"605":1,"617":1}}],["hincrby",{"2":{"688":1}}],["histories",{"2":{"544":2}}],["highestcpuusage",{"2":{"431":1}}],["highestcpuusageisset",{"2":{"431":1}}],["highestsystemload",{"2":{"431":1}}],["highestsystemloadisset",{"2":{"431":1}}],["hitail",{"2":{"372":7}}],["hihead",{"2":{"372":4}}],["hidden",{"2":{"356":1}}],["hibernate",{"2":{"111":1}}],["human",{"2":{"311":1}}],["h",{"2":{"147":2,"371":3,"377":3,"383":1,"575":2,"674":2}}],["hangzhou",{"2":{"580":1}}],["handling",{"2":{"490":2}}],["handlestatechangewhenthresholdexceeded",{"2":{"442":2}}],["handlefallback",{"2":{"418":1}}],["handleblockexception",{"2":{"418":1,"422":1}}],["handlerinterceptor拦截器会拦截一切进入controller的方法",{"2":{"421":1,"422":1}}],["handler",{"2":{"187":1,"264":1,"266":1,"290":1,"409":1,"422":1,"429":2}}],["handle",{"2":{"183":1,"298":4,"301":1,"418":1,"490":3}}],["hard",{"2":{"537":1}}],["halfopen的重试时间",{"2":{"441":1}}],["half",{"2":{"441":6,"442":3}}],["has",{"2":{"499":2,"502":1}}],["hasrules",{"2":{"432":1}}],["hasnext",{"2":{"346":1,"347":1}}],["hash的键",{"2":{"688":1}}],["hash的基本使用",{"2":{"598":1}}],["hashvalueserializer",{"2":{"608":2}}],["hashkeyserializer",{"2":{"608":2}}],["hashtest",{"2":{"598":1,"611":1}}],["hashtable",{"0":{"385":1,"388":1},"2":{"239":2,"337":1,"338":1,"339":1,"340":1,"385":10,"388":7}}],["hash操作",{"2":{"581":1}}],["hashicorp公司出品",{"2":{"464":1}}],["hashentry",{"2":{"389":5}}],["hashentry的方式进行实现",{"2":{"389":1}}],["hash函数",{"2":{"379":1}}],["hash值不相等",{"2":{"371":1}}],["hash方法实际是让key",{"2":{"371":1}}],["hash方法",{"2":{"371":1}}],["hash",{"0":{"377":1,"581":1,"688":1},"2":{"366":1,"371":16,"372":3,"374":1,"377":1,"384":1,"389":5,"579":1,"611":1,"695":6}}],["hashmap自己实现了自己的hash",{"2":{"383":1}}],["hashmap通常情况下是取不到最大值的",{"2":{"383":1}}],["hashmap为什么不直接使用hashcode",{"0":{"383":1}}],["hashmap总结",{"0":{"379":1}}],["hashmap是最好的选择",{"2":{"386":1}}],["hashmap是怎么解决哈希冲突的",{"0":{"373":1},"1":{"374":1,"375":1,"376":1,"377":1,"378":1,"379":1}}],["hashmap是基于哈希表的map接口的非同步实现",{"2":{"366":1}}],["hashmap在jdk1",{"0":{"367":1},"1":{"368":1,"369":1,"370":1}}],["hashmap实际上是一个",{"2":{"366":1}}],["hashmap也不例外",{"2":{"366":1}}],["hashmap的键值对允许有null",{"2":{"387":1}}],["hashmap的扩容操作是怎么实现的",{"0":{"372":1}}],["hashmap的put方法的具体流程",{"0":{"371":1}}],["hashmap的底层实现",{"0":{"367":1},"1":{"368":1,"369":1,"370":1}}],["hashmap的数据结构",{"0":{"376":1},"2":{"366":1}}],["hashmap的value统一为present",{"2":{"359":1}}],["hashmap概述",{"2":{"366":1}}],["hashmap",{"0":{"127":1,"366":1,"384":1,"385":1,"386":1,"387":1},"2":{"127":1,"337":1,"338":1,"339":6,"359":2,"360":4,"366":1,"384":2,"385":8,"388":5,"423":1,"427":2,"428":2,"480":1,"485":2,"491":3,"500":2,"512":1,"598":2,"611":2}}],["hashset与hashmap的区别",{"0":{"361":1}}],["hashset是如何保证数据不可重复的",{"0":{"360":1}}],["hashset的值存放于hashmap的key上",{"2":{"359":1}}],["hashset会假设对象没有重复出现",{"2":{"95":1}}],["hashset",{"0":{"359":1},"2":{"95":4,"337":1,"338":1,"339":2,"357":1,"359":4,"360":3,"491":1}}],["hashset如何检查重复",{"0":{"360":1},"2":{"95":1}}],["hashcode和equals方法的关系",{"2":{"95":1}}],["hashcode",{"0":{"95":1},"2":{"95":15,"127":2,"360":2,"371":3,"377":1,"380":5,"381":1,"382":1,"383":1}}],["happen",{"2":{"323":2,"425":1}}],["happens",{"2":{"139":1,"196":2,"210":1}}],["hagersten",{"2":{"230":1}}],["hexists",{"2":{"581":1,"598":1}}],["here",{"2":{"416":1,"418":1,"526":2}}],["hello",{"2":{"120":10,"123":6,"311":2,"453":1}}],["heart",{"2":{"502":1}}],["healthcheckprocessor",{"2":{"505":1}}],["healthchecktask",{"2":{"505":2}}],["healthcheckreactor就是对线程池的封装",{"2":{"503":1}}],["healthcheckreactor",{"2":{"503":1,"504":1,"505":3}}],["healthcheckstatus",{"2":{"491":2}}],["health",{"2":{"502":1,"504":1,"505":1}}],["healthyonly",{"2":{"507":1,"512":3,"517":4}}],["healthy",{"2":{"475":1,"480":1,"504":1}}],["heavy",{"2":{"144":1}}],["headers",{"2":{"410":1}}],["header",{"2":{"401":1,"410":4}}],["head",{"2":{"95":1}}],["heap",{"2":{"3":1,"20":1}}],["二是对滑动窗口内的时间区间窗口qps累加",{"2":{"436":1}}],["二者的优势",{"2":{"388":1}}],["二者的锁机制其实也是不一样的",{"2":{"208":1}}],["二来也是因为只有当数组长度为2的幂次方时",{"2":{"383":1}}],["二方包在类冲突时",{"2":{"330":1}}],["二方包",{"2":{"330":1}}],["二",{"0":{"7":1,"43":1,"189":1,"290":1,"343":1,"401":1,"424":1,"447":1,"474":1,"524":1,"558":1,"569":1},"1":{"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"525":1,"526":1,"570":1,"571":1,"572":1,"573":1},"2":{"159":1,"177":1}}],["不方便排序",{"2":{"687":1}}],["不参与处理读写请求的",{"2":{"668":1}}],["不负责读",{"2":{"652":1}}],["不负责拦截",{"2":{"437":1}}],["不受影响",{"2":{"619":1}}],["不断执行任务",{"2":{"490":1}}],["不限制微服务语言",{"2":{"464":1}}],["不做处理",{"2":{"442":1}}],["不在范围内",{"2":{"438":1}}],["不在多个线程间共享",{"2":{"245":1,"246":1}}],["不存在则创建新的",{"2":{"491":1}}],["不存在则创建新的cluster",{"2":{"491":1}}],["不存在级联失败",{"2":{"445":1}}],["不存在",{"2":{"437":1,"511":1,"583":1,"585":1,"695":1}}],["不存在链表或者红黑树",{"2":{"372":1}}],["不容易出现hash值计算错误的情况",{"2":{"381":1}}],["不清楚可以去上面看看putvalue的过程",{"2":{"381":1}}],["不易出错",{"2":{"349":1}}],["不强制返回空集合",{"2":{"330":1}}],["不得不通过catch",{"2":{"330":1}}],["不应该在",{"2":{"380":1}}],["不应该使用异常控制应用的执行流程",{"2":{"326":1}}],["不应该尝试捕获这个异常",{"2":{"308":1}}],["不要在代码中使用它",{"2":{"385":1}}],["不要在finally块中使用return",{"2":{"330":1}}],["不要求有序",{"2":{"338":1}}],["不要使用异常控制程序的流程",{"0":{"326":1}}],["不要记录并抛出异常",{"0":{"324":1}}],["不要忽略异常",{"0":{"323":1}}],["不要捕获了却什么都不处理而抛弃之",{"2":{"330":1}}],["不要捕获",{"0":{"322":1}}],["不需暴露太多内部异常细节",{"2":{"297":1}}],["不需要这个属性",{"2":{"563":1}}],["不需要手动释放和开启锁",{"2":{"208":1}}],["不需要手动获取锁和释放锁",{"2":{"207":1}}],["不需要再次计算",{"2":{"127":1}}],["不需要程序员手动释放无用内存",{"2":{"41":1}}],["不需要对象进行移动",{"2":{"26":1}}],["不处理新任务",{"2":{"265":1}}],["不接受新的任务提交",{"2":{"256":2}}],["不仅要比较hash值",{"2":{"360":1}}],["不仅仅初学者很难理解",{"2":{"314":1}}],["不仅会消耗系统资源",{"2":{"255":1}}],["不仅是内存泄漏的问题",{"2":{"249":1}}],["不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性",{"2":{"240":1}}],["不好",{"2":{"234":1}}],["不一致时可以采取丢弃和再次尝试的策略",{"2":{"221":1}}],["不一样",{"2":{"122":1}}],["不过期的key会不会删除",{"2":{"678":1}}],["不过作为key时格式是group",{"2":{"474":1}}],["不过",{"2":{"426":1}}],["不过还是有一点点区别的",{"2":{"339":1}}],["不过并发集合的可扩展性更高",{"2":{"240":1}}],["不过是英语看着比较吃力一点",{"2":{"230":1}}],["不过只是一个指向数组的引用",{"2":{"211":1}}],["不过又放弃了",{"2":{"106":1}}],["不妨让等待锁的线程不要被阻塞",{"2":{"202":1}}],["不难想象一个线程也执行同步代码块",{"2":{"201":1}}],["不为空",{"2":{"200":1,"371":1}}],["不管是立即更新服务列表",{"2":{"511":1}}],["不管是否出现异常",{"2":{"442":1}}],["不管",{"2":{"316":1}}],["不管new了多少个对象",{"2":{"200":1}}],["不管这个时候有没有守护线程运行",{"2":{"146":1}}],["不允许重复的值",{"2":{"359":1}}],["不允许其他线程打断它",{"2":{"179":1}}],["不允许中途离队",{"2":{"6":1}}],["不释放锁",{"2":{"164":1}}],["不剥夺条件",{"2":{"149":1,"225":1}}],["不可分割",{"2":{"619":1}}],["不可以存储重复元素",{"2":{"338":1,"357":1}}],["不可以被继承",{"2":{"121":1}}],["不可使用",{"2":{"291":1}}],["不可被中断的一个或一系列操作",{"2":{"270":1}}],["不可变的类也可以确保",{"2":{"380":1}}],["不可变对象保证了对象的内存可见性",{"2":{"217":1}}],["不可变对象的类即为不可变类",{"2":{"217":1}}],["不可变对象",{"2":{"217":1}}],["不可变",{"2":{"120":1}}],["不可达",{"2":{"20":1}}],["不可达的",{"2":{"20":1}}],["不变模式的主要作用在于当一个对象需要被多线程共享并频繁访问时",{"2":{"118":1}}],["不变性",{"2":{"118":1}}],["不是关系型数据库",{"2":{"570":1}}],["不是所有消息都无差别的发布到所有队列中",{"2":{"454":1}}],["不是所有的任务都可以分配给守护线程来执行",{"2":{"146":1}}],["不是说这6个节点就是一个redis",{"2":{"672":1}}],["不是说",{"2":{"234":1}}],["不是你想怎么排序就怎么排序",{"2":{"195":1}}],["不是的",{"2":{"182":1}}],["不是线程安全的",{"2":{"182":1,"355":1,"387":1}}],["不是",{"2":{"117":1}}],["不会删除",{"2":{"506":1}}],["不会导致cpu负载过高",{"2":{"490":1}}],["不会等待慢的消费者",{"2":{"451":1}}],["不会因为调用该接口影响主业务的效率",{"2":{"445":1}}],["不会存在获取hash值不同的情况",{"2":{"381":1}}],["不会被其他线程打断",{"2":{"270":1}}],["不会被清理掉",{"2":{"248":1}}],["不会出现",{"2":{"245":1}}],["不会抛出",{"2":{"243":1}}],["不会造成线程的阻塞",{"2":{"215":1}}],["不会造成死锁",{"2":{"207":1}}],["不会调用读操作",{"2":{"214":1}}],["不会发生互斥现象",{"2":{"200":1}}],["不会",{"2":{"192":1,"678":1}}],["不会停止线程",{"2":{"172":1}}],["不会返回结果",{"2":{"156":1}}],["不会堵塞在那里",{"2":{"106":1}}],["不会进行运算",{"2":{"51":1}}],["不单纯是new",{"2":{"106":1}}],["不只是java",{"2":{"99":1}}],["不用管理来存储1000个数据到redis中",{"2":{"602":1}}],["不用过多查看",{"2":{"503":1}}],["不用修改源程序代码",{"2":{"61":1}}],["不用考虑内存碎片",{"2":{"27":1}}],["不必去一步一步的实现",{"2":{"59":1}}],["不再处理等待队列中的任务",{"2":{"256":1}}],["不再被其他的类使用时",{"2":{"87":1}}],["不再被使用的对象",{"2":{"15":1}}],["不再执行下面的代码",{"2":{"57":1}}],["不再执行循环",{"2":{"57":1}}],["不使用任何修饰符",{"2":{"50":1}}],["不使用任何关键字",{"2":{"50":1}}],["不能立即执行",{"2":{"439":1}}],["不能在遍历过程中操作数据集合",{"2":{"349":1}}],["不能用于实时读的场景",{"2":{"243":1}}],["不能强行剥夺",{"2":{"225":1}}],["不能保证原子性",{"2":{"215":1}}],["不能调用其他非静态变量",{"2":{"77":1}}],["不能修饰抽象类",{"2":{"66":1}}],["不能修饰类",{"2":{"50":2}}],["不能",{"2":{"66":1,"205":1}}],["不能包罗万象",{"2":{"62":1}}],["不能从中间插入",{"2":{"6":1}}],["不正确",{"2":{"47":1}}],["不同service之间本身就不存在并发写问题",{"2":{"494":1}}],["不同参数代表不同含义",{"2":{"448":1}}],["不同的key随机生存时间",{"2":{"702":1}}],["不同的输入可能会散列成相同的输出",{"2":{"374":1}}],["不同的自定义同步器争用共享资源的方式也不同",{"2":{"230":1}}],["不同的平台有自己的虚拟机",{"2":{"36":1}}],["不同点",{"2":{"64":1,"364":1}}],["不同收集器之间的连线表示它们可以搭配使用",{"2":{"30":1}}],["不同虚拟机的运行时数据区可能略微有所不同",{"2":{"3":1}}],["队头出队",{"2":{"6":1}}],["队列设置routingkey时",{"2":{"457":1}}],["队列配置",{"2":{"448":1}}],["队列queue",{"2":{"448":2}}],["队列",{"2":{"447":1}}],["队列最大等待时间",{"2":{"435":1}}],["队列是一个虚拟的双向队列",{"2":{"230":1}}],["队列是先进先出",{"2":{"6":1}}],["队列是在队尾入队",{"2":{"6":1}}],["队列的删除称为出队",{"2":{"6":1}}],["队列的插入称为入队",{"2":{"6":1}}],["队列和栈都是被用来预存储数据的",{"2":{"6":1}}],["队列和栈是什么",{"0":{"6":1}}],["可扩展的序列化结构数据格式",{"2":{"470":1}}],["可扩展性和可维护性",{"2":{"400":1}}],["可有效的控制最大并发线程数",{"2":{"255":1}}],["可多条件队列的",{"2":{"220":1}}],["可中断的",{"2":{"220":1}}],["可轮询的",{"2":{"220":1}}],["可重入锁",{"2":{"208":1}}],["可运行状态",{"2":{"159":1}}],["可运行",{"2":{"159":1}}],["可见",{"2":{"300":1}}],["可见性",{"2":{"139":1}}],["可见的",{"2":{"5":1}}],["可变性",{"2":{"128":1,"129":1}}],["可能就会造成数据的丢失",{"2":{"624":1}}],["可能存在数字格式错误",{"2":{"330":1}}],["可能有一系列的方法调用",{"2":{"305":1}}],["可能抛出异常的代码",{"2":{"289":1}}],["可能导致",{"2":{"243":1}}],["可能本身是为了防止线程",{"2":{"234":1}}],["可能会丢失这1秒的数据",{"2":{"635":1,"641":1}}],["可能会进入阻塞或轮询状态",{"2":{"388":1}}],["可能会创建数量非常多的线程",{"2":{"262":1}}],["可能会造成线程的阻塞",{"2":{"215":1}}],["可能会遇到了许多应用程序崩溃的问题",{"2":{"42":1}}],["可能是因为其它的",{"2":{"695":1}}],["可能是旧数据",{"2":{"437":1}}],["可能是变异后被删除了等原因导致",{"2":{"308":1}}],["可能是当前线程",{"2":{"168":1}}],["可能是操作系统中时间消耗最大的操作",{"2":{"145":1}}],["可能出现正在给对象",{"2":{"10":1}}],["可用的内存大小缩小为原来的一半",{"2":{"27":1}}],["可达性分析算法",{"2":{"22":1}}],["可达的",{"2":{"20":1}}],["可以设置锁的有效期",{"2":{"709":1}}],["可以设置key的过期时间",{"2":{"678":1}}],["可以设计出低耦合的系统",{"2":{"59":1}}],["可以持久化到磁盘上",{"2":{"570":1}}],["可以发现每次提交都会产生一个版本号",{"2":{"539":1}}],["可以发现文件的状态已经发生变化",{"2":{"536":1}}],["可以发现很多代码甚至类库中都会有捕获异常",{"2":{"324":1}}],["可以任意切换",{"2":{"523":1}}],["可以查看nacos控制台",{"2":{"473":1}}],["可以参考jdk的配置方式",{"2":{"471":1}}],["可以参加表达式运算",{"2":{"115":1}}],["可以简单理解为",{"2":{"470":1}}],["可以简单地理解为通过",{"2":{"239":1}}],["可以匹配任意一个单词",{"2":{"457":1}}],["可以匹配任意多个单词",{"2":{"457":1}}],["可以是nodeid",{"2":{"428":1}}],["可以配置handlerinterceptor",{"2":{"421":1}}],["可以说web是构建在同源策略基础之上的",{"2":{"407":1}}],["可以写一个配置类",{"2":{"401":1}}],["可以存储基本数据类型和对象",{"2":{"391":1}}],["可以作为键",{"2":{"385":1}}],["可以由两个线程安全地访问一个vector对象",{"2":{"353":1}}],["可以双向遍历",{"2":{"348":1}}],["可以遍历链表",{"2":{"371":1}}],["可以遍历",{"2":{"348":1}}],["可以插入多个null元素",{"2":{"338":1,"357":1}}],["可以降低代码维护和学习新api成本",{"2":{"336":1}}],["可以方便地扩展或改写集合",{"2":{"336":1}}],["可以省略",{"2":{"309":1}}],["可以抛出多个异常",{"2":{"306":1}}],["可以调用",{"2":{"301":1}}],["可以根据下图来选择是捕获异常",{"2":{"294":1}}],["可以指定多个线程同时访问某个资源",{"2":{"276":1,"278":1}}],["可以传入一个",{"2":{"276":1}}],["可以保证任何时刻任何线程总能拿到该变量的最新值",{"2":{"271":1}}],["可以保证数据的一致性",{"2":{"118":1}}],["可以把rabbitmq想象为一个拍卖员",{"2":{"444":1}}],["可以把线程归属到某一个线程组中",{"2":{"260":1}}],["可以把程序的执行状态通过调试器保存到dump文件中",{"2":{"186":1}}],["可以创建自定义线程池",{"2":{"258":1}}],["可以用于结构化数据序列化",{"2":{"470":1}}],["可以用于什么应用场景",{"0":{"243":1}}],["可以用通配符",{"2":{"456":1}}],["可以用统一的异常类型向外暴露",{"2":{"297":1}}],["可以用n条绳子系住一个气球",{"2":{"67":1}}],["可以称为分段锁",{"2":{"239":1}}],["可以通过git提供的命令从远程仓库进行克隆",{"2":{"531":1}}],["可以通过启动两个idea窗口模拟两个开发人员来展示git的使用",{"2":{"522":1}}],["可以通过在yaml",{"2":{"495":1}}],["可以通过",{"2":{"306":1,"355":1,"541":1}}],["可以通过查看",{"2":{"239":1}}],["可以通过中断",{"2":{"177":1}}],["可以看出来基于distro模式的同步是异步进行的",{"2":{"492":1}}],["可以看出在执行同步代码块之前之后都有一个monitor字样",{"2":{"201":1}}],["可以看到nacos中大量这样的设计",{"2":{"505":1}}],["可以看到心跳信息被封装到了",{"2":{"503":1}}],["可以看到是5秒",{"2":{"498":1}}],["可以看到一个register方法",{"2":{"483":1}}],["可以看到方法中最终是调用namingservice的registerinstance方法实现注册的",{"2":{"479":1}}],["可以看到它实现了applicationlistener接口",{"2":{"478":1}}],["可以看到在初始化时",{"2":{"478":1}}],["可以看到这里配置了一个sentinelwebinterceptor的拦截器",{"2":{"421":1}}],["可以看到这些容器实现线程安全的方式就是将它们的状态封装起来",{"2":{"239":1}}],["可以看到",{"2":{"356":1,"418":1,"425":1,"437":1,"477":2,"504":1,"505":1}}],["可以看到我们上面的代码指定了",{"2":{"266":1}}],["可以看成是组合式",{"2":{"230":1}}],["可以在不同的范围",{"2":{"220":1}}],["可以在多个系统平台上运行",{"2":{"36":1}}],["可以让线程尝试获取锁",{"2":{"220":1}}],["可以让每一个连接专注于自己的",{"2":{"106":1}}],["可以使线程在等待锁的时候响应中断",{"2":{"220":1}}],["可以使锁更公平",{"2":{"220":1}}],["可以使用通配符",{"2":{"538":1}}],["可以使用任何类作为",{"2":{"380":1}}],["可以使用try",{"2":{"330":1}}],["可以使用阻塞队列来实现",{"2":{"251":1}}],["可以使用普通的一个集合",{"2":{"251":1}}],["可以使用版本号等机制",{"2":{"221":1}}],["可以使用同步阻塞i",{"2":{"106":1}}],["可以使用",{"2":{"76":1,"182":1,"342":1}}],["可以使用访问修饰符来保护对类",{"2":{"50":1}}],["可以具有完全不同的性质",{"2":{"220":1}}],["可以自由选择是否把读写long和double作为原子操作",{"2":{"213":1}}],["可以分成两步",{"2":{"213":1}}],["可以分为输入流和输出流",{"2":{"105":1}}],["可以有一个或多个键所对应的值为",{"2":{"385":1}}],["可以有各种各样的类变量",{"2":{"208":1}}],["可以有方法",{"2":{"208":1}}],["可以有效的使用可使用的内存",{"2":{"19":1}}],["可以被继承",{"2":{"208":1}}],["可以知道有没有成功获取锁",{"2":{"207":1}}],["可以给类",{"2":{"207":1}}],["可以禁止",{"2":{"200":1}}],["可以修饰类",{"2":{"199":1,"208":1,"215":1}}],["可以要在finaliztion里去调用c的释放函数",{"2":{"193":1}}],["可以覆盖此方法来实现对其资源的回收",{"2":{"193":1}}],["可以无限存放任务",{"2":{"181":1}}],["可以近乎认为是一个无穷大的队列",{"2":{"181":1}}],["可以对这个异步运算的任务的结果进行等待获取",{"2":{"157":1}}],["可以拿到异步执行任务的返回值",{"2":{"156":1}}],["可以返回值",{"2":{"156":1}}],["可以直接继续执行其他的代码",{"2":{"154":1}}],["可以重复调用",{"2":{"154":1}}],["可以获取异常信息",{"2":{"153":1}}],["可以获取到",{"2":{"150":1}}],["可以主动释放它占有的资源",{"2":{"150":1}}],["可以再加载这个任务的状态",{"2":{"145":1}}],["可以运行其它的线程而不是等待",{"2":{"141":1}}],["可以提高",{"2":{"141":1}}],["可以提高内存的使用率",{"2":{"116":1}}],["可以解决单节点的线程安全问题",{"2":{"706":1}}],["可以解决可见性问题",{"2":{"139":1}}],["可以解决原子性问题",{"2":{"139":1}}],["可以缓冲一些系统处理不了的连接或请求",{"2":{"106":1}}],["可以划分为字节流和字符流",{"2":{"105":1}}],["可以快速找到所需要的对象",{"2":{"95":1}}],["可以确保局部内部类使用的变量与外层的局部变量区分开",{"2":{"88":1}}],["可以将一个类的定义放在另外一个类的定义内部",{"2":{"80":1}}],["可以执行",{"2":{"72":1,"259":1,"541":1}}],["可以正确编译",{"2":{"48":1}}],["可以",{"2":{"20":1}}],["可以理解为指向指针的指针",{"2":{"11":1}}],["可操作的方式不同",{"2":{"6":1}}],["操作其他数据类型",{"0":{"611":1}}],["操作string",{"2":{"606":1}}],["操作集合的数量",{"2":{"584":1}}],["操作步骤如下",{"2":{"530":1}}],["操作前注入该工具类",{"2":{"448":1}}],["操作工具类",{"2":{"448":1}}],["操作中如果除数是2的幂次则等价于与其除数减一的与",{"2":{"384":1}}],["操作中包含三个操作数",{"2":{"221":1}}],["操作数组时类型不一致",{"2":{"312":1}}],["操作数栈",{"2":{"3":1,"5":1}}],["操作比较简单",{"2":{"274":1}}],["操作后",{"2":{"243":1}}],["操作成功",{"2":{"223":2}}],["操作发现内存中仍然是",{"2":{"223":1}}],["操作来实现的",{"2":{"222":1}}],["操作包含三个操作数",{"2":{"222":1}}],["操作就不是原子性的",{"2":{"212":1}}],["操作受到阻塞",{"2":{"161":1}}],["操作",{"2":{"106":1,"270":1,"384":1,"606":1,"695":1,"717":2}}],["操作准备好时",{"2":{"106":1}}],["操作系统会通知相应的线程进行后续的操作",{"2":{"106":1}}],["操作的zset集合",{"2":{"598":1}}],["操作的集合二",{"2":{"583":1}}],["操作的集合一",{"2":{"583":1}}],["操作的应该是对象头中",{"2":{"208":1}}],["操作的方法不同",{"2":{"6":1}}],["操作的名称不同",{"2":{"6":1}}],["有可能因为请求数过大",{"2":{"691":1}}],["有可能会产生相同的订单号",{"2":{"687":1}}],["有可能会产生",{"2":{"341":1}}],["有效时间是3秒",{"2":{"598":1}}],["有就返回值",{"2":{"580":1}}],["有就使用",{"2":{"69":1}}],["有这样一行代码",{"2":{"518":1}}],["有这样一段代码",{"2":{"437":1}}],["有非常重要的几个步骤",{"2":{"513":1}}],["有的接口快有的接口慢",{"2":{"451":1}}],["有的人会说",{"2":{"166":1}}],["有一段是与服务心跳有关的代码",{"2":{"480":1}}],["有一些消息需要不同消费者进行不同的处理",{"2":{"452":1}}],["有一次",{"2":{"442":1}}],["有一个垃圾回收线程",{"2":{"17":1}}],["有关时间窗的判断在retrytimeoutarrived",{"2":{"441":1}}],["有两个业务",{"2":{"415":1}}],["有两种调度模型",{"2":{"160":1}}],["有两种方式",{"2":{"9":1,"582":1}}],["有何区别",{"0":{"391":1}}],["有需要的可以看看",{"2":{"389":1}}],["有序集合",{"2":{"579":1}}],["有序列表",{"2":{"579":1}}],["有序",{"2":{"339":1}}],["有序性",{"2":{"139":1}}],["有点类似于我们之前说的linkedhashmap",{"2":{"339":1}}],["有异常也要做try",{"2":{"330":1}}],["有try块放到了事务代码中",{"2":{"330":1}}],["有如下代码片断",{"2":{"311":1}}],["有时我们会从",{"2":{"297":1}}],["有很多中不同实现",{"2":{"486":1}}],["有很多个自动配置类被加载了",{"2":{"477":1}}],["有很多种",{"2":{"335":1}}],["有很多不同的情况需要考虑",{"2":{"329":1}}],["有很多人称它是线程安全的",{"2":{"243":1}}],["有很多的优点",{"2":{"145":1}}],["有哪几种创建方式",{"0":{"254":1}}],["有哪几种实现方式",{"0":{"179":1}}],["有哪些不同的方式",{"0":{"349":1}}],["有哪些",{"0":{"312":1}}],["有哪些使用场景",{"0":{"245":1}}],["有哪些优缺点",{"0":{"243":1}}],["有哪些实现方式",{"0":{"221":1}}],["有哪些垃圾回收器",{"0":{"30":1}}],["有哪些垃圾回收算法",{"0":{"25":1},"1":{"26":1,"27":1,"28":1,"29":1}}],["有机会再次被",{"2":{"159":1}}],["有n个任务",{"2":{"140":1}}],["有",{"2":{"125":2,"391":1}}],["有没有",{"0":{"125":1}}],["有默认初始值",{"2":{"69":1}}],["有错吗",{"0":{"48":1}}],["有些程序员",{"2":{"99":1}}],["有些人提到在使用openjdk",{"2":{"42":1}}],["有些区域则是依赖线程的启动和结束而建立和销毁",{"2":{"3":1}}],["有些区域随着虚拟机进程的启动而存在",{"2":{"3":1}}],["有对象引用时计数器",{"2":{"22":1}}],["有用但不是必须的对象",{"2":{"21":2}}],["有什么特点",{"0":{"346":1}}],["有什么作用",{"0":{"276":1}}],["有什么好处",{"0":{"127":1}}],["有什么用",{"0":{"53":1}}],["有什么办法主动通知虚拟机进行垃圾回收",{"0":{"20":1}}],["有什么区别",{"0":{"6":1,"32":1,"106":1,"132":1,"153":1,"154":1,"164":1,"175":1,"207":1,"241":1,"274":1,"307":1,"348":1,"364":1,"385":1,"394":1}}],["静态同步方法",{"2":{"208":1}}],["静态块是",{"2":{"185":2}}],["静态块是被",{"2":{"185":1}}],["静态块是被哪个线程调用的",{"0":{"185":1}}],["静态编译",{"2":{"109":1}}],["静态编译和动态编译",{"2":{"109":1}}],["静态内部类的创建方式",{"2":{"82":1}}],["静态内部类可以访问外部类所有的静态变量",{"2":{"82":1}}],["静态内部类",{"0":{"82":1},"2":{"82":1}}],["静态方法和",{"2":{"200":1}}],["静态方法和实例方法的区别主要体现在两个方面",{"2":{"76":1}}],["静态方法和实例方法有何不同",{"0":{"76":1}}],["静态方法在访问本类的成员时",{"2":{"76":1}}],["静态只能访问静态",{"2":{"56":1}}],["静态导包",{"2":{"56":1}}],["静态代码块",{"2":{"56":1}}],["静态的对象还是放在堆",{"2":{"5":1}}],["静态变量被所有的对象所共享",{"2":{"75":1}}],["静态变量和非静态变量的区别是",{"2":{"75":1}}],["静态变量和实例变量区别",{"0":{"74":1}}],["静态变量与普通变量区别",{"0":{"75":1}}],["静态变量由于不属于任何实例对象",{"2":{"74":1}}],["静态变量放在方法区",{"2":{"5":1}}],["静态变量",{"2":{"3":1,"74":1}}],["pipelinetest",{"2":{"613":1}}],["pipelined",{"2":{"602":1}}],["pipeline",{"2":{"602":3}}],["pid号",{"2":{"147":1}}],["pid",{"2":{"147":1,"186":1}}],["pttl",{"2":{"585":1}}],["pexpire",{"2":{"585":1}}],["percentage",{"2":{"635":1,"641":1,"644":1}}],["persist",{"2":{"585":1}}],["persistentinstances",{"2":{"491":2}}],["persistentconsistencyservice",{"2":{"486":2}}],["person",{"2":{"581":10,"596":3,"598":4}}],["perform",{"2":{"502":1}}],["performchecking",{"2":{"440":2}}],["permit",{"2":{"423":1}}],["php",{"2":{"611":1}}],["phone存的值是11位",{"2":{"580":1}}],["phone",{"2":{"580":2}}],["phantomreference",{"2":{"21":1}}],["pw",{"2":{"560":1}}],["plain",{"2":{"495":1,"507":1}}],["placed",{"2":{"372":1}}],["p>this",{"2":{"484":1}}],["pjp",{"2":{"418":7}}],["packet",{"2":{"514":4}}],["pair",{"2":{"489":1,"490":7}}],["password=123",{"2":{"560":1}}],["password",{"2":{"448":1,"563":1,"596":3,"597":2,"605":1,"617":1}}],["passqps",{"2":{"438":3}}],["passlocalcheck",{"2":{"435":2}}],["passcheck",{"2":{"430":3}}],["pass",{"2":{"410":1,"438":8,"439":1,"660":2}}],["pass配置",{"2":{"410":1}}],["pay",{"2":{"409":3}}],["path=",{"2":{"409":5}}],["pathvariable",{"2":{"405":2}}],["parseversion",{"2":{"517":1}}],["parseboolean",{"2":{"517":2}}],["parseint",{"2":{"502":1,"514":1,"517":1}}],["parseinstance",{"2":{"483":1}}],["parser",{"2":{"483":1,"502":1,"517":1}}],["parseorigin",{"2":{"422":1}}],["parselong",{"2":{"324":1}}],["param",{"2":{"484":8,"517":1,"692":1,"696":1}}],["params",{"2":{"480":13,"500":7,"512":8}}],["paramflowrulemanager",{"2":{"432":1}}],["paramflowslot就是热点参数限流",{"2":{"432":1}}],["paramflowslot",{"0":{"432":1},"1":{"433":1},"2":{"414":1,"429":1}}],["parallel",{"2":{"30":5,"32":2,"660":2}}],["parties",{"2":{"278":1}}],["parnew",{"2":{"32":1}}],["parnew收集器",{"2":{"30":1}}],["powershellprotoc",{"2":{"472":1}}],["pos",{"2":{"430":2,"503":1}}],["postmapping",{"2":{"483":1}}],["post",{"2":{"409":1,"410":1,"475":1,"480":1}}],["pointcut",{"2":{"418":1}}],["ports",{"2":{"563":3,"573":1,"615":1,"655":3,"660":3,"670":6}}],["port等信息",{"2":{"502":1}}],["port",{"2":{"410":1,"448":1,"474":1,"475":1,"478":1,"480":2,"500":1,"502":5,"503":3,"505":2,"596":3,"597":2,"605":1,"617":1,"671":3}}],["policy",{"2":{"407":1,"680":1}}],["poll",{"0":{"364":1},"2":{"364":2,"505":1}}],["pool2",{"2":{"597":1,"598":1}}],["poolconfig",{"2":{"596":3,"597":2}}],["pool",{"2":{"152":5,"159":1,"266":23,"605":1,"617":1}}],["pull命令后加入参数",{"2":{"544":1}}],["pull",{"0":{"544":1},"2":{"525":2,"540":3,"544":2}}],["push命令将本地文件推送至码云远程仓库时",{"2":{"543":1}}],["pushdatasource",{"2":{"517":1,"518":1}}],["pushservice类本身实现了applicationlistener接口",{"2":{"518":1}}],["pushservice",{"2":{"517":3}}],["pushpacket",{"2":{"514":6}}],["push",{"0":{"543":1},"2":{"514":3,"517":2,"525":2,"540":3,"543":1,"545":1,"549":1}}],["pushreceiver构造函数中基于线程池来运行任务",{"2":{"514":1}}],["pushreceiver",{"0":{"514":1},"2":{"511":1,"514":1}}],["publishevent",{"2":{"478":2,"504":1,"515":2}}],["publisher",{"2":{"447":1}}],["publish",{"0":{"452":1},"1":{"453":1}}],["public",{"2":{"50":1,"57":2,"82":1,"83":1,"84":2,"85":1,"89":2,"94":1,"99":4,"112":3,"148":1,"152":12,"200":1,"201":1,"214":1,"245":2,"266":6,"299":2,"318":1,"330":2,"360":2,"401":3,"404":2,"405":1,"418":3,"422":1,"425":1,"426":1,"427":1,"428":1,"429":2,"430":1,"431":1,"432":1,"435":1,"437":2,"438":4,"439":1,"440":1,"441":2,"442":1,"448":5,"449":2,"453":1,"455":1,"457":1,"479":1,"480":1,"483":1,"484":3,"486":1,"489":1,"490":1,"491":1,"496":1,"499":1,"502":1,"503":1,"504":1,"505":4,"510":1,"514":2,"517":1,"595":1,"596":2,"597":3,"598":6,"600":1,"601":1,"602":2,"606":1,"608":1,"609":3,"610":1,"611":4,"612":1,"613":2,"622":2,"704":4,"708":1,"713":1}}],["putservice",{"2":{"505":1}}],["putserviceandinit",{"2":{"505":2}}],["putall",{"2":{"423":1,"427":1,"428":1,"611":1}}],["putmapping",{"2":{"405":1,"502":1}}],["put请求方法\\t",{"2":{"405":1}}],["puttreeval",{"2":{"371":1}}],["puttreeval返回待存放的node",{"2":{"371":1}}],["put和相关方法",{"2":{"371":1}}],["putval",{"2":{"371":2}}],["putval方法执行流程图",{"2":{"371":1}}],["put",{"2":{"241":1,"360":1,"371":1,"385":1,"388":2,"409":1,"410":1,"423":1,"427":1,"428":1,"480":11,"484":2,"485":3,"486":3,"487":1,"489":2,"491":4,"495":1,"498":1,"500":7,"502":5,"505":2,"511":2,"512":6,"515":2,"517":12,"598":3,"611":2}}],["png",{"2":{"201":1,"688":1}}],["p",{"2":{"147":2,"371":11,"560":4,"573":1,"575":2,"674":2}}],["pc",{"2":{"144":1}}],["preamble",{"2":{"635":1,"641":1,"647":1}}],["prefix",{"2":{"487":1}}],["prefetch",{"2":{"451":1}}],["prehandle",{"2":{"422":1}}],["predicates",{"2":{"409":5}}],["pred",{"2":{"389":2}}],["preservedmetadatakeys",{"2":{"502":1}}],["preserve",{"2":{"372":1}}],["present是一个至始至终都相同的虚值",{"2":{"360":1}}],["present",{"2":{"360":2}}],["prioritywaitexception",{"2":{"438":2}}],["priorityblockingqueue",{"2":{"251":1,"363":1}}],["prioritized",{"2":{"425":4,"426":2,"427":2,"428":2,"429":2,"430":2,"431":2,"432":3,"435":11,"438":2,"439":1,"440":2}}],["primitive",{"2":{"117":1}}],["pring",{"2":{"400":1}}],["printstacktrace",{"2":{"148":2,"150":1,"152":2,"266":1,"283":1,"300":1,"708":1}}],["print",{"2":{"89":2}}],["println",{"2":{"57":2,"82":1,"83":2,"84":6,"85":1,"88":1,"89":3,"94":4,"99":10,"112":3,"120":3,"123":7,"124":2,"133":5,"148":6,"150":3,"152":9,"183":2,"201":1,"245":1,"266":3,"296":1,"300":4,"310":2,"311":5,"342":1,"346":1,"355":1,"364":3,"449":1,"595":2,"596":1,"597":1,"598":11,"600":1,"601":1,"602":2,"606":2,"609":2,"611":6,"612":1,"613":1,"617":1,"675":1,"692":2,"694":2,"696":3,"704":2,"708":2,"713":2}}],["principle",{"2":{"62":5}}],["private",{"2":{"50":1,"60":1,"82":1,"83":2,"84":4,"85":1,"89":2,"112":1,"119":1,"128":1,"129":1,"148":2,"200":2,"214":2,"245":2,"266":6,"271":3,"330":1,"360":1,"435":7,"437":1,"490":1,"597":5,"692":1,"696":1,"704":1}}],["projectlombok",{"2":{"595":1}}],["protoc",{"2":{"472":1}}],["protocolbuffers",{"2":{"471":1}}],["protocol",{"2":{"470":1}}],["proto",{"2":{"472":4}}],["protobuf",{"2":{"471":1}}],["protobuf的github地址",{"2":{"471":1}}],["protobuf的之所以可以跨语言",{"2":{"470":1}}],["protobuf的全称是protocol",{"2":{"470":1}}],["proto格式",{"2":{"470":1}}],["proto编译",{"0":{"469":1},"1":{"470":1,"471":1,"472":1}}],["protected",{"2":{"50":1,"112":1,"230":3,"245":1,"437":3,"589":2}}],["proceed",{"2":{"418":1}}],["proceedingjoinpoint",{"2":{"418":1}}],["processservicejson",{"2":{"511":1,"514":1,"515":1}}],["processtask",{"2":{"505":2}}],["processtasks",{"2":{"492":1}}],["processing",{"2":{"503":1,"504":1,"505":1}}],["processclientbeat",{"2":{"502":1,"503":2}}],["processcommand",{"2":{"266":2}}],["processor",{"2":{"492":4}}],["processorslotentrycallback",{"2":{"429":1}}],["processorslot",{"2":{"425":1}}],["processorslotchain执行流程",{"0":{"424":1},"1":{"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1}}],["processorslotchain",{"0":{"414":1}}],["process",{"2":{"144":2,"484":1,"491":1,"492":1,"505":3}}],["proxy",{"2":{"410":1}}],["proper",{"2":{"356":1}}],["properties",{"2":{"111":1}}],["program",{"2":{"3":1}}],["pranew",{"2":{"30":1}}],["ps",{"2":{"5":1,"560":2,"564":1,"662":1}}],["栈溢出错误",{"2":{"284":1}}],["栈上的引用访问堆中的具体对象",{"2":{"11":1}}],["栈的删除称为出栈",{"2":{"6":1}}],["栈的插入称为进栈",{"2":{"6":1}}],["栈只对于线程是可见的",{"2":{"5":1}}],["栈存放",{"2":{"5":1}}],["栈是连续的",{"2":{"5":1}}],["栈使用的是数据结构中的栈",{"2":{"5":1}}],["即不可变性",{"2":{"381":1}}],["即不修改程序代码就可以改变程序运行时所绑定的具体代码",{"2":{"61":1}}],["即2的四次方16",{"2":{"376":1}}],["即table",{"2":{"371":1}}],["即key不相等",{"2":{"371":1}}],["即数组和链表的结合体",{"2":{"366":1}}],["即数值型或布尔型",{"2":{"99":1}}],["即dry原则",{"2":{"330":1}}],["即编译时该类存在",{"2":{"308":1}}],["即使服务器宕机重启也能保证消息可靠性",{"2":{"445":1}}],["即使被调用方法返回空集合或者空对象",{"2":{"330":1}}],["即使代码编译期是正确的",{"2":{"330":1}}],["即使一些有经验的开发者也需要花费很多时间来思考如何处理异常",{"2":{"314":1}}],["即使",{"2":{"300":1}}],["即使我们没有try",{"2":{"288":1}}],["即使这两个对象指向相同的数据",{"2":{"95":1,"360":1}}],["即使这样",{"2":{"15":1}}],["即当多个线程同时对该变量的值进行更新时",{"2":{"271":1}}],["即当某个线程进入方法",{"2":{"270":1}}],["即当前线程获取该锁再次获取不会被阻塞",{"2":{"232":1}}],["即可实现服务注册",{"2":{"475":1}}],["即可",{"2":{"263":1}}],["即state=0",{"2":{"230":1}}],["即释放锁",{"2":{"230":1}}],["即将暂时获取不到锁的线程加入到队列中",{"2":{"230":1}}],["即我们所说的比较交换",{"2":{"222":1}}],["即对象一旦被创建它的状态",{"2":{"217":1}}],["即写操作会发生在后续的读操作之前",{"2":{"212":1}}],["即队列",{"2":{"177":1}}],["即队列的修改是依先进先出的原则进行的",{"2":{"6":1}}],["即在没有完成相关操作之前",{"2":{"179":1}}],["即在一个程序中可以同时运行多个不同的线程来执行不同的任务",{"2":{"141":1}}],["即在机器和编译程序之间加入了一层抽象的虚拟机器",{"2":{"38":1}}],["即一个团队共同开发一个项目",{"2":{"523":1}}],["即一个资源只能被一个线程",{"2":{"149":1}}],["即一个不可再被分割的颗粒",{"2":{"139":1}}],["即一个引用变量倒底会指向哪个类的实例对象",{"2":{"61":1}}],["即",{"2":{"94":2,"221":1}}],["即重载的方法不能根据返回类型进行区分",{"2":{"92":1}}],["即静态成员变量和静态方法",{"2":{"76":1}}],["即子类可以对父类进行扩展",{"2":{"60":1}}],["即便没有创建对象",{"2":{"56":1}}],["即缺省",{"2":{"50":1}}],["即虚拟指令",{"2":{"38":1}}],["即扩展为",{"2":{"38":2}}],["即每个线程在",{"2":{"10":1}}],["即每次删除",{"2":{"6":1}}],["即所有用过的内存放在一边",{"2":{"9":1}}],["即最后插入",{"2":{"6":1}}],["即两边都可操作",{"2":{"6":1}}],["即新生代使用复制算法",{"2":{"5":1}}],["即时编译后的代码等数据",{"2":{"3":1}}],["分数2",{"2":{"584":1}}],["分数1",{"2":{"584":1}}],["分组下就是服务",{"2":{"494":1}}],["分组下的某一个服务",{"2":{"474":1}}],["分组名",{"2":{"475":1,"495":1,"507":1}}],["分布式id",{"0":{"687":1}}],["分布式锁",{"0":{"686":1,"707":1},"1":{"708":1,"709":1,"710":1},"2":{"686":1,"713":1}}],["分布式系统下",{"2":{"649":1}}],["分布式session",{"0":{"568":1,"683":1},"2":{"683":1}}],["分布式消息框架",{"0":{"443":1},"1":{"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1}}],["分布式流量控制框架",{"0":{"411":1},"1":{"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1}}],["分两种纬度的统计",{"2":{"437":1}}],["分为两类",{"2":{"434":2}}],["分割",{"2":{"430":1,"457":1}}],["分割字符串",{"2":{"126":1}}],["分段的数组+链表",{"2":{"388":1}}],["分段锁",{"2":{"237":1,"388":1}}],["分别指向直接后继和直接前驱",{"2":{"352":1}}],["分别是",{"2":{"251":1,"585":1}}],["分别执行各自的任务",{"2":{"160":1}}],["分配给这个请求",{"2":{"182":1}}],["分配",{"2":{"162":1}}],["分配内存空间",{"2":{"200":1}}],["分配内存",{"2":{"10":1}}],["分配内存时将位于中间的指针指示器向空闲的内存移动一段与对象大小相等的距离",{"2":{"9":1}}],["分时调度模型是指让所有的线程轮流获得",{"2":{"160":1}}],["分时调度模型和抢占式调度模型",{"2":{"160":1}}],["分类",{"2":{"45":1,"50":1}}],["分区交换",{"2":{"33":1}}],["分区",{"2":{"33":1}}],["分代回收器有两个分区",{"2":{"33":1}}],["分代收集算法",{"0":{"29":1},"2":{"29":1}}],["分代算法",{"2":{"25":1}}],["分代",{"2":{"5":1}}],["分支合并时需注意合并的方向",{"2":{"550":1}}],["分支命令",{"2":{"549":1,"550":1}}],["分支是git",{"2":{"545":1}}],["分支操作",{"0":{"545":1},"1":{"546":1,"547":1,"548":1,"549":1,"550":1}}],["分支名称",{"2":{"543":1,"544":1,"547":1,"548":1}}],["分支",{"2":{"3":1}}],["在后台开启一个子线程",{"2":{"712":1}}],["在删除锁时",{"2":{"709":1}}],["在单位时间内",{"2":{"699":1}}],["在单线程环境下不能改变程序运行的结果",{"2":{"195":1}}],["在查询数据库后",{"2":{"694":1}}],["在并发的情况下",{"2":{"687":1}}],["在并发情况下也是不安全的",{"2":{"10":1}}],["在取样基数中去选择一个要删除的key",{"2":{"680":1}}],["在向redis中插入数据时",{"2":{"678":1}}],["在向集群中set数据时",{"2":{"668":1}}],["在连接集群时",{"2":{"668":1}}],["在docker",{"0":{"660":1},"2":{"671":1}}],["在distroconsistencyserviceimpl的put方法中分为两步",{"2":{"492":1}}],["在从节点上测试读写",{"2":{"656":1}}],["在主节点上测试读写",{"2":{"656":1}}],["在分布式环境下",{"2":{"649":1}}],["在加载aof文件时",{"2":{"635":1,"641":1}}],["在重新启动redis服务器时",{"2":{"633":1}}],["在提交事务时才会执行",{"2":{"622":1}}],["在redis内存不足时",{"2":{"677":1}}],["在redis4",{"2":{"646":1}}],["在redis开启事务时",{"2":{"620":1}}],["在redis事务中",{"2":{"620":1}}],["在该方法中会对操作key和value进行序列化操作",{"2":{"608":1}}],["在该类被第一次加载的时候",{"2":{"56":1}}],["在存储数据时会对key和value进行序列化操作",{"2":{"606":1}}],["在springboot中操作redis的模板对象",{"2":{"603":1}}],["在swap方法中",{"2":{"99":1}}],["在基于tar",{"2":{"587":1}}],["在不知道当前集合中最大值和最小值的情况下",{"2":{"584":1}}],["在不可预知的情况下对内存堆中已经死亡的或很长时间没有用过的对象进行清除和回收",{"2":{"19":1}}],["在读取时是正向的",{"2":{"582":1}}],["在读取时是反向的",{"2":{"582":1}}],["在读数据",{"2":{"234":1}}],["在读数据造成的数据不一致",{"2":{"234":1}}],["在操作list时",{"2":{"582":1}}],["在操作的时候",{"2":{"213":1}}],["在原先的基础之上进行字符串追加",{"2":{"580":1}}],["在master分支执行操作",{"2":{"550":1}}],["在命令行中会显示出当前所在分支",{"2":{"548":1}}],["在任意目录下创建一个空目录",{"2":{"530":1}}],["在任意时刻只能执行一条机器指令",{"2":{"160":1}}],["在本地初始化git仓库",{"0":{"530":1},"2":{"529":1}}],["在本类内调用本类的其它构造方法",{"2":{"55":1}}],["在git",{"2":{"528":1}}],["在git中存在远程仓库",{"2":{"523":1}}],["在gc的时候也要考虑到不连续的分配",{"2":{"5":1}}],["在idea开发工具中可以集成git",{"2":{"522":1}}],["在软件开发过程中被广泛使用",{"2":{"522":1}}],["在上锁时",{"2":{"709":1}}],["在上一节中",{"2":{"518":1}}],["在上面结构的基础上",{"2":{"339":1}}],["在hostreactor类的构造函数中",{"2":{"513":1}}],["在healthcheckprocessor接口中",{"2":{"505":1}}],["在updatetask中",{"2":{"511":1}}],["在它的构造函数中会把自己放入线程池中去执行",{"2":{"505":1}}],["在它的赋值完成之前",{"2":{"214":1}}],["在服务注册时",{"2":{"504":1}}],["在确认心跳请求对应的服务",{"2":{"502":1}}],["在更新实例列表时",{"2":{"494":1}}],["在注册实例时",{"2":{"494":1}}],["在完成本地服务列表更新后",{"2":{"486":1}}],["在第45行的代码中",{"2":{"491":1}}],["在第3步中",{"2":{"484":1}}],["在第1步的addipaddress中",{"2":{"484":1}}],["在第一次访问的时候",{"2":{"203":1}}],["在nacos",{"2":{"482":1,"502":1}}],["在nacosserviceregistryautoconfiguration这个类中",{"2":{"477":1}}],["在监听到webserverinitializedevent",{"2":{"478":1}}],["在监视器",{"0":{"180":1}}],["在弹出窗口中",{"2":{"468":1}}],["在开发过程中",{"2":{"452":1}}],["在开发中首先尽可能使用",{"2":{"327":1}}],["在资源entry销毁时",{"2":{"441":1}}],["在范围内",{"2":{"438":1}}],["在2",{"2":{"438":1,"496":1,"510":1,"517":1}}],["在之前学习sentinel的时候",{"2":{"418":1}}],["在此处进行相应的处理操作",{"2":{"416":1}}],["在控制器上增加注解",{"2":{"408":1}}],["在发起ajax请求时",{"2":{"407":1}}],["在发生内存溢出之前会被回收",{"2":{"21":1}}],["在其内部的apply方法重写即可写入自己想要做的操作",{"2":{"401":1}}],["在openfeign中有requestinterceptor这样一个接口",{"2":{"401":1}}],["在排序时如何比较元素",{"0":{"395":1}}],["在保证数组长度为2的幂次方的时候",{"2":{"383":1}}],["在保护模式下不会对其他进程产生影响",{"2":{"144":1}}],["在未来不会改变",{"2":{"380":1}}],["在解决哈希冲突时有了较大的变化",{"2":{"385":1}}],["在解决这个问题之前",{"2":{"373":1}}],["在解析字符串形式的数字时",{"2":{"330":1}}],["在10",{"2":{"701":1}}],["在1",{"2":{"372":1,"377":1}}],["在putval",{"2":{"372":1}}],["在红黑树中执行插入操作",{"2":{"371":1}}],["在尾部插入新结点",{"2":{"371":1}}],["在链表最末插入结点",{"2":{"371":1}}],["在进一步判断key是否相同",{"2":{"366":1}}],["在进行检索或移除一个元素的时候",{"2":{"363":1}}],["在性能方面要优于",{"2":{"353":1}}],["在需要频繁读取集合中的元素时",{"2":{"352":1}}],["在非首尾的增加和删除操作",{"2":{"352":1}}],["在随机访问的时候效率要高",{"2":{"352":1}}],["在顺序添加一个元素的时候非常方便",{"2":{"350":1}}],["在集合外部维护一个计数器",{"2":{"349":1}}],["在当前遍历的集合元素被更改的时候",{"2":{"346":1}}],["在遍历过程中",{"2":{"341":1}}],["在某个时候线程2修改了集合a的结构",{"2":{"341":1}}],["在某个范围内其值可以发生改变的量",{"2":{"69":1}}],["在web应用中",{"2":{"340":1}}],["在面向对象编程语言中",{"2":{"333":1}}],["在面向对象编程中",{"2":{"254":1}}],["在以后需要修改时",{"2":{"330":1}}],["在频繁调用出错的情况下",{"2":{"330":1}}],["在可恢复的异常情况下使用异常",{"2":{"328":1}}],["在可创建线程的数量上存在一个限制",{"2":{"188":1}}],["在你这样做时",{"2":{"325":1}}],["在抛出异常时",{"2":{"320":1}}],["在哪",{"2":{"281":1}}],["在有效使用异常的情况下",{"2":{"281":1}}],["在默认情况下",{"2":{"265":1}}],["在队列为空时",{"2":{"251":1}}],["在垃圾回收的时候",{"2":{"248":1}}],["在垃圾回收器执行时会调用被回收对象的finalize",{"2":{"193":1}}],["在每次同步执行时都要锁住整个结构",{"2":{"388":1}}],["在每个线程中都创建了一个",{"2":{"245":1}}],["在每秒几十上百次的切换中",{"2":{"145":1}}],["在高性能的互联网应用中",{"2":{"243":1}}],["在copyonwritearraylist",{"2":{"243":1}}],["在这段代码中",{"2":{"425":1}}],["在这里声明了一个bean",{"2":{"418":1}}],["在这里你拥有数据也拥有解决问题的方法",{"2":{"59":1}}],["在这个同步点两个线程能够交换数据",{"2":{"277":1}}],["在这种情况下",{"2":{"245":1,"246":1}}],["在这种迭代方式中",{"2":{"241":1}}],["在这种锁机制下",{"2":{"239":1}}],["在写数据",{"2":{"234":1}}],["在线程获取锁的时候",{"2":{"232":1}}],["在末使用完之前",{"2":{"225":1}}],["在大部分情况下",{"2":{"220":1}}],["在实现jvm时",{"2":{"213":1}}],["在锁对象的对象头里面有一个",{"2":{"203":1}}],["在项目中用到了吗",{"0":{"200":1}}],["在执行rdb时",{"2":{"627":1,"629":1}}],["在执行rdb机制时是否使用lzf方式对dump",{"2":{"627":1,"629":1}}],["在执行完代码块之后",{"2":{"201":1}}],["在执行程序时",{"2":{"195":1}}],["在执行过程中",{"2":{"148":1,"226":1}}],["在下一个垃圾回调周期中",{"2":{"192":1}}],["在下一次gc时会被回收",{"2":{"21":1}}],["在各单个线程访问时的排它性",{"2":{"179":1}}],["在两个线程间共享变量即可实现共享",{"2":{"176":1}}],["在支持时间片的系统中",{"2":{"161":1}}],["在运行期间可能出现的异常",{"2":{"286":1,"304":1}}],["在运行池中",{"2":{"160":1}}],["在运行时谈不上多态",{"2":{"61":1}}],["在守护线程中产生的新线程也是守护线程",{"2":{"146":1}}],["在引入了线程的操作系统中",{"2":{"144":1}}],["在特殊的业务场景下",{"2":{"137":1}}],["在abstractstringbuilder中也是使用字符数组保存字符串",{"2":{"128":1,"129":1}}],["在使用bgsave持久化数据时",{"2":{"631":1}}],["在使用bgsave命令时",{"2":{"631":1}}],["在使用save命令时",{"2":{"631":1}}],["在使用git",{"2":{"543":1}}],["在使用一个体系的原则",{"2":{"335":1}}],["在使用线程池的情况下",{"2":{"249":1}}],["在使用的过程中并没有看到显示的加锁和解锁过程",{"2":{"201":1}}],["在使用",{"0":{"127":1}}],["在使用变量时需要遵循的原则为",{"2":{"69":1}}],["在创建字符串时",{"2":{"116":1}}],["在创建对象的时候被初始化",{"2":{"75":1}}],["在我们平时的项目开发过程中",{"2":{"111":1}}],["在编译时确定类型",{"2":{"109":1}}],["在网络操作中",{"2":{"106":1}}],["在活动连接数不是特别高",{"2":{"106":1}}],["在对应方法内",{"2":{"84":1}}],["在对象被移动",{"2":{"12":1}}],["在一个新窗口去监控appendonly",{"2":{"643":1}}],["在一个实现了某个集合框架中的接口的对象身上完成某种有用的计算的方法",{"2":{"333":1}}],["在一个方法中如果发生异常",{"2":{"305":1}}],["在一个",{"2":{"298":1}}],["在一个静态方法内调用一个非静态成员为什么是非法的",{"0":{"77":1}}],["在一定程度上解决了传统解释型语言执行效率低的问题",{"2":{"38":1}}],["在外部调用静态方法时",{"2":{"76":1}}],["在类的加载过程中",{"2":{"74":1}}],["在类初次被加载的时候",{"2":{"56":1}}],["在调用rpc",{"2":{"330":1}}],["在调用",{"2":{"248":1}}],["在调用子类构造方法之前会先调用父类没有参数的构造方法",{"0":{"71":1}}],["在调用这些方法时就会调用子类的方法",{"2":{"61":1}}],["在方法被调用",{"2":{"69":1}}],["在程序上作出分门别类的判断",{"2":{"330":1}}],["在程序执行到这一步的时候",{"2":{"310":1}}],["在程序执行的过程中",{"2":{"69":1}}],["在程序中",{"2":{"287":1}}],["在程序中可以选择捕获处理",{"2":{"286":1}}],["在程序中易产生二义性之处",{"2":{"55":1}}],["在接口和抽象类的选择上",{"2":{"64":1}}],["在多线程应用中",{"2":{"179":1}}],["在多线程程序中",{"2":{"141":1}}],["在多态中需要将子类的引用赋给父类对象",{"2":{"61":1}}],["在多态中必须存在有继承关系的子类和父类",{"2":{"61":1}}],["在多核cpu环境下有着比serial更好的表现",{"2":{"30":1}}],["在子类中调用父类的构造方法",{"2":{"55":1}}],["在处理异常的时候",{"2":{"54":1,"307":1}}],["在同一时间秒杀",{"2":{"701":1}}],["在同一包内可见",{"2":{"50":1}}],["在同一类内可见",{"2":{"50":1}}],["在目前所有的版本中都是不可以的",{"2":{"46":1}}],["在",{"0":{"139":1,"183":1,"258":1,"270":1,"274":1,"315":1,"364":1},"1":{"316":1,"317":1},"2":{"46":1,"57":1,"106":1,"166":1,"180":1,"186":2,"199":2,"203":1,"221":1,"222":1,"238":1,"240":1,"254":1,"270":2,"290":1,"310":3,"314":1,"319":1,"349":1,"385":1}}],["在内存不足时",{"2":{"678":1,"680":9}}],["在内存中数据以二进制的方式写入新的aof文件中",{"2":{"647":1}}],["在内存中可见",{"2":{"271":1}}],["在内存中只有一个副本",{"2":{"75":1}}],["在内存中",{"2":{"74":1}}],["在内存中分配了不同大小的内存空间",{"2":{"45":1}}],["在内存回收后容易产生大量内存碎片",{"2":{"28":1}}],["在响应性和jvm性能方面",{"2":{"42":1}}],["在启动类上添加注解",{"2":{"404":1}}],["在启动",{"2":{"31":1}}],["在标记可回收的对象后将所有存活的对象压缩到内存的一端",{"2":{"28":1}}],["在新生代中可以使用复制算法",{"2":{"28":1}}],["在正常情况下是不会执行的",{"2":{"17":1}}],["在jdk",{"2":{"377":1}}],["在jdk1",{"2":{"372":1,"388":1,"389":2}}],["在jvm层面",{"2":{"207":1}}],["在jvm中",{"2":{"17":1}}],["在java编程语言中",{"2":{"366":1}}],["在java应用中",{"2":{"290":1}}],["在java应用程序中",{"2":{"39":1}}],["在java关键字synchronized隐式支持重入性",{"2":{"232":1}}],["在java",{"2":{"106":1}}],["在java中有以下3种方法可以终止正在运行的线程",{"2":{"171":1}}],["在java中有两种形式可以实现多态",{"2":{"60":1}}],["在java中定义一个不做事且没有参数的构造方法的作用",{"0":{"70":1}}],["在java中",{"0":{"23":1},"2":{"17":1,"38":1,"80":1,"227":1,"367":1,"376":1}}],["在计算机中开辟一块新的内存地址用于存放复制的对象",{"2":{"4":1}}],["物理地址分配是连续的",{"2":{"5":1}}],["物理地址",{"2":{"5":1}}],["4小节中",{"2":{"510":1}}],["456",{"2":{"351":2}}],["404",{"2":{"475":1,"495":1,"507":1}}],["403",{"2":{"475":1,"495":1,"507":1}}],["400",{"2":{"475":1,"495":1,"507":1}}],["40",{"2":{"310":3}}],["4999l",{"2":{"417":1}}],["49",{"2":{"266":10}}],["44",{"2":{"266":5,"324":1}}],["42",{"2":{"94":2}}],["4f",{"2":{"47":1}}],["4",{"0":{"5":1,"11":1,"12":1,"13":1,"20":1,"29":1,"39":1,"47":1,"48":1,"51":1,"56":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":2,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"85":1,"87":1,"112":1,"118":1,"140":1,"146":1,"155":1,"158":1,"159":1,"160":1,"161":1,"162":2,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"202":1,"213":1,"223":1,"233":1,"234":1,"240":1,"247":1,"248":1,"249":1,"257":1,"265":1,"268":1,"288":1,"294":1,"299":1,"306":1,"320":1,"336":1,"348":1,"372":1,"377":1,"394":1,"410":1,"419":1,"420":1,"421":1,"422":1,"423":1,"428":1,"454":1,"462":1,"469":1,"470":1,"471":1,"472":1,"480":1,"493":1,"494":1,"500":1,"505":1,"533":1,"538":1,"543":1,"549":1,"582":1,"592":1,"597":1,"607":1,"608":1,"609":1,"610":1,"622":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":2,"639":1,"640":1,"641":1,"642":1,"643":2,"644":1,"667":1,"668":1,"669":1,"670":1,"671":1,"672":1,"673":2,"674":1,"675":1,"680":1,"685":1},"1":{"12":1,"13":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"234":1,"248":1,"249":1,"420":1,"421":1,"422":2,"423":2,"455":1,"470":1,"471":1,"472":1,"608":1,"609":1,"610":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":2,"641":2,"642":2,"643":2,"644":2,"668":1,"669":1,"670":2,"671":2,"672":2,"673":2,"674":2,"675":1},"2":{"47":2,"50":1,"99":1,"106":1,"111":1,"161":1,"163":1,"170":1,"204":1,"220":1,"225":1,"254":1,"266":4,"330":1,"376":1,"417":2,"421":1,"445":1,"466":1,"472":1,"496":1,"525":1,"560":1,"584":2,"696":1,"714":1,"716":2}}],["深复制",{"2":{"4":1}}],["深拷贝",{"2":{"4":1}}],["深拷贝和浅拷贝",{"0":{"4":1}}],["浅复制",{"2":{"4":1}}],["浅拷贝",{"2":{"4":1}}],["使其均匀的分散",{"2":{"372":1}}],["使其占用cpu",{"2":{"160":1}}],["使编码更轻松",{"2":{"336":1}}],["使你免除了为改编对象或转换代码以便联合这些api而去写大量的代码",{"2":{"333":1}}],["使程序无法根据不同的异常做出正确的应激反应",{"2":{"330":1}}],["使程序功能正确完成",{"2":{"182":1}}],["使应用程序可以继续正常运行",{"2":{"303":1}}],["使线程正常退出",{"2":{"171":1}}],["使当前线程从执行状态",{"2":{"168":1}}],["使一个正在运行的线程处于睡眠状态",{"2":{"163":1}}],["使一个线程处于等待",{"2":{"163":1}}],["使本线程进入到等待阻塞状态",{"2":{"159":1}}],["使得分布更均匀",{"2":{"384":1}}],["使得遍历更快",{"2":{"379":1}}],["使得数据分布更平均",{"2":{"377":1,"379":1}}],["使得lowhead可以链接到所有属于该链表的元素",{"2":{"372":1}}],["使得上面的结构可以保持键值对的插入顺序",{"2":{"339":1}}],["使得无法拿到足够的错误信息来定位问题",{"2":{"323":1}}],["使得多线程编程更加容易",{"2":{"251":1}}],["使得复制的数组在被修改时",{"2":{"243":1}}],["使得二者可以相互转换",{"2":{"132":1}}],["使得代码更加灵活和富有扩展性",{"2":{"87":1}}],["使得它可以用于其他的操作",{"2":{"78":1}}],["使系统更加灵活",{"2":{"59":1}}],["使他们紧凑的排列在一起",{"2":{"28":1}}],["使用redis可能碰到的问题",{"0":{"690":1},"1":{"691":1,"692":1,"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1,"700":1,"701":1,"702":1}}],["使用redistemplate的opsforvalue可以存储对象",{"2":{"612":1}}],["使用redistemplate来操作字符串时",{"2":{"606":1}}],["使用10个key",{"2":{"680":1}}],["使用管道存储10000数据",{"2":{"602":1}}],["使用管道来节省传输的时间",{"2":{"602":1}}],["使用连接池",{"2":{"596":1}}],["使用分支意味着你可以把你的工作从开发主线上分离开来",{"2":{"545":1}}],["使用分段锁来保证在多线程下的性能",{"2":{"241":1}}],["使用过程中非常重要的概念",{"2":{"545":1}}],["使用git能做什么",{"0":{"523":1}}],["使用idea将其作为一个module来导入",{"2":{"468":1}}],["使用interrupt方法中断线程",{"2":{"171":1}}],["使用通配符匹配路由键",{"0":{"456":1}}],["使用发布订阅模式时",{"2":{"454":1}}],["使用此调用三方服务前需使用nacos将服务注册到服务中心",{"2":{"399":1}}],["使用hash",{"2":{"383":1}}],["使用2次扰动函数",{"2":{"379":1}}],["使用链地址法",{"2":{"379":1}}],["使用散列表",{"2":{"378":1,"379":1}}],["使用一种叫做链地址法的方式可以解决哈希冲突",{"2":{"376":1}}],["使用一种叫做拉链法的方式可以解决哈希冲突",{"2":{"367":1}}],["使用高16bit和低16bit异或来简单处理减少碰撞",{"2":{"371":1}}],["使用双向链表实现存储",{"2":{"354":1}}],["使用时不需要显式声明",{"2":{"349":1}}],["使用时需要切换内核态与用户态",{"2":{"179":1}}],["使用代码如下",{"2":{"346":1}}],["使用copyonwritearraylist来替换arraylist",{"2":{"341":1}}],["使用集合框架的好处",{"0":{"336":1}}],["使用抛异常返回方式",{"2":{"330":1}}],["使用jdk8的optional类来防止npe问题",{"2":{"330":1}}],["使用jstack工具将进程信息打印输出",{"2":{"147":1}}],["使用标准异常",{"0":{"327":1}}],["使用标记",{"2":{"57":1}}],["使用描述性消息抛出异常",{"0":{"320":1}}],["使用throw语句抛出null等等",{"2":{"313":1}}],["使用threadlocal就跟加锁完要解锁一样",{"2":{"249":1}}],["使用阿里巴巴推荐的创建线程池的方式",{"2":{"266":1}}],["使用线程池可以进行统一的分配",{"2":{"255":1}}],["使用线程局部变量的时候要特别小心",{"2":{"245":1,"246":1}}],["使用完毕不需要销毁线程而是放回池中",{"2":{"254":1}}],["使用完",{"2":{"248":1}}],["使用例子",{"2":{"245":1}}],["使用另外开辟空间的思路",{"2":{"243":1}}],["使用了",{"2":{"353":1}}],["使用了一种不同的迭代方式",{"2":{"241":1}}],["使用了偏向锁升级为轻量级锁再升级到重量级锁的方式",{"2":{"203":1}}],["使用者继承abstractqueuedsynchronizer并重写指定的方法",{"2":{"230":1}}],["使用volatile修饰保证线程可见性",{"2":{"230":1}}],["使用aqs能简单且高效地构造出应用广泛的大量的同步器",{"2":{"229":1}}],["使用版本标识来确定读到的数据与提交时的数据是否一致",{"2":{"221":1}}],["使用起来比较灵活",{"2":{"208":1}}],["使用简单",{"2":{"207":1}}],["使用手动锁",{"2":{"183":1}}],["使用自动锁",{"2":{"183":1}}],["使用原子类atomicinteger",{"2":{"183":1}}],["使用原则",{"2":{"69":1}}],["使用安全类",{"2":{"183":1}}],["使用重入锁实现线程同步",{"2":{"179":1}}],["使用特殊变量域volatile实现线程同步",{"2":{"179":1}}],["使用stop方法强行终止",{"2":{"171":1}}],["使用退出标志",{"2":{"171":1}}],["使用反射机制",{"2":{"111":1}}],["使用前必须赋值",{"2":{"69":1}}],["使用布尔变量",{"2":{"57":1}}],["使用对象",{"2":{"50":4}}],["使用的是标记",{"2":{"31":1}}],["使用",{"0":{"165":1,"316":1},"2":{"8":1,"118":1,"124":1,"152":2,"200":1,"258":1,"315":1,"351":2,"388":1}}],["使用深拷贝的情况下",{"2":{"4":1}}],["使这个增加的指针指向这个新的内存",{"2":{"4":1}}],["dset",{"2":{"689":1}}],["dd",{"2":{"598":1}}],["dbdata",{"2":{"704":2,"708":2,"713":2}}],["dbval",{"2":{"696":2}}],["dbfilename",{"2":{"627":1,"629":1}}],["dbsize",{"2":{"585":1}}],["db15",{"2":{"585":1}}],["db0",{"2":{"585":1}}],["dbindex",{"2":{"585":2}}],["dbindex是0",{"2":{"585":2}}],["dwx",{"2":{"449":1,"528":1}}],["dwx\\t",{"2":{"448":1}}],["during",{"2":{"517":1}}],["durable",{"2":{"448":1}}],["duration",{"2":{"432":1}}],["dump文件是进程的内存镜像",{"2":{"186":1}}],["dump",{"0":{"186":1,"633":1},"2":{"186":2,"627":2,"629":2}}],["dto",{"2":{"330":2}}],["dir",{"2":{"627":1,"629":1,"660":2}}],["direct",{"2":{"435":2,"455":1,"457":1}}],["diskcache",{"2":{"515":2}}],["distromapper",{"2":{"505":1}}],["distrotaskengineholder",{"2":{"492":1}}],["distrodelaytask",{"2":{"492":4}}],["distro",{"2":{"490":11,"492":3}}],["distrokeywithtarget",{"2":{"492":3}}],["distrokey",{"2":{"487":1,"492":7}}],["distroprotocol类的sync方法如下",{"2":{"492":1}}],["distroprotocol",{"2":{"487":2}}],["distroconsistencyserviceimpl",{"0":{"487":1},"1":{"488":1,"489":1,"490":1,"491":1,"492":1},"2":{"489":1,"490":2}}],["distroconsistencyserviceimpl类的put方法",{"2":{"487":1}}],["distroconsistencyserviceimpl类",{"2":{"486":1}}],["disabled",{"2":{"478":1}}],["discovery依赖",{"2":{"477":1}}],["discoveryclient",{"2":{"465":1}}],["discovery",{"2":{"465":1,"477":1,"478":1,"495":1}}],["discard",{"2":{"620":2}}],["discarded",{"2":{"492":1}}],["discardoldestpolicy",{"2":{"265":1}}],["discardpolicy",{"2":{"265":1}}],["dip",{"2":{"62":1}}],["daocloud",{"2":{"573":1,"615":1,"655":3,"660":3,"670":6}}],["daoexception",{"2":{"330":1}}],["dashboard",{"2":{"417":1}}],["datumkey",{"2":{"489":4,"490":9}}],["datum",{"2":{"485":5,"489":8,"490":1,"491":1}}],["date",{"2":{"266":3,"515":1,"597":1,"598":1,"704":1}}],["dat文件",{"2":{"147":1}}],["dat",{"2":{"147":2}}],["dataaccessexception",{"2":{"613":1,"622":1}}],["database",{"2":{"605":1,"617":1,"625":1}}],["datagrampacket",{"2":{"514":2}}],["datagramsocket",{"2":{"514":2}}],["datastore",{"2":{"489":1,"490":1}}],["dataoperation>",{"2":{"490":2}}],["dataoperation",{"2":{"487":1,"489":4,"490":3,"492":1}}],["dataformat",{"2":{"448":2}}],["data",{"2":{"2":4,"437":3,"438":2,"472":1,"502":1,"514":3,"515":1,"560":1,"563":1,"604":1,"606":1,"611":3,"615":2,"617":1,"675":1,"704":5,"708":6,"713":5}}],["daemonize",{"2":{"589":1}}],["daemon",{"2":{"146":3}}],["d",{"2":{"84":2,"234":1,"457":2,"560":5,"563":2,"564":1,"573":1,"629":1,"642":1,"655":1,"661":1,"689":4}}],["dockerredis",{"2":{"616":1,"617":2}}],["dockerfile",{"2":{"560":1,"563":2}}],["docker",{"0":{"556":1,"561":1,"614":1,"615":1,"670":1},"1":{"557":1,"558":1,"559":1,"560":1,"561":1,"562":2,"563":2,"564":2,"615":1,"616":1,"617":1},"2":{"558":1,"560":5,"563":2,"564":4,"573":1,"615":1,"628":1,"629":2,"630":1,"640":1,"655":1,"660":2,"662":3}}],["docker快速开始",{"2":{"464":1}}],["dosrvipxt",{"2":{"517":2}}],["dosomething",{"2":{"319":1,"321":1}}],["dom2beat",{"2":{"498":3}}],["dom",{"2":{"491":2,"514":1,"517":2}}],["don",{"2":{"322":1,"330":1,"484":1}}],["donotignoreexceptions",{"2":{"323":1}}],["donotcatchthrowable",{"2":{"322":1}}],["donotcloseresourceintry",{"2":{"315":1}}],["donotdothis",{"2":{"318":1}}],["dothis",{"2":{"318":1}}],["do",{"2":{"315":2,"322":2,"323":2,"324":1,"325":1,"347":1,"372":1,"416":1,"505":1}}],["down掉redis容器",{"2":{"647":1}}],["download",{"2":{"526":1,"572":2}}],["down",{"2":{"47":1,"564":1,"629":1,"640":1,"660":2}}],["double",{"2":{"45":1,"47":1,"117":1,"132":2,"372":1,"431":2,"435":1,"437":1,"438":1,"442":1,"475":1,"598":1,"611":1}}],["deny",{"2":{"660":2}}],["deserialize",{"2":{"601":1}}],["describes",{"2":{"324":1,"325":1}}],["decrby",{"2":{"580":2}}],["decr",{"2":{"580":2}}],["depends",{"2":{"563":2,"655":2}}],["dependent",{"2":{"184":1}}],["dependency>",{"2":{"403":4,"409":2,"417":2,"448":4,"465":2,"595":6,"601":2,"604":2,"696":2}}],["dependency",{"2":{"62":1}}],["device1",{"2":{"601":2,"612":3}}],["devicestring",{"2":{"600":3}}],["device",{"2":{"600":13,"601":13,"612":15}}],["dev",{"2":{"560":2}}],["development",{"2":{"36":1}}],["deregister等方法的声明",{"2":{"479":1}}],["debug",{"2":{"478":1,"490":1,"492":1,"500":1,"502":1,"503":2,"511":1,"517":1}}],["degrade",{"2":{"442":1}}],["degradeexception",{"2":{"440":1}}],["degraderulemanager",{"2":{"440":1}}],["degradeslot",{"0":{"440":1},"1":{"441":1,"442":1},"2":{"414":1,"429":1}}],["defined",{"2":{"423":1}}],["defaultused",{"2":{"608":6}}],["defaultcontroller",{"2":{"435":1,"438":1,"439":1}}],["defaultprocessorslotchain",{"0":{"426":1},"2":{"425":1}}],["defaultnode的计数器",{"2":{"429":1}}],["defaultnode与",{"2":{"428":1}}],["defaultnode>",{"2":{"423":2,"427":2,"429":1}}],["defaultnode记录的是资源在当前链路中的访问数据",{"2":{"415":1}}],["defaultnode",{"2":{"414":1,"415":1,"423":1,"427":8,"428":1,"429":1,"430":1,"431":1,"432":1,"434":1,"435":5,"440":1}}],["defaultscriptexecutor",{"2":{"608":1}}],["defaultserializer",{"2":{"608":7}}],["defaults",{"2":{"372":1}}],["defaultwriteobject",{"2":{"356":2}}],["default",{"2":{"50":1,"372":4,"376":1,"423":2,"425":2,"435":1,"438":1,"483":1,"484":1,"485":1,"491":2,"502":2,"514":1,"517":1,"608":1,"660":1}}],["demo01",{"2":{"606":1,"611":1,"617":1,"675":1,"704":1}}],["demo项目目录中",{"2":{"468":1}}],["demo",{"2":{"266":1,"467":2,"558":1}}],["del",{"2":{"585":1}}],["delay",{"2":{"492":2}}],["delayqueue",{"2":{"251":1}}],["deleteip",{"2":{"504":1}}],["delete",{"2":{"107":1,"409":1,"410":1,"490":2,"504":1,"708":1}}],["deadips",{"2":{"491":5}}],["dead",{"2":{"159":1,"491":2}}],["deadlockdemo",{"2":{"148":1}}],["deepcopy",{"2":{"4":1}}],["只插入redis中存取数据的key",{"2":{"696":1}}],["只用1次",{"2":{"680":1}}],["只负责把主节点的数据同步过来",{"2":{"668":1}}],["只针对入口资源做校验",{"2":{"431":1}}],["只进行了1次位运算和1次异或运算",{"2":{"377":1}}],["只序列化已存入的元素",{"2":{"356":1}}],["只不过阈值是动态的",{"2":{"435":1,"438":1,"439":1}}],["只不过在",{"2":{"353":1}}],["只不过虚拟机栈是服务",{"2":{"3":1}}],["只允许存入一个null元素",{"2":{"338":1,"357":1}}],["只允许访问静态成员",{"2":{"76":1}}],["只要有一个位为",{"2":{"695":1}}],["只要redis命令的语法没有错误",{"2":{"620":1}}],["只要调用windowwrap对象中的add方法",{"2":{"437":1}}],["只要给出键对象",{"2":{"338":1}}],["只要系统发生死锁",{"2":{"225":1}}],["只要该系统可以安装相应的java虚拟机",{"2":{"36":1}}],["只支持非公平锁",{"2":{"220":1}}],["只需要修改配置文件的名称",{"2":{"671":1}}],["只需要连接上集群中一个节点",{"2":{"668":1}}],["只需要给instance的声明加上volatile关键字即可volatile关键字的一个作用是禁止指令重排",{"2":{"214":1}}],["只需切换到oracle",{"2":{"42":1}}],["只适用于代码块锁",{"2":{"208":1}}],["只在用户态完成操作",{"2":{"179":1}}],["只在需要锁住的代码块锁住相应的对象",{"2":{"178":1}}],["只在某个范围内有效",{"2":{"69":1}}],["只会有一个clusternode",{"2":{"415":1}}],["只会增加",{"2":{"353":1}}],["只会唤醒一个线程",{"2":{"175":2}}],["只会在类加载的时候执行一次",{"2":{"56":1}}],["只是极有可能存在",{"2":{"695":1}}],["只是启动了6个容器节点",{"2":{"672":1}}],["只是文件重写后会变小",{"2":{"644":1}}],["只是为了兼容旧版本",{"2":{"388":1}}],["只是new自定义异常",{"2":{"330":1}}],["只是",{"2":{"234":1}}],["只是管理起来更加复杂",{"2":{"166":1}}],["只是线程里的一个函数",{"2":{"154":1}}],["只是str由原来指向",{"2":{"120":1}}],["只是使用的时候开发者不需要直接操作底层数组",{"2":{"117":1}}],["只是从",{"2":{"99":1}}],["只是增加了一个指针指向已存在的内存地址",{"2":{"4":1}}],["只能存储对象",{"2":{"391":1}}],["只能单向遍历",{"2":{"348":1}}],["只能遍历",{"2":{"348":1}}],["只能用于抛出一种异常",{"2":{"306":1}}],["只能执行",{"2":{"259":1}}],["只能保证一个共享变量的原子操作",{"2":{"223":1}}],["只能给代码块加锁",{"2":{"207":1}}],["只能调用一次",{"2":{"154":1}}],["只能修饰内部类也就是静态内部类",{"2":{"56":1}}],["只能是",{"2":{"46":1}}],["只面向虚拟机",{"2":{"38":2}}],["只有匹配异常的第一个",{"2":{"321":1}}],["只有没有异常抛出的时候",{"2":{"315":1}}],["只有finally块",{"2":{"289":1}}],["只有这样",{"2":{"329":1}}],["只有这样该引用才能够具备技能调用父类的方法和子类的方法",{"2":{"61":1}}],["只有这几个方法可以被其他类使用",{"2":{"230":1}}],["只有用到condition才需要去实现它",{"2":{"230":1}}],["只有一个线程能执行",{"2":{"230":1}}],["只有一份",{"2":{"200":1}}],["只有其中一个线程能更新变量的值",{"2":{"221":1}}],["只有满足如下状态",{"2":{"217":1}}],["只有满足了上述三个条件",{"2":{"61":1}}],["只有在某些很特殊的情况下",{"2":{"193":1}}],["只有在虚拟机空闲或者当前堆内存不足时",{"2":{"17":1}}],["只有获得锁的线程才能进入就绪状态",{"2":{"163":1}}],["只有当运算完成的时候结果才能取回",{"2":{"157":1}}],["只有自己使用完毕后才释放资源",{"2":{"149":1}}],["只有原来的一半",{"2":{"25":1}}],["只有引用的对象才有",{"2":{"19":1}}],["只有",{"2":{"10":1}}],["s写的性能",{"2":{"652":1}}],["s的读的性能",{"2":{"652":1}}],["smove",{"2":{"583":1}}],["smembers",{"2":{"583":1,"598":1,"689":1}}],["sdiffstore",{"2":{"583":2}}],["sdiff",{"2":{"583":1,"689":1}}],["srem",{"2":{"583":1,"689":1}}],["src",{"2":{"572":1}}],["srv",{"2":{"485":1,"491":4,"502":2,"504":2,"505":4,"517":3}}],["snapshotting",{"2":{"627":1,"629":1}}],["snf",{"2":{"558":1}}],["sneeze",{"2":{"311":5}}],["svn",{"2":{"522":1}}],["saving",{"2":{"631":1}}],["save",{"2":{"627":3,"629":3}}],["saveobjecttest",{"2":{"612":1}}],["saveobjectusebytearraytest",{"2":{"601":1}}],["saveobjectusejsontest",{"2":{"600":1}}],["save访问了service中的资源",{"2":{"415":1}}],["sadd",{"2":{"583":1,"598":2,"689":1}}],["samples",{"2":{"680":1}}],["samplecount",{"2":{"437":5}}],["same",{"2":{"407":1}}],["source",{"2":{"467":1,"468":1}}],["so",{"2":{"418":1,"492":1}}],["sort",{"0":{"395":1},"2":{"393":1,"395":1}}],["something",{"2":{"322":1,"323":2,"324":1,"325":1,"347":1,"416":1}}],["socketchannel",{"2":{"106":1,"505":2}}],["socket",{"2":{"106":1,"251":1,"505":5,"514":1}}],["slave同目录下创建一个docker",{"0":{"660":1}}],["slave",{"2":{"655":1,"660":1}}],["slave2",{"2":{"655":2,"665":1}}],["slaveof",{"2":{"655":3}}],["slave1",{"2":{"655":2,"665":1}}],["slave用来搭建主从架构",{"0":{"655":1}}],["slot",{"2":{"426":1,"427":1,"429":1,"430":1,"431":1,"432":1}}],["slotchain",{"2":{"425":1}}],["slot执行链",{"2":{"425":1}}],["slicing",{"0":{"162":1}}],["sleep",{"0":{"164":1,"169":1,"170":1},"2":{"148":3,"150":1,"152":1,"159":2,"161":1,"163":1,"164":4,"169":1,"170":4,"266":1,"438":1,"439":1,"598":1,"708":1}}],["sychronized",{"2":{"179":2,"251":1}}],["syncs",{"2":{"660":2}}],["sync",{"2":{"487":2,"491":2,"492":2}}],["synchronousqueue等",{"2":{"363":1}}],["synchronousqueue",{"2":{"229":1,"251":1}}],["synchronized只锁定当前链表或红黑二叉树的首节点",{"2":{"389":1}}],["synchronized来保证并发安全进行实现",{"2":{"389":1}}],["synchronized锁做了很多优化",{"2":{"388":1}}],["synchronizedmap",{"0":{"241":1},"2":{"241":1}}],["synchronizedlist",{"2":{"239":1,"355":7}}],["synchronizedset",{"2":{"239":1}}],["synchronized通过获取自增",{"2":{"232":1}}],["synchronized关键字在javase1",{"2":{"215":1}}],["synchronized关键字最主要的三种使用方式",{"2":{"200":1}}],["synchronized标记的变量可以被编译器优化",{"2":{"215":1}}],["synchronized可重入的原理",{"2":{"201":1}}],["synchronized这么一个标志",{"2":{"201":1}}],["synchronizeddemo",{"2":{"201":2}}],["synchronized是java中的一个关键字",{"2":{"201":1}}],["synchronized属于重量级锁",{"2":{"199":1}}],["synchronized",{"0":{"198":1,"199":1,"200":1,"201":1,"203":1,"205":2,"206":1,"207":1,"208":1,"215":1},"1":{"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1},"2":{"129":1,"139":3,"148":5,"150":2,"159":1,"174":1,"180":2,"183":1,"199":5,"200":10,"201":3,"202":3,"203":3,"204":1,"205":1,"206":1,"207":3,"208":6,"214":1,"215":5,"220":2,"221":1,"223":1,"237":1,"239":2,"271":1,"276":2,"278":1,"353":1,"354":1,"385":1,"388":2,"427":1,"428":1,"484":1,"511":2}}],["syncrhoized加锁的线程的object类的wait",{"2":{"177":1}}],["systemblockexception",{"2":{"431":5}}],["systemrulemanager",{"2":{"431":1}}],["systemslot是对系统保护的规则校验",{"2":{"431":1}}],["systemslot",{"0":{"431":1},"2":{"414":1,"429":1}}],["system",{"2":{"57":2,"82":1,"83":2,"84":6,"85":1,"88":1,"89":3,"94":4,"99":10,"112":3,"120":3,"123":7,"124":2,"133":5,"148":6,"150":3,"152":9,"183":2,"201":1,"245":1,"266":3,"296":1,"300":4,"310":2,"342":1,"346":1,"355":1,"364":3,"449":1,"491":1,"503":1,"504":2,"505":3,"517":1,"595":2,"596":1,"597":1,"598":11,"600":1,"601":1,"602":6,"606":2,"609":2,"611":6,"612":1,"613":3,"617":1,"675":1,"692":2,"694":2,"696":3,"704":3,"708":2,"713":2}}],["sprinbootredisclusterdemo01applicationtests",{"2":{"675":1}}],["sprinboot",{"2":{"675":1,"704":1}}],["springbootredisdemo02test",{"2":{"704":1}}],["springbootredisdemo01applicationtests",{"2":{"606":1,"611":1}}],["springbootdockerredisdemo01applicationtests",{"2":{"617":1}}],["springboottest",{"2":{"606":2,"611":2,"617":2,"675":2,"704":2}}],["springboot",{"2":{"606":1,"611":1,"617":1}}],["springboot整合redis",{"0":{"603":1},"1":{"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1,"611":1,"612":1,"613":1}}],["springboot集成redis提供的api",{"2":{"577":1}}],["springbootapplication",{"2":{"404":1}}],["springcloud已经帮我们自动装配discoveryclient",{"2":{"465":1}}],["springamqp自身也封装amqptemplate工具",{"2":{"448":1}}],["springapplication",{"2":{"404":1}}],["springframework",{"2":{"403":2,"409":1,"448":1,"601":1,"604":1,"606":3,"611":6,"617":3,"675":3,"704":4}}],["springmvc解决跨域问题",{"0":{"408":1}}],["springmvc",{"2":{"182":2}}],["spring",{"2":{"111":2,"265":1,"400":1,"419":1,"422":1,"444":1,"477":1,"601":1}}],["spop",{"2":{"583":2}}],["sph",{"2":{"425":2}}],["sphu",{"2":{"416":1,"417":1,"418":1,"422":1}}],["spec里面可以看到",{"2":{"213":1}}],["split",{"2":{"126":1,"372":1,"430":1}}],["s",{"0":{"123":1},"2":{"120":7,"266":2,"311":1,"356":4}}],["scripts",{"2":{"660":2}}],["scriptexecutor",{"2":{"608":2}}],["scope>",{"2":{"595":1}}],["scope>provided",{"2":{"595":1}}],["score",{"2":{"112":1,"598":2,"611":2}}],["scm",{"2":{"526":1}}],["scheduledthreadpoolexecutor",{"2":{"514":1}}],["scheduleupdateifabsent",{"2":{"511":2}}],["scheduletcpsupersensetask",{"2":{"505":1}}],["schedulecheck就是执行心跳检测的定时任务",{"2":{"504":1}}],["schedulecheck",{"2":{"504":1,"505":4}}],["schedulenow",{"2":{"503":1}}],["schedule",{"2":{"492":1,"498":1,"499":1}}],["scheduler",{"0":{"162":1}}],["scard",{"2":{"583":1,"689":1}}],["scanner",{"2":{"301":6}}],["scavenge收集器的老年代版本",{"2":{"30":1}}],["scavenge收集器",{"2":{"30":1}}],["scavenge",{"2":{"30":1,"32":1}}],["sinterstore",{"2":{"583":1,"598":1}}],["sinter",{"2":{"583":1,"689":1}}],["singleton7",{"2":{"214":6}}],["singleton",{"2":{"200":7}}],["singlethreadexecutortest",{"2":{"152":1}}],["single",{"2":{"62":1}}],["sismember",{"2":{"583":1,"598":1,"689":3}}],["site",{"2":{"503":1}}],["silently",{"2":{"484":1}}],["simpleerrorcounter>",{"2":{"442":1}}],["simpleerrorcounter",{"2":{"442":2}}],["simple",{"0":{"449":1},"2":{"409":1,"451":1}}],["signifies",{"2":{"372":1}}],["signalall",{"2":{"177":1}}],["signal",{"2":{"177":1}}],["size",{"2":{"107":1,"266":4,"342":1,"355":1,"356":1,"364":1,"423":1,"427":1,"428":1,"438":3,"485":2,"491":8,"498":1,"505":2,"515":3,"635":1,"641":1,"644":1}}],["sql",{"2":{"102":1,"570":1}}],["s2",{"2":{"99":6}}],["sending",{"2":{"500":1}}],["send",{"2":{"499":2,"514":1}}],["sendbeat",{"2":{"499":1,"500":1}}],["sentinel3",{"2":{"660":3}}],["sentinel2",{"2":{"660":3}}],["sentinel1",{"2":{"660":3}}],["sentinel目录",{"0":{"660":1}}],["sentinel的降级是基于状态机来实现的",{"2":{"440":1}}],["sentinel的令牌桶有两部分组成",{"2":{"433":1}}],["sentinel的基本概念",{"0":{"413":1},"1":{"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1}}],["sentinelwebinterceptor的声明如下",{"2":{"421":1}}],["sentinelresource注解就是一个标记",{"2":{"418":1}}],["sentinelresource注解",{"2":{"418":1}}],["sentinelresource注解的类",{"2":{"418":1}}],["sentinelresource注解的形式来标记资源",{"2":{"418":1}}],["sentinelresourceannotationpointcut",{"2":{"418":2}}],["sentinelresourceaspect的环绕增强方法",{"2":{"425":1}}],["sentinelresourceaspect",{"2":{"418":2}}],["sentinelresource",{"2":{"418":5}}],["sentinel中的资源用entry来表示",{"2":{"416":1}}],["sentinel中的簇点链路是由一个个的node组成的",{"2":{"415":1}}],["sentinel会将controller中的方法作为被保护资源",{"2":{"416":1}}],["sentinel实现限流",{"2":{"413":1}}],["sentinel快速开始",{"2":{"412":1}}],["sentinel",{"0":{"411":1},"1":{"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1},"2":{"417":3,"418":1,"419":1,"425":2,"655":5,"660":26}}],["secured",{"2":{"483":1,"502":1,"517":1}}],["seconds",{"2":{"266":2,"585":1,"606":1,"609":1,"694":1}}],["selectfromdb",{"2":{"692":2,"694":1,"696":3,"704":2,"708":1,"713":1}}],["select",{"2":{"585":1,"643":1}}],["selectionkey",{"2":{"505":3}}],["selectnodebyrequesterandstrategy",{"2":{"435":1}}],["selectednode",{"2":{"435":3}}],["selector",{"2":{"106":1,"505":1}}],["search",{"2":{"409":1,"560":1}}],["sessioncallback",{"2":{"613":1,"622":1}}],["session",{"2":{"245":1}}],["segment的锁",{"2":{"389":1}}],["segment",{"2":{"238":1,"387":1,"388":2,"389":8}}],["segment维护了哈希散列表的若干个桶",{"2":{"237":1}}],["segment继承了reentrantlock充当锁的角色",{"2":{"237":1}}],["segregation",{"2":{"62":1}}],["semaphore有一个构造函数",{"2":{"276":1}}],["semaphore",{"0":{"276":1},"2":{"229":1,"230":1,"276":4,"278":2}}],["setvalueserializer",{"2":{"609":1}}],["setvalid",{"2":{"485":1}}],["setkeyserializer",{"2":{"609":1}}],["setkeepalive",{"2":{"505":1}}],["setpassword",{"2":{"696":1}}],["setprice",{"2":{"600":1,"601":1,"612":1}}],["setport",{"2":{"499":1,"502":2}}],["setdevicename",{"2":{"600":1,"601":1,"612":1}}],["setdaemon",{"2":{"146":1,"514":1}}],["set的基本使用",{"2":{"598":1}}],["set相关操作",{"2":{"583":1}}],["setnx命令还未同步到从机上",{"2":{"714":1}}],["setnx原理",{"2":{"708":1}}],["setnx",{"0":{"686":1},"2":{"580":2,"606":1,"609":1}}],["setnamespaceid",{"2":{"505":1}}],["setname",{"2":{"505":1,"514":1}}],["setjsonfromserver",{"2":{"515":1}}],["settype",{"2":{"600":1,"601":1,"612":1}}],["settest",{"2":{"598":1,"611":1}}],["settcpnodelay",{"2":{"505":1}}],["setting",{"2":{"505":1}}],["setreuseaddress",{"2":{"505":1}}],["setrsinfo",{"2":{"503":1}}],["setgroupname",{"2":{"505":1}}],["sethealthy",{"2":{"503":1,"504":1}}],["setlastbeat",{"2":{"503":1}}],["setlastmodifiedmillis",{"2":{"491":1,"505":1}}],["setephemeral",{"2":{"499":1,"502":1}}],["seterror",{"2":{"429":1}}],["setmetadata",{"2":{"499":1,"502":1}}],["setweight",{"2":{"499":1,"502":1}}],["setifabsent",{"2":{"606":2,"609":2,"708":1}}],["setid",{"2":{"600":1,"601":1,"612":1}}],["setip",{"2":{"499":1,"502":2}}],["setinstanceid",{"2":{"485":2,"499":1,"502":1}}],["setinstancelist",{"2":{"484":1}}],["setsolinger",{"2":{"505":1}}],["setservice",{"2":{"503":1,"504":1,"505":2}}],["setservicename",{"2":{"499":1,"502":1}}],["setstarttime",{"2":{"505":1}}],["setstate",{"2":{"230":2}}],["setstopped",{"2":{"498":1}}],["sets",{"2":{"485":1}}],["setconnectionfactory",{"2":{"609":1}}],["setcompany",{"2":{"600":1,"601":1,"612":1}}],["setcluster",{"2":{"502":2}}],["setclustername",{"2":{"491":1,"499":1,"502":1}}],["setclusternode",{"2":{"428":1}}],["setcurnode",{"2":{"427":1}}],["setoriginnode",{"2":{"428":1}}],["setorigin",{"2":{"423":1}}],["setaddress",{"2":{"696":1}}],["setattribute",{"2":{"422":1}}],["setaccessible",{"2":{"120":1}}],["setuser",{"2":{"417":1}}],["setup",{"2":{"271":1}}],["set和list对比",{"2":{"357":1}}],["set接口",{"0":{"358":1},"1":{"359":1,"360":1,"361":1}}],["set接口的实现类主要有",{"2":{"337":1}}],["set接口和list接口",{"2":{"337":1}}],["set",{"0":{"338":3,"357":1,"583":1,"689":1},"2":{"243":2,"245":1,"248":1,"270":1,"338":2,"339":1,"348":1,"357":4,"423":1,"430":2,"439":1,"485":1,"491":1,"498":1,"504":1,"579":1,"580":2,"586":1,"595":1,"598":9,"600":1,"601":1,"602":2,"606":1,"610":1,"611":9,"612":1,"613":1,"617":1,"622":1,"629":2,"631":2,"643":6,"675":1,"692":1,"694":2,"696":1,"704":1,"708":1,"713":1}}],["sex",{"2":{"112":1,"580":2,"581":2}}],["serve",{"2":{"517":1}}],["serverproxy",{"0":{"512":1},"2":{"480":1,"496":1,"499":2,"511":1}}],["server",{"2":{"410":2,"465":1,"475":1,"495":2,"500":1,"502":1,"507":1,"514":1,"572":2,"588":1,"589":1,"615":1,"655":3,"670":6}}],["serversocketchannel",{"2":{"106":1}}],["serversocket",{"2":{"106":1,"173":1}}],["servlet",{"0":{"182":1},"2":{"182":4}}],["servicekey",{"2":{"515":3}}],["serviceobj",{"2":{"511":8}}],["serviceinfomap",{"2":{"511":2,"515":3}}],["serviceinfo>",{"2":{"511":1}}],["serviceinfo",{"2":{"510":6,"511":5,"515":25}}],["serviceid",{"2":{"479":6,"480":1}}],["service内部维护一个map",{"2":{"494":1}}],["servicechanged",{"2":{"491":1,"503":1,"504":1}}],["services",{"2":{"489":2,"490":1,"563":1,"573":1,"615":1,"655":1,"660":1,"670":1}}],["servicemanager就是nacos中管理服务",{"2":{"484":1}}],["servicemanager",{"0":{"484":1},"1":{"485":1,"486":1},"2":{"483":1,"502":3,"517":1}}],["serviceregistry就是nacosserviceregistry",{"2":{"478":1}}],["serviceregistry",{"2":{"478":1}}],["servicename获取当前服务的实例列表",{"2":{"485":1}}],["servicename",{"2":{"475":1,"480":5,"483":3,"484":10,"495":1,"496":2,"498":2,"502":12,"505":7,"507":1,"510":3,"511":16,"512":2,"517":12,"518":1}}],["service服务启动后",{"2":{"473":1}}],["service服务中",{"2":{"417":1}}],["service和user",{"2":{"473":1}}],["service方法两个资源外",{"2":{"419":1}}],["service中引入sentinel依赖",{"2":{"417":1}}],["service为注册到nacos的服务名称",{"2":{"405":1}}],["serviceexception等",{"2":{"330":1}}],["service",{"2":{"85":2,"405":1,"409":10,"467":3,"474":3,"479":1,"480":4,"483":2,"484":16,"485":14,"490":1,"491":1,"494":1,"495":1,"500":1,"502":6,"503":6,"504":4,"505":35,"512":1,"514":1,"517":8}}],["serializers",{"2":{"608":1}}],["serializer",{"2":{"608":1}}],["serialize",{"2":{"601":1}}],["serializationutils",{"2":{"601":2}}],["serializable",{"2":{"356":2}}],["serial语义和happens",{"2":{"196":1}}],["serial语义给编写单线程程序的程序员创造了一个幻境",{"2":{"196":1}}],["serial语义保证单线程内程序的执行结果不被改变",{"2":{"196":1}}],["serial规则和happens",{"0":{"196":1}}],["serial",{"2":{"30":1,"31":1,"32":2}}],["serial收集器的老年代版本",{"2":{"30":1}}],["serial收集器",{"2":{"30":1}}],["sunquan",{"2":{"584":5,"598":1}}],["sunionstore",{"2":{"583":1}}],["sunion",{"2":{"583":1}}],["sum",{"2":{"442":2}}],["successqps",{"2":{"431":1}}],["suppresswarnings",{"2":{"372":1}}],["super",{"2":{"55":6,"299":1,"429":1,"608":1}}],["subtract",{"2":{"491":2}}],["subscribe",{"0":{"452":1},"1":{"453":1},"2":{"510":2}}],["substring",{"2":{"126":1}}],["substitution",{"2":{"62":1}}],["submit",{"0":{"259":1},"2":{"259":3}}],["survivor",{"2":{"33":13}}],["s1+=",{"2":{"48":1}}],["s1+1",{"2":{"48":1}}],["s1",{"0":{"48":3},"2":{"48":7,"99":6}}],["stop",{"2":{"256":1,"560":1,"627":1,"628":1,"629":1,"630":1,"664":1}}],["storage",{"2":{"119":1}}],["strlen",{"2":{"580":2}}],["strategy",{"2":{"430":3,"435":5,"442":1}}],["struts2",{"2":{"182":2}}],["str4",{"2":{"123":3}}],["str3",{"2":{"123":2}}],["str2指向堆上的对象",{"2":{"123":1}}],["str2",{"2":{"123":8}}],["str1指向静态区",{"2":{"123":1}}],["str1",{"2":{"123":5}}],["str=new",{"0":{"122":1},"2":{"122":1}}],["str=hello",{"2":{"120":1}}],["str=",{"0":{"122":1},"2":{"120":1,"122":1}}],["str",{"2":{"120":4}}],["stringredistemplatetest",{"2":{"610":1}}],["stringredistemplate",{"0":{"610":1},"2":{"610":3,"611":1}}],["stringredisserializer",{"2":{"609":2}}],["stringresourcewrapper对象",{"2":{"425":1}}],["stringresourcewrapper",{"2":{"423":1,"425":2}}],["string存储",{"0":{"600":1}}],["stringtest",{"2":{"598":1,"606":1}}],["string的基本使用",{"2":{"598":1}}],["string操作",{"2":{"580":1}}],["stringutils",{"2":{"479":1,"489":1,"491":1,"502":4,"510":2,"511":1,"514":1,"517":5}}],["stringutil",{"2":{"422":1,"430":2}}],["string>>",{"2":{"611":1}}],["string>",{"2":{"342":2,"346":2,"351":2,"355":1,"364":2,"480":2,"485":1,"500":4,"510":1,"512":2,"596":1,"598":5,"611":3,"613":1}}],["stringindexoutofboundsexception",{"2":{"313":1}}],["string中的对象是不可变的",{"2":{"128":1,"129":1}}],["string中的equals方法是被重写过的",{"2":{"94":1}}],["string类中使用字符数组保存字符串",{"2":{"128":1,"129":1}}],["string为什么是不可变的",{"0":{"128":1}}],["string为什么是不可变的吗",{"0":{"119":1}}],["string和stringbuffer",{"0":{"128":1}}],["stringbuffer每次都会对stringbuffer对象本身进行操作",{"2":{"128":1,"129":1}}],["stringbuffer对方法加了同步锁或者对调用的方法加了同步锁",{"2":{"128":1,"129":1}}],["stringbuffer",{"0":{"129":1},"2":{"124":7,"128":1,"129":1}}],["stringbuilder三者区别是什么",{"0":{"129":1}}],["stringbuilder并没有对方法进行加同步锁",{"2":{"128":1,"129":1}}],["stringbuilder与stringbuffer都继承自abstractstringbuilder类",{"2":{"128":1,"129":1}}],["stringbuilder的区别是什么",{"0":{"128":1}}],["stringbuilder",{"2":{"124":7,"128":1,"129":1,"491":5}}],["string不可变但不代表引用不可以变",{"2":{"120":1}}],["string真的是不可变的吗",{"0":{"120":1}}],["string有哪些特性",{"0":{"118":1}}],["string相关",{"0":{"114":1},"1":{"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1}}],["string",{"0":{"46":1,"117":1,"121":1,"122":3,"123":2,"125":1,"126":1,"127":1,"129":1,"580":1,"683":1,"684":1,"686":1,"687":1},"2":{"46":1,"89":1,"94":7,"99":3,"112":2,"117":3,"118":4,"120":2,"121":1,"122":3,"123":5,"125":1,"128":1,"129":1,"133":1,"148":1,"152":4,"200":1,"217":1,"245":1,"266":4,"296":2,"297":1,"298":2,"299":1,"300":2,"311":1,"319":1,"320":1,"324":3,"325":1,"346":1,"351":2,"364":1,"381":1,"404":1,"418":1,"422":3,"423":6,"425":2,"427":2,"430":4,"435":3,"449":1,"453":2,"455":1,"457":1,"474":4,"479":2,"480":12,"483":3,"484":5,"485":3,"486":2,"487":1,"489":2,"490":3,"491":5,"494":3,"496":3,"498":2,"500":6,"502":5,"503":2,"504":1,"505":5,"510":2,"511":7,"512":7,"514":4,"515":2,"517":16,"570":1,"579":1,"595":2,"596":5,"597":3,"598":6,"600":2,"606":2,"609":2,"611":2,"613":1,"617":2,"675":2,"692":3,"694":2,"696":4,"704":4,"708":3,"713":3}}],["stuff",{"2":{"356":1}}],["stu",{"2":{"112":2}}],["student",{"2":{"99":7,"112":5}}],["stub",{"2":{"99":1}}],["staged",{"2":{"533":1}}],["status",{"0":{"535":1},"2":{"504":1,"534":1,"535":2,"536":1}}],["stat",{"2":{"442":2}}],["statisticnode类",{"2":{"438":1}}],["statisticslotcallbackregistry",{"2":{"429":1}}],["statisticslot是实现限流的关键",{"2":{"429":1}}],["statisticslot负责统计实时调用数据",{"2":{"429":1}}],["statisticslot",{"0":{"429":1},"2":{"414":1}}],["statistic",{"2":{"414":1}}],["staticinner",{"2":{"82":3}}],["static应用场景",{"2":{"56":1}}],["static的独特之处",{"2":{"56":1}}],["static块可以置于类中的任何地方",{"2":{"56":1}}],["static关键字还有一个比较关键的作用就是",{"2":{"56":1}}],["static",{"0":{"56":1},"2":{"82":3,"83":2,"84":6,"89":1,"94":1,"99":6,"112":1,"133":1,"148":3,"152":4,"200":4,"214":2,"245":3,"266":5,"271":3,"296":1,"297":1,"298":2,"300":1,"301":1,"310":2,"311":1,"360":1,"371":1,"404":1,"423":2,"425":1,"431":1,"435":1,"597":7}}],["static语句块",{"2":{"55":1}}],["static方法",{"2":{"55":1}}],["static变量也称作静态变量",{"2":{"75":1}}],["static变量值在类加载的时候分配空间",{"2":{"56":1}}],["static变量",{"2":{"55":1}}],["statck",{"2":{"340":1}}],["state会cas",{"2":{"230":1}}],["state会累加",{"2":{"230":1}}],["state也初始化为n",{"2":{"230":1}}],["state初始化为0",{"2":{"230":1}}],["stateoffset",{"2":{"230":1}}],["state",{"2":{"230":4,"418":1,"441":10,"442":2}}],["started",{"2":{"490":1,"631":1}}],["starter",{"2":{"403":2,"409":1,"417":1,"448":1,"465":1,"477":1,"604":1}}],["startindex",{"2":{"582":1}}],["starting",{"2":{"478":1}}],["startime",{"2":{"437":2}}],["start",{"0":{"154":1,"155":1},"2":{"148":2,"150":1,"152":3,"153":1,"154":3,"155":3,"159":1,"245":1,"266":11,"478":2,"602":4,"613":2,"704":1}}],["stack以及vector等",{"2":{"337":1}}],["stackify",{"2":{"324":2}}],["stackoverflowerror",{"2":{"284":1,"313":1,"322":1}}],["stack",{"2":{"3":1}}],["stacks",{"2":{"3":1}}],["swim",{"2":{"611":1}}],["switchdomain",{"2":{"502":2,"505":2,"517":3}}],["switchentry",{"2":{"502":3}}],["switch",{"0":{"46":1},"2":{"46":1,"431":1}}],["swap方法的参数x和y被初始化为两个对象引用的拷贝",{"2":{"99":1}}],["swap",{"2":{"99":4,"221":1,"222":1,"230":1,"270":1,"271":1}}],["sweep",{"2":{"26":1,"30":1,"31":1}}],["shell1",{"2":{"714":2}}],["shell127",{"2":{"631":1}}],["shellincr",{"2":{"684":1}}],["shellinfo",{"2":{"665":1}}],["shellredis在删除key时",{"2":{"678":1}}],["shellredis",{"2":{"673":1}}],["shellport",{"2":{"660":2}}],["shellmkdir",{"2":{"573":1}}],["shellhttp",{"2":{"560":1}}],["shellcd",{"2":{"560":1,"629":1}}],["shelldocker",{"2":{"558":1,"560":5,"564":1,"573":1,"629":2,"642":1,"655":1,"656":1,"661":1,"664":1}}],["shell",{"2":{"558":1,"572":1,"575":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":2,"586":1,"588":1,"589":1,"620":1,"627":1,"629":1,"635":1,"641":1,"643":1,"647":1,"671":1,"680":1,"688":1,"689":2}}],["shserver",{"2":{"410":1}}],["shanghai",{"2":{"558":1,"560":1,"563":1,"573":1,"615":1,"655":3,"670":6}}],["share",{"2":{"230":1,"558":1,"560":1,"563":1}}],["shallowcopy",{"2":{"4":1}}],["shutdown",{"2":{"152":1,"256":1,"266":1}}],["shouldregistermanagement",{"2":{"478":1}}],["should",{"2":{"323":1,"418":1,"425":1}}],["shouldbreak",{"2":{"57":4}}],["shortname",{"2":{"545":1}}],["short",{"0":{"48":1},"2":{"45":1,"46":1,"48":4,"117":1,"132":2}}],["3主3从",{"2":{"673":1}}],["3500",{"2":{"598":1}}],["3306",{"2":{"560":2,"563":2}}],["3的安装包",{"2":{"471":1}}],["3种流控效果",{"2":{"435":1}}],["360000",{"2":{"409":1}}],["31",{"2":{"383":2,"407":4,"692":1}}],["31365",{"2":{"147":1}}],["300",{"2":{"627":1,"629":1}}],["30000d",{"2":{"600":1,"601":1}}],["3000",{"2":{"596":1,"597":1,"605":1}}],["30",{"0":{"188":1},"2":{"310":5,"383":1,"584":3}}],["3",{"0":{"4":1,"10":1,"19":1,"28":1,"38":1,"47":1,"50":1,"55":1,"63":1,"64":1,"65":1,"66":2,"67":1,"71":1,"84":1,"86":1,"96":1,"107":1,"111":1,"117":1,"133":1,"139":1,"145":1,"151":1,"152":1,"153":1,"154":2,"155":1,"156":1,"157":1,"161":1,"193":1,"201":1,"212":1,"216":1,"217":1,"222":1,"231":1,"232":1,"239":1,"244":1,"245":1,"246":1,"256":1,"264":1,"267":1,"278":1,"285":1,"286":1,"287":1,"289":1,"293":1,"298":1,"305":1,"319":1,"335":1,"347":1,"361":1,"362":1,"363":1,"364":1,"370":1,"371":1,"376":1,"393":1,"405":1,"409":1,"416":1,"417":1,"418":1,"423":1,"427":1,"439":1,"452":1,"461":1,"468":1,"472":1,"479":1,"482":1,"483":1,"484":1,"487":2,"488":2,"492":2,"493":1,"499":1,"504":2,"505":1,"506":1,"512":1,"519":1,"532":1,"537":1,"548":1,"564":1,"577":1,"581":1,"591":1,"596":1,"606":1,"610":1,"617":1,"621":1,"626":1,"627":1,"628":1,"629":2,"630":2,"631":2,"632":3,"633":1,"637":1,"642":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":2,"663":2,"664":2,"665":2,"666":3,"672":1,"675":1,"679":1,"684":1,"696":1,"700":1,"701":1,"702":1,"710":1,"711":1,"712":1,"713":1,"714":2},"1":{"64":1,"65":1,"66":1,"67":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"217":1,"232":1,"245":1,"246":1,"286":1,"287":1,"363":1,"364":1,"417":1,"418":1,"453":1,"483":1,"484":1,"485":2,"486":2,"487":1,"488":3,"489":5,"490":5,"491":5,"492":3,"493":1,"627":1,"628":1,"629":1,"630":3,"631":3,"632":3,"633":1,"655":1,"656":1,"658":1,"659":1,"660":2,"661":2,"662":2,"663":1,"664":3,"665":3,"666":3,"701":1,"702":1,"712":1,"713":1,"714":1},"2":{"33":3,"47":2,"99":3,"111":1,"112":1,"133":3,"161":1,"163":1,"170":1,"186":1,"200":2,"204":1,"206":1,"214":2,"220":1,"223":1,"225":1,"226":1,"234":1,"245":2,"254":1,"264":1,"266":4,"330":1,"379":1,"417":2,"435":1,"437":1,"445":1,"451":1,"484":2,"505":1,"517":1,"525":1,"533":1,"560":1,"563":1,"573":1,"582":1,"584":3,"598":4,"615":1,"643":3,"655":1,"660":2,"670":1,"688":2,"696":1,"714":2}}],["几乎所有的对象实例都在这里分配内存",{"2":{"3":1}}],["是没有问题的",{"2":{"703":1}}],["是可以写入数据的",{"2":{"631":1}}],["是可以任意赋值的",{"2":{"56":1}}],["是redis官方提供一款java操作redis的api",{"2":{"594":1}}],["是从小到大排序",{"2":{"584":1}}],["是从左开始移除",{"2":{"582":1}}],["是namespace",{"2":{"474":1}}],["是google提供的一种数据序列化协议",{"2":{"470":1}}],["是滑动窗口的时间间隔",{"2":{"437":1}}],["是针对进入资源的请求",{"2":{"432":1}}],["是针对获取锁而言的",{"2":{"232":1}}],["是请求能够到达目标接口",{"2":{"407":1}}],["是构建微服务架构的重要工具之一",{"2":{"400":1}}],["是保留类不建议使用",{"2":{"385":1}}],["是2的",{"2":{"384":1}}],["是对字符串的内容进行比较",{"2":{"360":1}}],["是唯一的",{"2":{"360":1}}],["是非线程安全的",{"2":{"353":1,"385":1}}],["是链表的一种",{"2":{"352":1}}],["是线性的数据存储方式",{"2":{"352":1}}],["是线程安全容器",{"2":{"354":1}}],["是线程安全的吗",{"2":{"182":1}}],["是线程安全的",{"2":{"182":1,"353":1,"385":1}}],["是线程安全吗",{"0":{"182":1}}],["是双向链表的数据结构实现",{"2":{"352":1}}],["是双精度数",{"2":{"47":1}}],["是动态数组的数据结构实现",{"2":{"352":1}}],["是面向对象的一个设计模式",{"2":{"349":1}}],["是的话就返回遍历",{"2":{"341":1}}],["是结构上面的修改",{"2":{"341":1}}],["是java集合的一种错误检测机制",{"2":{"341":1}}],["是优先考虑的",{"2":{"340":1}}],["是重用性很高的数据结构",{"2":{"333":1}}],["是程序员的基本修养",{"2":{"330":1}}],["是所有异常和错误的超类",{"2":{"322":1}}],["是由",{"2":{"308":1}}],["是如何得到请求量的呢",{"2":{"438":1}}],["是如何处理异常的",{"0":{"305":1}}],["是如何做线程同步的",{"0":{"180":1}}],["是最原始的线程池创建",{"2":{"263":1}}],["是最基本的数据类型吗",{"0":{"117":1}}],["是强引用",{"2":{"248":1}}],["是实现lock接口的一个类",{"2":{"232":1}}],["是指访问频率非常高的数据",{"2":{"682":1}}],["是指定固定大小的",{"2":{"391":1}}],["是指两个或两个以上的进程",{"2":{"226":1}}],["是指优先让可运行池中优先级高的线程占用cpu",{"2":{"160":1}}],["是什么",{"0":{"220":1,"234":1,"243":1,"245":1,"345":1}}],["是变量修饰符",{"2":{"215":1}}],["是类",{"2":{"208":2}}],["是类成员",{"2":{"200":1}}],["是和",{"2":{"208":1}}],["是基于异步的线程池来完成",{"2":{"494":1}}],["是基于",{"2":{"359":1}}],["是基于冲突检测的乐观锁",{"2":{"206":1}}],["是基于事件和回调机制实现的",{"2":{"106":1}}],["是悲观锁",{"2":{"206":1}}],["是允许的",{"2":{"200":1}}],["是依赖于底层的操作系统的",{"2":{"199":1}}],["是多实例多线程的",{"2":{"182":1}}],["是不能保证共享变量的线程安全性的",{"2":{"182":1}}],["是不可以被回收的",{"2":{"22":1}}],["是单实例多线程的",{"2":{"182":1}}],["是静态方法",{"2":{"172":1}}],["是个泛型",{"2":{"153":1}}],["是真正意义上的",{"2":{"140":1}}],["是只读字符串",{"2":{"118":1}}],["是异步io的缩写",{"2":{"106":1}}],["是传统",{"2":{"106":1}}],["是值传递",{"2":{"98":1}}],["是因为需要计算存储数据的存储位置",{"2":{"382":1}}],["是因为生命周期不一致",{"2":{"88":1}}],["是因为它的特性",{"2":{"56":1}}],["是因为如果",{"2":{"51":1}}],["是因为后面讲到的垃圾收集算法都是在此算法的基础上进行改进的",{"2":{"26":1}}],["是",{"2":{"48":1,"106":1,"164":2,"214":2,"220":1,"222":1,"234":1,"283":1,"475":3,"486":1,"495":2,"507":1}}],["是否存在时",{"2":{"695":1}}],["是否忽略从节点的内存",{"2":{"680":1}}],["是否允许在文件后面追加原先aof内容",{"2":{"635":1,"641":1}}],["是否允许携带cookie",{"2":{"409":1}}],["是否开启aof",{"2":{"635":1,"641":1}}],["是否对dump",{"2":{"627":1,"629":1}}],["是否停止写入",{"2":{"627":1,"629":1}}],["是否只返回健康实例",{"2":{"507":1}}],["是否临时实例",{"2":{"475":1,"495":1}}],["是否健康",{"2":{"475":1}}],["是否上线",{"2":{"475":1}}],["是否必选",{"2":{"475":1,"495":1,"507":1}}],["是否超过阈值",{"2":{"439":1}}],["是否大于",{"2":{"438":2,"504":2}}],["是否是红黑树",{"2":{"371":1}}],["是否为临时实例",{"2":{"479":1}}],["是否为0",{"2":{"372":1}}],["是否为treenode",{"2":{"371":1}}],["是否为空或为null",{"2":{"371":1}}],["是否继承自",{"0":{"338":1}}],["是否强制要求调用者必须处理此异常",{"2":{"304":1}}],["是否多线程安全",{"2":{"214":1}}],["是否",{"2":{"214":1}}],["是否与其线程",{"2":{"203":1}}],["是否释放锁",{"2":{"164":1}}],["是否可以继承",{"0":{"121":1}}],["是否可被重写",{"0":{"91":1}}],["是否正确",{"0":{"47":1}}],["是否能作用在",{"0":{"46":3}}],["是一个由c语言开发的基于key",{"2":{"570":1}}],["是一个分布式版本控制工具",{"2":{"525":1}}],["是一个runnable",{"2":{"499":1,"505":1}}],["是一个服务提供者",{"2":{"467":1}}],["是一个服务消费者",{"2":{"467":1}}],["是一个entrancenode类型的节点",{"2":{"419":1}}],["是一个集合接口",{"2":{"394":1}}],["是一个链表结构的元素",{"2":{"389":1}}],["是一个受查异常",{"2":{"308":1}}],["是一个",{"2":{"308":1}}],["是一个volatile变量",{"2":{"271":1}}],["是一个支持两个附加操作的队列",{"2":{"251":1}}],["是一个本地线程副本变量工具类",{"2":{"245":1}}],["是一个并发容器",{"2":{"243":1}}],["是一个读写锁接口",{"2":{"234":1}}],["是一个静态方法",{"2":{"163":1}}],["是一个可能还没有完成的异步任务的结果",{"2":{"156":1}}],["是一个近乎纯洁的面向对象编程语言",{"2":{"132":1}}],["是一个典型的",{"2":{"118":1}}],["是一个参考模型并且是完全开源的",{"2":{"42":1}}],["是一种跨语言",{"2":{"470":1}}],["是一种轻便高效的结构化数据存储格式",{"2":{"470":1}}],["是一种特殊的defaultnode",{"2":{"415":1}}],["是一种约定",{"2":{"407":1}}],["是一种可重入的锁",{"2":{"389":1}}],["是一种数组和链表结构",{"2":{"389":1}}],["是一种随机访问模式",{"2":{"350":1}}],["是一种实现线程安全的方式",{"2":{"245":1,"246":1}}],["是一种基于锁的操作",{"2":{"222":1}}],["是一种行为的规范",{"2":{"64":1}}],["是一种模板设计",{"2":{"64":1}}],["是一种常见的基础垃圾收集算法",{"2":{"26":1}}],["是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器",{"2":{"31":1}}],["是英文",{"2":{"31":1}}],["是垃圾收集的意思",{"2":{"18":1}}],["是增加了一个指针并且申请了一个新的内存",{"2":{"4":1}}],["是被所有线程共享的",{"2":{"3":1}}],["是其它编程语言交互的接口",{"2":{"2":1}}],["堆栈类",{"2":{"340":1}}],["堆栈溢出错误",{"2":{"313":1}}],["堆栈溢出等",{"2":{"303":1}}],["堆中预先分配一小块内存",{"2":{"10":1}}],["堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定",{"2":{"9":1}}],["堆是否规整来决定的",{"2":{"9":1}}],["堆对于整个应用程序都是共享",{"2":{"5":1}}],["堆存放的是对象的实例和数组",{"2":{"5":1}}],["堆因为是不连续的",{"2":{"5":1}}],["堆的物理地址分配对对象是不连续的",{"2":{"5":1}}],["堆",{"2":{"3":1}}],["与eureka相比",{"2":{"506":1,"519":1}}],["与equals",{"2":{"95":1,"360":1}}],["与服务注册时一样",{"2":{"502":1}}],["与json的功能类似",{"2":{"470":1}}],["与简单模式相比",{"2":{"450":1}}],["与我们之前分析的漏桶算法基本一致",{"2":{"439":1}}],["与链路无关",{"2":{"428":1}}],["与自己右移16位进行异或运算",{"2":{"377":1}}],["与前面的e",{"2":{"371":1}}],["与前面几行",{"2":{"316":1}}],["与key",{"2":{"371":1}}],["与源码分析",{"0":{"236":1},"1":{"237":1,"238":1,"239":1,"240":1,"241":1}}],["与此同时",{"2":{"232":1}}],["与",{"0":{"95":1,"122":1,"133":1,"385":1}}],["与方法返回值和访问修饰符无关",{"2":{"92":1}}],["与其他属性定义方式一致",{"2":{"80":1}}],["与标记",{"2":{"28":1}}],["与虚拟机栈的作用是一样的",{"2":{"3":1}}],["与native",{"2":{"2":1}}],["multi",{"2":{"620":2,"622":1}}],["mutable",{"2":{"217":1}}],["mutex",{"2":{"199":1}}],["mget",{"2":{"580":2}}],["m",{"2":{"538":2}}],["mset",{"2":{"580":2}}],["mss",{"2":{"514":1}}],["ms",{"2":{"505":3}}],["msg",{"2":{"299":2,"449":2,"499":2,"503":1,"538":1}}],["milliseconds",{"2":{"498":1,"499":1,"505":3,"660":2}}],["min",{"2":{"605":1,"617":1,"635":1,"641":1,"644":1}}],["mine",{"2":{"491":1}}],["minrequestamount",{"2":{"442":1}}],["mix4",{"2":{"417":1}}],["memory",{"2":{"680":1}}],["members",{"2":{"611":1}}],["membermanager",{"2":{"492":1}}],["member",{"2":{"492":1,"584":2}}],["merge",{"2":{"544":1,"545":1,"550":1}}],["mechanism",{"2":{"502":1}}],["metricsmonitor",{"2":{"498":1,"505":1}}],["metricbucket",{"2":{"438":1}}],["metricbucket>",{"2":{"437":1,"438":1}}],["metadata",{"2":{"475":1,"480":1,"517":1}}],["methed",{"2":{"3":1}}],["methods",{"2":{"410":1,"418":1}}],["method",{"2":{"3":1,"85":3,"99":1,"201":1,"300":5,"330":1,"418":1,"484":1}}],["messageconverter",{"2":{"448":2}}],["messageconverterconfig",{"2":{"448":1}}],["message",{"2":{"321":1,"324":1,"325":1,"330":1,"453":2,"455":3,"457":4}}],["mybloom",{"2":{"696":7}}],["mybusinessexception",{"2":{"319":1,"324":2,"325":2}}],["mymaster",{"2":{"660":10}}],["myredistemplatetest",{"2":{"609":1}}],["myredistemplate",{"2":{"609":10}}],["myredisconfig",{"2":{"609":1}}],["myrunnable",{"2":{"152":8,"266":3}}],["mylist",{"2":{"598":2}}],["myzset2",{"2":{"584":1}}],["myzset1",{"2":{"584":1}}],["myzset3",{"2":{"584":1}}],["myset5",{"2":{"583":1}}],["myset4",{"2":{"583":1}}],["myset3",{"2":{"583":2,"598":6}}],["myset2",{"2":{"583":6,"598":2}}],["myset1",{"2":{"583":7,"598":2}}],["myset",{"2":{"583":7}}],["mysql中事务",{"0":{"619":1}}],["mysql数据库密码",{"2":{"560":1}}],["mysql容器名称",{"2":{"560":1}}],["mysql",{"2":{"560":9,"563":10}}],["myexception",{"2":{"297":3,"299":3,"300":3}}],["mycallable",{"2":{"152":2}}],["mythread",{"2":{"152":5}}],["moment",{"2":{"511":1}}],["modified",{"2":{"533":1}}],["modhosts",{"2":{"515":2}}],["modcount",{"2":{"341":1,"356":2}}],["mode",{"2":{"31":1,"484":1,"511":1,"589":2,"635":1,"641":1}}],["monitor",{"0":{"180":1},"2":{"165":2,"199":1,"585":1,"660":2}}],["move",{"2":{"107":1,"585":1}}],["master重新启动后",{"0":{"666":1}}],["master容器",{"0":{"664":1}}],["master容器的ip地址",{"2":{"660":1}}],["master宕机10秒后",{"2":{"660":1}}],["master节点密码",{"2":{"655":1}}],["masterauth",{"2":{"655":1}}],["master",{"0":{"655":1,"660":1},"2":{"655":12,"656":1,"660":2,"664":1,"666":1}}],["make",{"2":{"491":1,"505":1,"572":3}}],["malformed",{"2":{"491":1}}],["matchephemeralinstancelistkey",{"2":{"489":1,"491":1}}],["matchephemeralkey",{"2":{"486":1}}],["math",{"2":{"428":1,"439":1}}],["management",{"2":{"478":1,"680":1}}],["may",{"2":{"439":1}}],["maxmemory",{"2":{"680":4}}],["maxqueueingtimems",{"2":{"435":1,"439":2}}],["maxcount",{"2":{"432":1}}],["maxrt",{"2":{"431":1}}],["maxthread",{"2":{"431":1}}],["maxage",{"2":{"409":1}}],["maximum",{"2":{"372":4}}],["maximumpoolsize",{"2":{"264":1,"266":1}}],["maxinumpoolsize",{"2":{"264":1}}],["max",{"2":{"262":1,"266":2,"372":2,"428":1,"505":1,"605":3,"617":3}}],["mapconsistencyservice",{"2":{"486":2}}],["mapping",{"2":{"409":1}}],["mapper",{"2":{"404":1}}],["mapperscan",{"2":{"404":1}}],["map没有继承于collection接口",{"2":{"338":1}}],["map是一个键值对集合",{"2":{"338":1}}],["map三者的区别",{"0":{"338":1}}],["map接口",{"0":{"365":1},"1":{"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1}}],["map接口不是collection的子接口",{"2":{"338":1}}],["map接口的实现类主要有",{"2":{"337":1}}],["map接口和collection接口是所有集合框架的父接口",{"2":{"337":1}}],["map",{"0":{"338":2,"380":1},"2":{"238":1,"239":3,"241":1,"338":2,"339":1,"360":3,"380":1,"423":2,"427":5,"430":1,"474":2,"480":1,"485":2,"491":2,"494":3,"498":1,"500":2,"504":1,"505":1,"511":1,"512":1,"596":3,"598":7,"611":7}}],["main目录下",{"2":{"472":1}}],["main",{"2":{"89":1,"94":1,"99":3,"112":1,"133":1,"146":2,"148":5,"150":6,"152":11,"154":2,"155":1,"159":1,"185":2,"245":1,"266":1,"311":1,"324":2,"404":1}}],["markorderpaysuccess",{"2":{"405":1}}],["mark",{"2":{"26":1,"28":1,"30":1,"31":1,"208":1,"598":1,"611":1}}],["machineerror",{"2":{"284":1}}],["machine是java虚拟机",{"2":{"36":1}}],["machine",{"2":{"3":1}}],["用lua脚本",{"2":{"714":1}}],["用了1次",{"2":{"680":1}}],["用在监听方法上",{"2":{"448":1}}],["用在方法签名中",{"2":{"289":1}}],["用作限流",{"2":{"429":1}}],["用作线程隔离",{"2":{"429":1}}],["用同样的hash映射算法把该元素加入新的数组",{"2":{"372":1}}],["用新值替换旧值",{"2":{"371":1}}],["用e来记录",{"2":{"371":1}}],["用完就清理",{"2":{"249":1}}],["用完并分配新的",{"2":{"10":1}}],["用法不同",{"2":{"164":1}}],["用途不同",{"2":{"164":1}}],["用反射可以访问私有成员",{"2":{"120":1}}],["用更加简便的方式即可完成对字符串的使用",{"2":{"117":1}}],["用父类型引用子类型对象",{"2":{"60":1}}],["用来保存更新后的实例列表",{"2":{"485":1}}],["用来记录上一个请求的时间",{"2":{"433":1}}],["用来记录剩余令牌数量",{"2":{"433":1}}],["用来实现基于链路模式的限流规则",{"2":{"415":1}}],["用来标记",{"2":{"349":1}}],["用来标识该方法可能抛出的异常列表",{"2":{"306":1}}],["用来抛出方法或代码块中的异常",{"2":{"306":1}}],["用来协调多个线程之间的同步",{"2":{"278":1}}],["用来形成静态代码块以优化程序性能",{"2":{"56":1}}],["用来访问直接父类中被隐藏的父类中成员数据或函数",{"2":{"55":1}}],["用来封装类在方法区内的数据结构",{"2":{"2":1}}],["用于操作数据",{"2":{"447":1}}],["用于对集合中元素进行排序",{"2":{"394":1}}],["用于遍历桶中的链表",{"2":{"371":1}}],["用于声明该方法可能抛出的异常",{"2":{"289":1}}],["用于抛出异常",{"2":{"289":1}}],["用于捕获异常",{"2":{"289":1}}],["用于监听",{"2":{"289":1}}],["用于两个线程间交换数据",{"2":{"277":1}}],["用于中断线程",{"2":{"172":1}}],["用于获取结果",{"2":{"156":1}}],["用于被其他实现或继承",{"2":{"64":1}}],["用于修饰类",{"2":{"53":1}}],["用于存储数据的容器",{"2":{"333":1}}],["用于存储已被虚拟机加载的类信息",{"2":{"3":1}}],["用于存储局部变量表",{"2":{"3":1}}],["用户id",{"2":{"689":3}}],["用户下单",{"2":{"687":1}}],["用户依然可以读取",{"2":{"484":1}}],["用户服务",{"2":{"474":1}}],["用户微服务",{"2":{"467":1}}],["用户名",{"2":{"448":1}}],["用户自定义",{"2":{"380":1}}],["用户注册的场景中",{"2":{"330":1}}],["用户模式下的方法有",{"2":{"179":1}}],["用户模式和内核模式",{"2":{"179":1}}],["用户",{"2":{"146":1}}],["用户每次都必须通过更新到最新版本获得支持来获取最新版本",{"2":{"42":1}}],["用户线程时间+gc线程时间",{"2":{"30":1}}],["用户线程时间",{"2":{"30":1}}],["用",{"0":{"127":1},"2":{"21":1,"54":1,"298":1}}],["循环遍历",{"2":{"349":3}}],["循环栅栏",{"2":{"278":1}}],["循环时间长开销大",{"2":{"223":1}}],["循环检测条件是否满足会更好",{"2":{"165":1}}],["循环等待条件",{"2":{"149":1,"225":1}}],["循环",{"2":{"3":1,"223":1}}],["rlock",{"2":{"713":1}}],["rbloomfilter",{"2":{"696":1}}],["rdb和aof的区别",{"2":{"648":1}}],["rdb的文件",{"2":{"630":1}}],["rdb文件加载时机",{"0":{"633":1}}],["rdb文件",{"2":{"631":1}}],["rdb文件中的内容",{"2":{"633":1}}],["rdb文件中的",{"2":{"631":1}}],["rdb文件保存的位置",{"2":{"627":1,"629":1}}],["rdb文件进行压缩",{"2":{"627":1,"629":1}}],["rdbchecksum",{"2":{"627":1,"629":1}}],["rdbcompression",{"2":{"627":1,"629":1}}],["rdb进行检查",{"2":{"627":1,"629":1}}],["rdb机制准备工作",{"0":{"629":1},"1":{"630":1,"631":1,"632":1}}],["rdb机制",{"0":{"626":1},"1":{"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1}}],["rdb",{"0":{"648":1},"2":{"625":1,"627":1,"629":1,"635":1,"641":1,"647":1}}],["rightpushall",{"2":{"611":1}}],["rpoplpush",{"2":{"582":1}}],["rpop",{"2":{"582":1}}],["rpush",{"2":{"582":1,"598":1}}],["rpc",{"2":{"470":1}}],["rm",{"2":{"560":1}}],["rsinfo",{"2":{"502":3,"503":8}}],["r",{"2":{"440":2,"514":2,"546":1}}],["rt",{"2":{"431":3}}],["rt校验",{"2":{"431":1}}],["rt等信息",{"2":{"413":1}}],["ruleprovider",{"2":{"435":4}}],["ruleconstant",{"2":{"430":2,"435":6,"438":2}}],["rules",{"2":{"430":3,"435":3}}],["rule",{"2":{"414":1,"430":10,"435":10}}],["running",{"2":{"152":5,"159":1,"256":1,"478":2}}],["runnable+threadpoolexecutor",{"0":{"266":1}}],["runnabletest",{"2":{"152":3}}],["runnable",{"0":{"153":1},"2":{"152":4,"153":2,"156":2,"157":1,"159":2,"162":2,"259":2,"266":3,"514":1,"704":1}}],["run",{"0":{"154":1,"155":2},"2":{"152":9,"153":2,"154":6,"155":4,"185":3,"245":1,"266":1,"404":1,"490":1,"499":1,"503":1,"504":1,"505":2,"514":1,"558":1,"560":3,"704":1}}],["runtimeexception异常和受检异常之间的区别",{"2":{"304":1}}],["runtimeexception极其子类",{"2":{"288":1}}],["runtimeexception",{"0":{"312":1},"2":{"286":2,"287":1,"288":1,"291":1,"304":3,"330":1}}],["runtime",{"2":{"2":2,"36":1}}],["routingkey由多个单词构成",{"2":{"457":1}}],["routing",{"0":{"454":1},"1":{"455":1}}],["routes",{"2":{"409":1}}],["round",{"2":{"439":1}}],["rollingcounterinsecond",{"2":{"438":3}}],["root",{"2":{"423":2,"560":4,"563":1}}],["roots",{"2":{"22":2}}],["range",{"2":{"611":1}}],["random",{"2":{"349":4,"680":2}}],["randomaccess",{"2":{"349":1,"350":1,"356":1}}],["raft",{"2":{"491":1}}],["rabbittemplate",{"2":{"449":1,"453":1,"455":3,"457":4}}],["rabbitlistener",{"2":{"448":1,"449":1}}],["rabbitmq封装了rabbittemplate工具",{"2":{"448":1}}],["rabbitmq的五种运行模式",{"0":{"448":1},"1":{"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1}}],["rabbitmq运作模式",{"0":{"447":1}}],["rabbitmq就是最特殊的那个",{"2":{"444":1}}],["rabbitmq",{"0":{"443":1},"1":{"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1},"2":{"448":1,"451":1}}],["ratio",{"2":{"442":1}}],["ratelimitercontroller",{"2":{"435":1,"438":1,"439":1}}],["race",{"2":{"439":1}}],["rawtypes",{"2":{"372":1}}],["radius",{"2":{"82":2,"83":2}}],["reids对写操作进行报错",{"2":{"680":1}}],["rewrite",{"2":{"635":3,"641":3,"644":2}}],["region",{"2":{"503":1}}],["registry",{"2":{"479":2}}],["registration",{"2":{"479":7}}],["registering",{"2":{"480":1}}],["registerinstance",{"2":{"479":1,"480":1,"483":2,"484":1,"496":1,"502":1}}],["registerservice",{"2":{"480":2,"496":1,"499":1}}],["register",{"2":{"3":1,"478":2,"479":5,"480":1,"483":1,"484":2,"505":1}}],["remote",{"0":{"541":1,"542":1},"2":{"540":5,"541":1,"542":1}}],["removed",{"2":{"502":1}}],["removetask",{"2":{"492":1}}],["removeall",{"2":{"391":1}}],["remove",{"0":{"364":1},"2":{"241":1,"248":1,"347":4,"364":2,"485":2,"490":1,"498":1,"504":1,"511":1}}],["remvhosts",{"2":{"515":2}}],["remv",{"2":{"491":1}}],["reconfig",{"2":{"660":2}}],["recordlistener",{"2":{"490":1}}],["recordlistener就是",{"2":{"490":1}}],["recordlog",{"2":{"425":1}}],["record",{"2":{"486":1,"487":1,"489":1}}],["receiving",{"2":{"514":1}}],["receive",{"2":{"514":1}}],["receiver",{"2":{"514":1}}],["received",{"2":{"491":1,"514":1,"515":1}}],["recalculatechecksum",{"2":{"491":1,"505":1}}],["requirepass",{"2":{"589":1,"616":1,"655":1}}],["required",{"2":{"483":1,"502":1,"517":1}}],["requester",{"2":{"430":4}}],["requested",{"2":{"410":1}}],["requestmapping路径",{"2":{"422":1}}],["request",{"2":{"422":6,"438":1,"475":1,"483":4,"495":1,"502":7,"507":1,"517":14}}],["requesttemplate",{"2":{"401":1}}],["requestinterceptor",{"2":{"401":3}}],["requestinterceptor接口",{"2":{"401":1}}],["reqapi",{"2":{"480":1,"500":1,"512":1}}],["release",{"2":{"477":1,"601":1}}],["releases",{"2":{"471":1,"572":1}}],["relate",{"2":{"435":1}}],["redssion这个工具已经实现布隆过滤器",{"2":{"696":1}}],["redis这个读写操作是单线程的",{"0":{"717":1}}],["redis是单线程吗",{"0":{"716":1}}],["redission",{"2":{"713":1}}],["redission实现分布式锁的原理",{"2":{"712":1}}],["redission实现分布式锁",{"0":{"711":1},"1":{"712":1,"713":1,"714":1}}],["redisson红锁解决思路",{"2":{"714":1}}],["redissonclient",{"2":{"696":1}}],["redisson",{"2":{"696":4,"713":1}}],["redis应用场景",{"0":{"681":1},"1":{"682":1,"683":1,"684":1,"685":1,"686":1,"687":1,"688":1,"689":1}}],["redis去获取一个key的值时",{"2":{"679":1}}],["redis在后台会开启一个定时任务",{"2":{"679":1}}],["redis会在全部的key中随机干掉一个",{"2":{"680":1}}],["redis会在全部的key中干掉一个最少频次使用的key",{"2":{"680":1}}],["redis会在全部的key中干掉一个最近最少使用的key",{"2":{"680":1}}],["redis会在设置过了生存时间的key中干掉一个剩余生存时间最少的key",{"2":{"680":1}}],["redis会在设置过了生存时间的key中干掉一个最少频次使用的key",{"2":{"680":1}}],["redis会在设置过了生存时间的key中干掉一个最近最少使用的key",{"2":{"680":1}}],["redis会在设置过了生存时间的key中随机干掉一个",{"2":{"680":1}}],["redis会根据指定的淘汰策略来删除key",{"2":{"678":1}}],["redis会不会立即去删除这个key",{"2":{"678":1}}],["redis会通过一些机制来对当前内存进行优化",{"2":{"677":1}}],["redis会把原先aof文件中重复的命令进行优化",{"2":{"644":1}}],["redis会把语法没有问题的命令保存在一个队列中",{"2":{"620":1}}],["redis淘汰策略",{"0":{"676":1},"1":{"677":1,"678":1,"679":1,"680":1}}],["rediscluster",{"2":{"675":1,"704":1}}],["redisconnectionfactory",{"2":{"609":1}}],["redis6",{"2":{"670":3}}],["redis5",{"2":{"670":3}}],["redis4",{"2":{"670":3}}],["redis3",{"2":{"670":3}}],["redis2",{"2":{"670":3}}],["redis1",{"2":{"670":3,"671":1}}],["redis能够达到11w",{"2":{"652":1}}],["redis高可用",{"0":{"649":1},"1":{"650":1,"651":1,"652":1,"653":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1,"667":1,"668":1,"669":1,"670":1,"671":1,"672":1,"673":1,"674":1,"675":1}}],["redis客户端向服务器写入数据后",{"2":{"631":1}}],["redis客户端测试",{"2":{"572":1}}],["redis持久化",{"0":{"623":1},"1":{"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1,"645":1,"646":1,"647":1,"648":1}}],["redistxtest",{"2":{"622":1}}],["redistemplate",{"2":{"577":1,"603":1,"606":8,"608":1,"609":4,"611":14,"612":2,"613":1,"617":5,"622":1,"675":5,"692":2,"694":3,"696":2,"704":5,"708":4,"713":2}}],["redis事务",{"0":{"618":1,"620":1},"1":{"619":1,"620":1,"621":1,"622":1}}],["redis配置文件",{"0":{"616":1,"671":1}}],["redisoperations",{"2":{"613":3,"622":6}}],["redis服务器是否还能够写入数据",{"2":{"631":1}}],["redis服务器会fork一个子进程使用rdb机制来持久化数据",{"2":{"631":1}}],["redis服务器执行了save或者bgsave命令",{"2":{"628":1}}],["redis服务器正常停止",{"2":{"628":1}}],["redis服务器的端口号",{"2":{"595":1}}],["redis服务器的ip",{"2":{"575":1}}],["redis服务器ip",{"2":{"595":1}}],["redis所有相关配置信息都在这个配置文件中",{"2":{"587":1}}],["redis核心配置文件",{"0":{"587":1},"1":{"588":1,"589":1,"590":1,"591":1,"592":1}}],["redis读的性能",{"2":{"586":1}}],["redis写的性能",{"2":{"586":1}}],["redis默认有16个数据库",{"2":{"585":1}}],["redis官方提供的一个java操作redis的api",{"2":{"577":1}}],["redisdesktopmanager",{"2":{"576":2,"591":1}}],["redis的io多路复用",{"2":{"717":2}}],["redis的读写操作是单线程",{"2":{"717":1}}],["redis的读写都是基于内存来执行的",{"2":{"717":1}}],["redis的多路复用",{"0":{"715":1},"1":{"716":1,"717":1}}],["redis的数据是运行在内存中的",{"2":{"624":1}}],["redis的配置文件redis",{"2":{"587":1}}],["redis的五种数据类型",{"0":{"578":1},"1":{"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1}}],["redis的端口",{"2":{"575":1}}],["redis的客户端工具",{"0":{"574":1},"1":{"575":1,"576":1,"577":1}}],["redis介绍与安装",{"0":{"569":1},"1":{"570":1,"571":1,"572":1,"573":1}}],["redis实现分布式session",{"2":{"568":1}}],["redis来实现数据的缓存",{"2":{"567":1}}],["redis",{"0":{"565":1,"627":1,"635":1,"667":1,"669":1},"1":{"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1,"589":1,"590":1,"591":1,"592":1,"593":1,"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1,"611":1,"612":1,"613":1,"614":1,"615":1,"616":1,"617":1,"618":1,"619":1,"620":1,"621":1,"622":1,"623":1,"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1,"645":1,"646":1,"647":1,"648":1,"649":1,"650":1,"651":1,"652":1,"653":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1,"667":1,"668":2,"669":2,"670":3,"671":3,"672":3,"673":3,"674":3,"675":2,"676":1,"677":1,"678":1,"679":1,"680":1,"681":1,"682":1,"683":1,"684":1,"685":1,"686":1,"687":1,"688":1,"689":1,"690":1,"691":1,"692":1,"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1,"700":1,"701":1,"702":1,"703":1,"704":1,"705":1,"706":1,"707":1,"708":1,"709":1,"710":1,"711":1,"712":1,"713":1,"714":1,"715":1,"716":1,"717":1},"2":{"570":2,"572":8,"573":5,"575":3,"586":2,"587":1,"588":2,"589":2,"597":2,"598":4,"604":1,"605":1,"606":2,"611":4,"615":9,"616":1,"617":2,"625":1,"629":2,"630":1,"647":1,"650":1,"655":11,"656":2,"660":15,"664":1,"666":1,"668":4,"670":36,"671":1,"673":1,"674":2,"675":2,"696":3,"704":1,"716":4}}],["red",{"2":{"455":4,"457":4}}],["retryfailedtask",{"2":{"492":2}}],["retrytimeoutarrived",{"2":{"441":2}}],["rethrowruntimeexception",{"2":{"479":1}}],["return包装数据类型的对象时",{"2":{"330":1}}],["return",{"0":{"310":1},"2":{"57":2,"152":1,"200":1,"214":1,"230":2,"245":1,"266":1,"300":7,"310":7,"330":3,"371":4,"372":2,"377":1,"401":1,"417":2,"418":3,"422":3,"423":2,"425":3,"430":6,"431":3,"432":1,"435":5,"437":5,"438":9,"439":7,"440":1,"441":6,"442":4,"448":5,"478":1,"479":1,"483":1,"485":2,"486":1,"489":2,"490":1,"499":1,"500":1,"502":2,"504":1,"505":4,"510":2,"511":2,"512":1,"514":2,"515":2,"517":4,"597":1,"609":1,"613":1,"622":1,"692":3,"696":3,"704":1}}],["refusing",{"2":{"544":1}}],["refresh",{"2":{"503":1}}],["refresource",{"2":{"435":1}}],["referencetype",{"2":{"117":1}}],["reference",{"2":{"99":1}}],["replica",{"2":{"680":1}}],["replicas",{"2":{"673":2}}],["replication",{"2":{"656":1,"665":1}}],["replication查看当前节点的信息",{"2":{"656":1}}],["replace",{"2":{"126":1,"517":3}}],["repeat",{"2":{"330":1}}],["rejectedexecutionexception",{"2":{"265":1}}],["rejectedexecutionexception来拒绝新任务的处理",{"2":{"265":1}}],["rejectedexecutionhandler",{"2":{"265":1}}],["reentrantreadwritelock",{"2":{"225":1,"230":1,"234":1}}],["reentrantlock支持两种锁",{"2":{"232":1}}],["reentrantlock还支持公平锁和非公平锁两种方式",{"2":{"232":1}}],["reentrantlock重入锁",{"2":{"232":1}}],["reentrantlock",{"0":{"208":1,"231":1,"232":1},"1":{"232":1},"2":{"183":1,"208":7,"225":1,"234":3,"276":1,"278":1,"389":1}}],["reentrantlock类是可冲入",{"2":{"179":1}}],["reentrantlock类加锁的线程的condition类的await",{"2":{"177":1}}],["restart",{"2":{"573":1,"615":1,"655":3,"660":2,"670":6}}],["reset",{"0":{"537":1},"2":{"491":1,"534":1,"537":3}}],["resetwindowto",{"2":{"437":1}}],["responsible",{"2":{"505":1}}],["responsibility",{"2":{"62":1}}],["response",{"2":{"422":2}}],["resolvemethod",{"2":{"418":1}}],["resourcewrapper",{"2":{"425":5,"426":3,"427":4,"428":6,"429":5,"430":5,"431":14,"432":6,"435":6,"440":5}}],["resourcetypeconstants",{"2":{"422":1}}],["resourcetype",{"2":{"418":3,"425":5}}],["resourcename",{"2":{"416":1,"418":2,"422":3}}],["resources方式",{"2":{"330":1}}],["resource",{"0":{"301":1,"315":1,"317":1},"1":{"316":1,"317":1},"2":{"315":1,"425":3,"430":2,"435":5,"499":1,"502":1}}],["resource2",{"2":{"148":9,"150":9}}],["resource1",{"2":{"148":10,"150":6,"417":1}}],["resize方法是在hashmap中的键值对大于阀值时或者初始化时",{"2":{"372":1}}],["resize",{"2":{"370":1,"371":2,"372":2}}],["resultmap",{"2":{"611":3}}],["result3",{"2":{"598":3}}],["result2",{"2":{"598":3}}],["result1",{"2":{"598":3}}],["result",{"2":{"296":3,"300":3,"418":2,"438":3,"499":6,"500":2,"502":8,"511":3,"517":18,"595":3}}],["reverserangebyscorewithscores",{"2":{"611":1}}],["reverse",{"2":{"124":5}}],["readcount",{"2":{"684":2}}],["readline",{"2":{"296":1,"300":1}}],["readfile",{"2":{"296":1,"297":1,"298":2,"300":6}}],["readwritelock",{"0":{"234":1},"2":{"230":1,"234":3}}],["ready",{"2":{"170":1}}],["read",{"2":{"107":1,"297":1,"300":1,"315":1,"316":1,"317":1,"505":1,"517":1,"704":1}}],["reader",{"2":{"105":1,"296":3,"300":5}}],["程序通常在运行之前不报错",{"2":{"293":1}}],["程序本身可以捕获并且可以处理的异常",{"2":{"285":1}}],["程序中无法处理的错误",{"2":{"284":1}}],["程序中怎么保证多线程的运行安全",{"0":{"139":1,"183":1}}],["程序应该做哪种级别的同步",{"0":{"180":1}}],["程序就会在没有满足结束条件的情况下退出",{"2":{"165":1}}],["程序之间的切换会有较大的开销",{"2":{"144":1}}],["程序上下文",{"2":{"144":1}}],["程序执行的顺序按照代码的先后顺序执行",{"2":{"139":1}}],["程序返回",{"2":{"57":1}}],["程序都可以放心的使用",{"2":{"49":1}}],["程序内存更加安全",{"2":{"41":1}}],["程序运行",{"2":{"38":1}}],["程序运行流程",{"2":{"38":1}}],["程序员在开发时都应牢记这句话",{"2":{"328":1}}],["程序员可以手动执行system",{"2":{"20":1}}],["程序员不能实时的对某个对象或所有对象调用垃圾回收器进行垃圾回收",{"2":{"19":1}}],["程序员是不需要显示的去释放一个对象的内存的",{"2":{"17":1}}],["程序的可见度",{"2":{"5":1}}],["程序的过程中会把它所管理的内存区域划分为若干个不同的数据区域",{"2":{"3":1}}],["程序计数器",{"2":{"3":1}}],["5分钟内至少有10个key发生了变化",{"2":{"627":1,"629":1}}],["5672\\t",{"2":{"448":1}}],["5章节中的statisticslot部分",{"2":{"437":1}}],["5次异或运算",{"2":{"377":1}}],["507行",{"2":{"589":1}}],["500",{"2":{"435":1,"475":1,"495":1,"507":1}}],["5000毫秒内的随机数",{"2":{"506":1}}],["5000",{"2":{"266":1,"660":2}}],["50",{"2":{"353":1,"584":3,"598":1,"708":1}}],["58",{"2":{"324":1}}],["589",{"2":{"324":1}}],["54",{"2":{"266":5}}],["59",{"2":{"266":20}}],["5+中的",{"2":{"254":1}}],["5",{"0":{"6":1,"21":1,"40":1,"52":1,"53":1,"54":1,"55":1,"56":1,"73":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":2,"89":1,"119":1,"141":1,"147":1,"156":1,"163":1,"203":1,"214":1,"224":1,"241":1,"250":1,"251":1,"258":1,"266":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":2,"301":1,"307":1,"321":1,"337":1,"349":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":2,"379":1,"395":1,"429":1,"456":1,"473":1,"481":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":2,"544":1,"550":1,"583":1,"598":1,"611":1,"639":1,"640":1,"641":1,"642":1,"643":1,"645":1,"646":1,"647":1,"674":1,"686":1},"1":{"53":1,"54":1,"55":1,"56":1,"80":1,"81":1,"82":2,"83":2,"84":2,"85":2,"86":1,"87":1,"88":1,"89":1,"251":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"535":1,"536":1,"537":1,"538":1,"539":1,"640":1,"641":1,"642":1,"643":1,"644":1,"646":1,"647":1},"2":{"3":1,"46":1,"57":3,"99":1,"117":1,"120":1,"132":1,"148":4,"150":6,"152":1,"161":1,"223":1,"240":1,"245":2,"251":2,"266":6,"270":2,"290":1,"330":1,"445":1,"525":1,"560":1,"572":3,"573":1,"580":1,"584":1,"601":1,"605":1,"606":1,"609":1,"615":1,"617":1,"655":3,"660":3,"670":6,"680":1,"696":2,"714":1}}],["这10000件商品同时过期",{"2":{"701":1}}],["这10000件商品设置了相同的生存的时间",{"2":{"701":1}}],["这并不能说明这个key",{"2":{"695":1}}],["这不代表说当前redis",{"2":{"668":1}}],["这么时候会触发选举机制",{"2":{"658":1}}],["这行代码的返回值是",{"2":{"492":1}}],["这行主要是基于线程池方式",{"2":{"487":1}}],["这次跨域检测的有效期",{"2":{"409":1}}],["这比在jdk",{"2":{"377":1}}],["这意味着",{"2":{"356":1}}],["这意味着代码可能不会执行到",{"2":{"315":1}}],["这将会使分析导致异常的异常事件变得困难",{"2":{"325":1}}],["这可能是本文中最常被忽略的最佳实践",{"2":{"324":1}}],["这段代码才可以正常工作",{"2":{"315":1}}],["这段代码其实是分为三步执行",{"2":{"200":1}}],["这一系列方法调用的有序列表叫做调用栈",{"2":{"305":1}}],["这一点容易和",{"2":{"125":1}}],["这只是一种逻辑上的理解",{"2":{"270":1}}],["这代表你将丢失对这个任务的处理",{"2":{"265":1}}],["这两个map的key都是请求的参数值",{"2":{"433":1}}],["这两个类都实现了",{"2":{"353":1}}],["这两个附加的操作是",{"2":{"251":1}}],["这两种对象都是可变的",{"2":{"128":1,"129":1}}],["这n个子线程是并行执行的",{"2":{"230":1}}],["这和我们以往通过实现接口的方式有很大区别",{"2":{"230":1}}],["这几个状态会随着竞争情况逐渐升级",{"2":{"227":1}}],["这四个条件是死锁的必要条件",{"2":{"225":1}}],["这句话内部",{"2":{"214":1}}],["这必然会造成死锁",{"2":{"201":1}}],["这也是",{"2":{"716":1}}],["这也是jdk1",{"2":{"372":1}}],["这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因",{"2":{"314":1}}],["这也是为什么早期的",{"2":{"199":1}}],["这也就产生了死锁",{"2":{"148":1}}],["这通常会导致他们停止执行并需要等待获得这个对象上的锁",{"2":{"178":1}}],["这里又采用了异步执行的策略",{"2":{"505":1}}],["这里又进入了",{"2":{"438":1}}],["这里会开启对",{"2":{"505":1}}],["这里集群的初始化",{"2":{"505":1}}],["这里重新注册一个实例",{"2":{"502":1}}],["这里方法只有两行",{"2":{"487":1}}],["这里",{"2":{"483":1}}],["这里提交的信息就是nacos服务注册接口需要的完整参数",{"2":{"480":1}}],["这里使用下载3",{"2":{"471":1}}],["这里以1",{"2":{"466":1}}],["这里出现了从open到half",{"2":{"441":1}}],["这里只负责统计每个窗口的请求量",{"2":{"437":1}}],["这里只是简单提一下有这个东西",{"2":{"120":1}}],["这里有秒",{"2":{"437":1}}],["这里调用addpassrequest",{"2":{"437":1}}],["这里调用了",{"2":{"371":1}}],["这里进入了defaultnode内部",{"2":{"437":1}}],["这里对规则的判断先要通过flowrule",{"2":{"435":1}}],["这里先用",{"2":{"430":1}}],["这里是由hostreactor类的getserviceinfo",{"2":{"511":1}}],["这里是假数据",{"2":{"417":1}}],["这里是以请求路径作为判断规则",{"2":{"409":1}}],["这里我的sentinel用了8089的端口",{"2":{"417":1}}],["这里的数据类型指的是值的数据类型",{"2":{"578":1}}],["这里的healthcheckreactor",{"2":{"505":1}}],["这里的beaninfo就包含心跳需要的各种信息",{"2":{"497":1}}],["这里的",{"2":{"489":1,"490":1}}],["这里的consistencyservice接口",{"2":{"486":1}}],["这里的data是一个leaparray",{"2":{"437":1}}],["这里的flowrule就是限流规则接口",{"2":{"435":1}}],["这里的first",{"2":{"426":1}}],["这里的统计窗口时长",{"2":{"432":1}}],["这里的单机阈值",{"2":{"432":1}}],["这里的资源就是希望被sentinel保护的业务",{"2":{"413":1}}],["这里的相同指的是hashcode以及equals",{"2":{"371":1}}],["这里的a就不是a变量了",{"2":{"310":1}}],["这里的阻塞是指调用结果返回之前",{"2":{"173":1}}],["这里不是return",{"2":{"310":1}}],["这里就不贴代码了",{"2":{"265":1}}],["这里你只需要答",{"2":{"263":1}}],["这里区分一下",{"2":{"181":1}}],["这里面是与网络有关的类",{"2":{"102":1}}],["这里面是所有输入输出有关的类",{"2":{"102":1}}],["这是",{"2":{"541":1}}],["这是非常重要的",{"2":{"528":1}}],["这是非常不好的习惯",{"2":{"326":1}}],["这是因为pushreceiver本身也是一个runnable",{"2":{"514":1}}],["这是因为当使用",{"2":{"347":1}}],["这是google官方的定义",{"2":{"470":1}}],["这是一种不负责任的表现",{"2":{"330":1}}],["这是一个简单的runnable类",{"2":{"266":1}}],["这是一个非常刁钻和狡猾的问题",{"2":{"185":1}}],["这是一个封闭的盒子",{"2":{"59":1}}],["这是最正常的状态",{"2":{"256":1}}],["这是模板方法模式很经典的一个运用",{"2":{"230":1}}],["这是synchronized实现同步的基础",{"2":{"208":1}}],["这是二者的本质区别",{"2":{"208":1}}],["这是真正的多线程工作",{"2":{"155":1}}],["这是另一个非常经典的",{"2":{"155":1}}],["这是很基础的东西",{"2":{"117":1}}],["这都是一个名字",{"2":{"103":1}}],["这时工作队列模式就有了一个问题",{"2":{"451":1}}],["这时候创建自己的定制异常",{"2":{"327":1}}],["这时候另一个线程",{"2":{"223":1}}],["这时候线程",{"2":{"150":1,"223":1}}],["这时会发生什么",{"0":{"181":1}}],["这时会调用",{"2":{"95":1}}],["这时需用this来指明成员变量名",{"2":{"55":1}}],["这其中就利用到了散列码",{"2":{"95":1}}],["这就解释了",{"2":{"384":1}}],["这就会引发错误",{"2":{"270":1}}],["这就意味着java中的任何类都包含有hashcode",{"2":{"95":1}}],["这就是把任意长度的输入通过散列算法",{"2":{"374":1}}],["这就是",{"2":{"254":1}}],["这就是可重入的概念",{"2":{"230":1}}],["这就是所谓的",{"2":{"226":1}}],["这就是自旋",{"2":{"202":1}}],["这就是线程的同步",{"2":{"179":1}}],["这就是为什么这些方法是静态的",{"2":{"169":1}}],["这就是为什么正确的永久代大小对避免full",{"2":{"23":1,"24":1}}],["这就是内部类",{"2":{"80":1}}],["这就是多态性",{"2":{"61":1}}],["这就是上面提到的java的特点的编译与解释并存的解释",{"2":{"38":1}}],["这就是java中内存泄露的发生场景",{"2":{"15":1}}],["这就是我们常说的jvm的内存",{"2":{"2":1}}],["这些操作会被放到队列中",{"2":{"622":1}}],["这些操作该成功的成功",{"2":{"620":1}}],["这些概念在后面的学习中会经常提到",{"2":{"532":1}}],["这些算法通常是多态的",{"2":{"333":1}}],["这些情况",{"2":{"330":1}}],["这些错误是不受检异常",{"2":{"284":1}}],["这些关键字",{"2":{"251":1}}],["这些方法获取当前多个线程的状态",{"2":{"274":1}}],["这些方法的实现必须是内部线程安全的",{"2":{"230":1}}],["这些方法在同步代码块中调用",{"2":{"166":1}}],["这些重写方法很简单",{"2":{"230":1}}],["这些条件必然成立",{"2":{"225":1}}],["这些永远在互相等待的进程",{"2":{"148":1}}],["这些类看上去很杂乱",{"2":{"105":1}}],["这些变量和方法不属于任何一个实例对象",{"2":{"56":1}}],["这些区域都有各自的用途",{"2":{"3":1}}],["这个新闻就是执点数据",{"2":{"698":1}}],["这个新闻上热搜了",{"2":{"698":1}}],["这个概率就会降低",{"2":{"695":1}}],["这个概率就会很大",{"2":{"695":1}}],["这个操作一旦频繁",{"2":{"678":1}}],["这个hash环会分配16384个槽位",{"2":{"668":1}}],["这个网卡是用来跟主从架构进行通信",{"2":{"660":1}}],["这个就是触发rdb机制保存数据的文件",{"2":{"630":1}}],["这个过程被称为叫持久化",{"2":{"624":1}}],["这个过程就属于一次上下文切换",{"2":{"145":1}}],["这个模板对象是专门用来操作字符串的",{"2":{"610":1}}],["这个模式是为每一个消费者都创建了一个独属于自己的队列",{"2":{"452":1}}],["这个接口也有很多实现",{"2":{"505":1}}],["这个会进入service类中",{"2":{"505":1}}],["这个会成为判断实例心跳是否过期的关键指标",{"2":{"503":1}}],["这个地址就是",{"2":{"500":1}}],["这个包中找到nacos自动装配信息",{"2":{"477":1}}],["这个包里面提供了一组原子类",{"2":{"270":1}}],["这个和路由模式大同小异",{"2":{"456":1}}],["这个用来辨别发送给哪一个队列",{"2":{"454":1}}],["这个slot完成了这么几件事情",{"2":{"427":1}}],["这个节点是在初始化context的时候由sentinel帮我们创建的",{"2":{"419":1}}],["这个类会以udp方式接收nacos服务端推送的服务变更数据",{"2":{"514":1}}],["这个类不仅仅提供了服务注册功能",{"2":{"510":1}}],["这个类维护了一个线程池",{"2":{"492":1}}],["这个类实现了webmvcconfigurer",{"2":{"421":1}}],["这个类基于责任链模式来设计",{"2":{"414":1}}],["这个类在java",{"2":{"229":1}}],["这个算法应该如何设计呢",{"2":{"384":1}}],["这个实现就是把数据存到哪个链表",{"2":{"384":1}}],["这个实现是和操作系统相关的",{"2":{"184":1}}],["这个结点是放在数组中",{"2":{"371":1}}],["这个处理逻辑看着是合理的",{"2":{"324":1}}],["这个返回路径就形成了",{"2":{"310":1}}],["这个返回值可以被",{"2":{"156":1}}],["这个工具通常用来控制线程等待",{"2":{"278":1}}],["这个工具看",{"2":{"147":1}}],["这个时候",{"2":{"686":2}}],["这个时候会把这个节点踢出hash环",{"2":{"668":1}}],["这个时候就出现了线程安全问题",{"2":{"686":1}}],["这个时候就是通过该偏移量来决定是哪些数据开始进行增量复制",{"2":{"653":1}}],["这个时候就可能会产生内存泄露",{"2":{"248":1}}],["这个时候就可以用锁",{"2":{"223":1}}],["这个时候主节点才有可能会去执行读请求",{"2":{"652":1}}],["这个时候在扩容的同时也会伴随的桶上面的元素进行重新分发",{"2":{"372":1}}],["这个时候请抽取",{"2":{"330":1}}],["这个时候两个线程就都达到了同步点",{"2":{"277":1}}],["这个方法",{"2":{"425":1}}],["这个方法会创建一个异常对象",{"2":{"305":1}}],["这个方法是用来拿到",{"2":{"271":1}}],["这个方法交换的是这两个拷贝",{"2":{"99":1}}],["这个直接查看",{"2":{"265":1}}],["这个策略喜欢增加队列容量",{"2":{"265":1}}],["这个线程池只有一个线程在工作",{"2":{"254":1}}],["这个线程必须拥有该对象的锁",{"2":{"167":1}}],["这个代价实在太高昂了",{"2":{"243":1}}],["这个机制aqs是用clh队列锁实现的",{"2":{"230":1}}],["这个主要是防止在同步代码块中线程因异常退出",{"2":{"201":1}}],["这个主类是一个继承自系统类japplet或applet的子类",{"2":{"39":1}}],["这个主类是指包含main",{"2":{"39":1}}],["这个状态之间的转换需要相对比较长的时间",{"2":{"199":1}}],["这个对象将是被可回收的",{"2":{"192":1}}],["这个对象就可以被回收了",{"2":{"23":1}}],["这个限制值将随着平台的不同而不同",{"2":{"188":1}}],["这个条件我们没有办法破坏",{"2":{"150":1}}],["这个是事件监听器接口",{"2":{"518":1}}],["这个是在flowrule中调用的",{"2":{"436":1}}],["这个是在statisticslot中调用的",{"2":{"436":1}}],["这个是怎么实现的呢",{"2":{"418":1}}],["这个是数据库操作的类",{"2":{"102":1}}],["这个是系统辅助类",{"2":{"102":1}}],["这个是系统的基础类",{"2":{"102":1}}],["这个哈希码的作用是确定该对象在哈希表中的索引位置",{"2":{"95":1}}],["这种其实也是通过bgsave实现的",{"2":{"632":1}}],["这种方法适用于数据命中不高",{"2":{"695":1}}],["这种方案称为copyonwrite方案",{"2":{"484":1}}],["这种方式相对比较慢",{"2":{"391":1}}],["这种情况不应该存在",{"2":{"437":1}}],["这种转换是一种压缩映射",{"2":{"374":1}}],["这种异常又分为两类",{"2":{"285":1}}],["这种操作分分钟引起故障",{"2":{"243":1}}],["这种划分是使用并发度获得的",{"2":{"238":1}}],["这种互相通信的过程就是线程间的协作",{"2":{"177":1}}],["这种设计并不是不能实现",{"2":{"166":1}}],["这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制",{"2":{"109":1}}],["这种模型是比较不错的",{"2":{"106":1}}],["这种理解是不对的",{"2":{"99":1}}],["这种供虚拟机理解的代码叫做字节码",{"2":{"38":1}}],["这种垃圾回收器非常适合",{"2":{"31":1}}],["这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口",{"2":{"38":1}}],["这样不同链路入口的请求",{"2":{"427":1}}],["这样不同链路进入相同资源",{"2":{"427":1}}],["这样只要hash不冲突",{"2":{"389":1}}],["这样虽然能更快但可能会导致更多的hash碰撞",{"2":{"382":1}}],["这样我们就可以将拥有相同哈希值的对象组织成一个链表放在hash值所对应的bucket下",{"2":{"376":1}}],["这样我们就大大减少了",{"2":{"95":1}}],["这样既加快了序列化的速度",{"2":{"356":1}}],["这样改变集合的任何操作都会抛出",{"2":{"342":1}}],["这样无论是打印到日志中还是在监控工具中",{"2":{"320":1}}],["这样你的",{"2":{"318":1}}],["这样的键只有一个",{"2":{"385":1}}],["这样的处理方式让写的同学更加明确线程池的运行规则",{"2":{"262":1}}],["这样的组织结构有点类似于树的形式",{"2":{"260":1}}],["这样能获得更好的性能",{"2":{"254":1}}],["这样一来是比取余操作更加有效率",{"2":{"383":1}}],["这样一来",{"2":{"248":1}}],["这样在更新列表状态过程中",{"2":{"484":1}}],["这样在多线程情况下就能避免争用",{"2":{"238":1}}],["这样在分配的时候可以从列表中查询到足够大的内存分配给对象",{"2":{"9":1}}],["这样才能保证state是能回到零态的",{"2":{"230":1}}],["这样可以添加更为具体的异常信息并能够做针对的异常处理",{"2":{"325":1}}],["这样可以提高吞吐量",{"2":{"221":1}}],["这样可能是一种更好的策略",{"2":{"202":1}}],["这样别人想拿这个数据就会阻塞直到它拿到锁",{"2":{"221":1}}],["这样从侧面来说也可以避免死锁",{"2":{"178":1}}],["这样做有一个非常大的问题",{"2":{"166":1}}],["这样就构成了调用链路树",{"2":{"427":1}}],["这样就是加大哈希值低位的随机性",{"2":{"384":1}}],["这样就会解决与可变相关的问题了",{"2":{"380":1}}],["这样就可以保证每个线程的都在各自的",{"2":{"245":1}}],["这样就只能通过同步来实现",{"2":{"167":1}}],["这样就破坏了破坏循环等待条件",{"2":{"150":1}}],["这样就大大提高了程序的效率",{"2":{"141":1}}],["这样彼此就会产生矛盾",{"2":{"66":1}}],["这样",{"2":{"61":1,"186":1,"214":1,"241":2,"380":1,"451":1}}],["这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为",{"2":{"60":1}}],["这样会有较多的复制操作",{"2":{"28":1}}],["这样便完成分配内存工作",{"2":{"9":1}}],["2小节的servicemanager类中的registerinstance方法",{"2":{"505":1}}],["2的consistency模块下的src",{"2":{"472":1}}],["2版本的nacos源码为例",{"2":{"466":1}}],["2个小时间窗",{"2":{"437":1}}],["2次扰动",{"2":{"377":1}}],["29",{"0":{"187":1}}],["28",{"0":{"186":1},"2":{"324":1}}],["27",{"0":{"185":1}}],["26381",{"2":{"660":1}}],["26380",{"2":{"660":1}}],["26379",{"2":{"660":6}}],["263行",{"0":{"627":1}}],["26",{"0":{"184":1}}],["253",{"2":{"696":2}}],["2533",{"2":{"502":1}}],["25",{"0":{"183":1},"2":{"449":1,"581":1}}],["24",{"0":{"182":1}}],["23",{"0":{"181":1}}],["22",{"0":{"180":1}}],["21",{"0":{"179":1},"2":{"660":1,"692":1}}],["2010222001103",{"2":{"688":2}}],["2010222001102",{"2":{"688":3}}],["2010222001101",{"2":{"688":1}}],["2019",{"2":{"266":20}}],["20220409151031693",{"2":{"688":1}}],["20220406145952907",{"2":{"572":1}}],["2022",{"2":{"597":1,"598":1,"704":1}}],["2000",{"2":{"617":1}}],["200",{"2":{"475":1,"495":1,"507":1}}],["20",{"0":{"178":1},"2":{"99":3,"266":20,"310":2,"580":2,"581":1,"584":2}}],["2",{"0":{"3":1,"9":1,"13":1,"18":1,"27":1,"37":1,"46":1,"49":1,"54":1,"60":1,"61":1,"62":2,"65":1,"70":1,"81":1,"82":1,"83":2,"84":1,"85":1,"92":1,"95":1,"99":1,"103":1,"106":1,"110":1,"116":1,"132":1,"138":1,"142":1,"143":1,"144":2,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"153":1,"160":1,"192":1,"194":1,"195":1,"196":2,"200":1,"209":1,"210":1,"211":2,"212":1,"213":1,"214":1,"215":1,"221":1,"228":1,"229":1,"230":2,"238":1,"242":1,"243":1,"246":1,"249":1,"255":1,"261":1,"262":1,"263":2,"264":1,"265":1,"266":1,"271":1,"275":1,"276":1,"277":2,"278":1,"282":1,"283":1,"284":2,"285":1,"286":1,"287":2,"288":1,"292":1,"297":1,"304":1,"317":1,"318":1,"334":1,"346":1,"358":1,"359":1,"360":2,"361":1,"364":1,"367":1,"368":1,"369":2,"370":1,"375":1,"392":1,"404":1,"408":1,"415":1,"418":1,"421":1,"422":2,"423":1,"425":1,"426":2,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":2,"437":2,"438":3,"439":1,"440":1,"441":1,"442":2,"450":1,"460":1,"467":1,"471":1,"476":1,"477":1,"478":2,"479":1,"480":1,"481":1,"484":1,"492":1,"498":1,"501":1,"502":1,"503":2,"511":1,"513":1,"514":1,"515":2,"516":1,"517":1,"518":2,"523":1,"526":1,"529":1,"530":1,"531":2,"536":1,"542":1,"547":1,"563":1,"568":1,"571":1,"572":1,"573":2,"576":1,"580":1,"590":1,"595":1,"601":1,"605":1,"609":1,"616":1,"620":1,"625":1,"628":1,"631":1,"636":1,"641":1,"647":1,"651":1,"652":1,"653":2,"654":1,"655":1,"656":2,"659":1,"660":1,"661":2,"662":1,"665":1,"669":1,"670":1,"671":2,"672":1,"673":1,"674":1,"678":1,"683":1,"693":1,"694":1,"695":2,"696":1,"697":1,"698":1,"699":2,"702":1,"705":1,"706":1,"707":2,"708":2,"709":3,"710":1,"713":1,"717":1},"1":{"61":1,"62":1,"82":1,"83":1,"84":1,"85":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"195":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"229":1,"230":1,"243":1,"262":1,"263":1,"264":1,"265":1,"266":1,"276":1,"277":1,"278":1,"283":1,"284":1,"285":1,"286":2,"287":2,"288":1,"359":1,"360":1,"361":1,"368":1,"369":1,"370":1,"422":1,"423":1,"433":1,"435":1,"436":1,"437":3,"438":3,"439":1,"441":1,"442":1,"451":1,"477":1,"478":1,"479":1,"480":1,"481":1,"485":1,"486":1,"502":1,"503":1,"504":1,"505":1,"514":1,"515":1,"517":1,"518":1,"530":1,"531":1,"572":1,"573":1,"652":1,"653":1,"654":1,"655":2,"656":2,"660":1,"661":1,"662":1,"670":1,"671":1,"672":1,"673":1,"674":1,"694":1,"695":1,"696":1,"698":1,"699":1,"706":1,"707":1,"708":3,"709":3,"710":3},"2":{"33":1,"51":1,"57":2,"84":1,"99":2,"106":2,"111":1,"112":1,"148":5,"150":7,"161":1,"163":1,"170":1,"177":1,"181":1,"185":1,"193":1,"200":1,"204":1,"206":1,"214":2,"220":1,"221":1,"223":1,"225":1,"226":1,"232":2,"234":1,"245":5,"254":1,"266":4,"330":2,"366":1,"379":1,"383":2,"417":2,"421":1,"435":1,"437":3,"445":1,"448":1,"451":1,"453":1,"455":1,"457":1,"477":2,"484":2,"487":1,"496":1,"500":1,"505":1,"510":3,"525":1,"533":1,"560":1,"582":1,"583":1,"584":6,"585":1,"643":6,"660":6,"688":2,"696":2,"714":2}}],["首先对key进行hash",{"2":{"668":1}}],["首先需要获得git仓库",{"2":{"529":1}}],["首先需要判定的就是哪些内存是需要被回收的",{"2":{"22":1}}],["首先将old实例列表拷贝一份",{"2":{"494":1}}],["首先将数据分为一段一段的存储",{"2":{"389":1}}],["首先最外层是一个map",{"2":{"474":1}}],["首先在order",{"2":{"417":1}}],["首先在局部范围找",{"2":{"69":1}}],["首先计算",{"2":{"371":1}}],["首先创建一个",{"2":{"266":1}}],["首先明确一下",{"2":{"234":1}}],["首先synchronized是java内置关键字",{"2":{"207":1}}],["首先要获取锁",{"2":{"201":1}}],["首先",{"2":{"174":1,"425":1,"476":1,"494":1}}],["首先必须处于就绪状态中",{"2":{"159":1}}],["首先获得到",{"2":{"150":1}}],["首先回顾一下在程序设计语言中有关将参数传递给方法",{"2":{"99":1}}],["首先让我们看看",{"2":{"8":1}}],["首先利用ide集成开发工具编写java源代码",{"2":{"2":1}}],["首先通过编译器把",{"2":{"2":1}}],["来隔开",{"2":{"456":1}}],["来表示任意字符串",{"2":{"456":1}}],["来看看handle方法",{"2":{"490":1}}],["来看看data",{"2":{"438":1}}],["来看阈值判断的方法",{"2":{"442":1}}],["来看下其中的run方法",{"2":{"490":1}}],["来看下systemrulemanager",{"2":{"431":1}}],["来看下我们引入的sentinel依赖包",{"2":{"418":1,"421":1}}],["来源为空",{"2":{"430":1}}],["来源计数器也都要",{"2":{"429":1}}],["来源名称",{"2":{"420":1}}],["来源控制",{"2":{"414":1,"429":1}}],["来源信息等",{"2":{"414":1,"429":1}}],["来操作",{"2":{"388":1}}],["来降低哈希冲突的概率",{"2":{"379":1}}],["来链接拥有相同hash值的数据",{"2":{"379":1}}],["来遍历该",{"2":{"347":1}}],["来保证线程安全",{"2":{"388":1}}],["来保证并发安全性",{"2":{"237":1}}],["来保存元素",{"2":{"339":1}}],["来替换一个",{"2":{"318":1}}],["来处理该异常",{"2":{"290":1}}],["来处理多线程的问题",{"2":{"182":1}}],["来累加来反映中间有没有变过",{"2":{"270":1}}],["来拒绝新来的任务",{"2":{"265":1}}],["来满足业务的需求",{"2":{"258":1}}],["来解决并发冲突",{"2":{"243":1}}],["来解决",{"2":{"223":1}}],["来给我手写一下",{"2":{"200":1}}],["来实现线程同步",{"2":{"353":1}}],["来实现同步的容器",{"2":{"239":1}}],["来实现锁的分配",{"2":{"230":1}}],["来实现的",{"2":{"199":1,"339":1}}],["来实现整个程序的功能",{"2":{"2":1}}],["来查询线程的",{"2":{"187":1}}],["来获取数组下标的方式进行存储",{"2":{"383":1}}],["来获取数据",{"2":{"222":1}}],["来获取",{"2":{"186":2}}],["来完成其运行状态",{"2":{"154":1}}],["来完成其操作的",{"2":{"154":1}}],["来完成的",{"2":{"2":1}}],["来确定",{"2":{"127":1}}],["来定义",{"2":{"118":1}}],["来说",{"2":{"106":1}}],["来调用父类中特定的构造方法",{"2":{"70":1}}],["来调用父类特定的构造方法",{"2":{"70":1}}],["来启动",{"2":{"40":1}}],["来指定使用",{"2":{"31":1}}],["来选取下一条需要执行的字节码指令",{"2":{"3":1}}],["来装载class文件到runtime",{"2":{"2":1}}],["而直达数据库",{"2":{"698":1,"701":1}}],["而直接执行",{"2":{"155":1}}],["而开源一个通过配置文件来进行容器的编排与部署的组件",{"2":{"562":1}}],["而没有主动检测功能",{"2":{"506":1}}],["而eureka不支持",{"2":{"506":1}}],["而execute",{"2":{"259":1}}],["而对于服务的一些常备实例",{"2":{"506":1}}],["而对象引用作为参数就不一样",{"2":{"99":1}}],["而tcpsupersenseprocessor本身就是一个runnable",{"2":{"505":1}}],["而trafficshapingcontroller有3种实现",{"2":{"435":1}}],["而beatreactor这个类则维护了一个线程池",{"2":{"498":1}}],["而永久实例则是由nacos主动探测实例状态",{"2":{"495":1}}],["而其中的registerinstance方法就是注册服务实例的方法",{"2":{"484":1}}],["而其它线程都失败",{"2":{"221":1}}],["而namingservice接口的默认实现就是nacosnamingservice",{"2":{"479":1}}],["而nacosserviceregistry对register的实现如下",{"2":{"479":1}}],["而nodeselectslot的next一定是clusterbuilderslot",{"2":{"426":1}}],["而真正发起调用时只需要知道一个实例的地址",{"2":{"465":1}}],["而代理则作为拍卖行负责双方的交易达成",{"2":{"444":1}}],["而circuitbreaker有两个实现",{"2":{"442":1}}],["而context的初始化就是在这里完成的",{"2":{"421":1,"422":1}}],["而cycliclatch是可以复用的",{"2":{"274":1}}],["而cyclicbarrier提供的方法更多",{"2":{"274":1}}],["而cyclicbarrier一般用于一组线程互相等待至某个状态",{"2":{"274":1}}],["而serverproxy的querylist方法如下",{"2":{"512":1}}],["而service中有一个init方法",{"2":{"504":1}}],["而serviceregistry接口是服务注册",{"2":{"479":1}}],["而sentinel基于aop思想",{"2":{"418":1}}],["而string的equals方法比较的是对象的值",{"2":{"94":1}}],["而树的入口节点叫entrancenode",{"2":{"415":1}}],["而hashmap没有锁机制",{"2":{"387":1}}],["而hashmap的容量范围是在16",{"2":{"383":1}}],["而应用内部推荐异常抛出",{"2":{"330":1}}],["而此时由于异常被捕获",{"2":{"323":1}}],["而团队之间的这些规范往往是截然不同的",{"2":{"314":1}}],["而该类实现了initializingbean接口",{"2":{"608":1}}],["而该类是一个抽象类或接口时",{"2":{"313":1}}],["而该索引值小于0或大于等于序列大小时",{"2":{"313":1}}],["而该字符串确不满足数字类型要求的格式时",{"2":{"313":1}}],["而运行时异常在编译时没有如此规定",{"2":{"309":1}}],["而运行时多态是动态的",{"2":{"61":1}}],["而调用cyclicbarrier的await方法",{"2":{"274":1}}],["而未成功的线程可以向自旋锁一样",{"2":{"271":1}}],["而别的线程就像自旋锁一样",{"2":{"270":1}}],["而消费者也只从容器里拿元素",{"2":{"251":1}}],["而源数组将保留在原地",{"2":{"243":1}}],["而写线程也可以并发的完成改变",{"2":{"241":1}}],["而采用了",{"2":{"237":1}}],["而读写锁有以下三个重要的特性",{"2":{"234":1}}],["而这些实例在双十一之后就无需继续使用了",{"2":{"506":1}}],["而这些模板方法会调用使用者重写的方法",{"2":{"230":1}}],["而这里创建的是其实现类",{"2":{"425":1}}],["而这个过程中需要调用其他语言的本地库接口",{"2":{"2":1}}],["而处于死锁的实体表现为等待",{"2":{"226":1}}],["而只要上述条件之",{"2":{"225":1}}],["而发生的阻塞现象",{"2":{"224":1}}],["而乐观锁采取了一种宽泛的态度",{"2":{"222":1}}],["而锁没有得到释放",{"2":{"201":1}}],["而获取锁的过程就是monitorenter",{"2":{"201":1}}],["而访问非静态",{"2":{"200":1}}],["而线程池的线程数量为1",{"2":{"494":1}}],["而线程b需要调用这个实例对象所属类的静态",{"2":{"200":1}}],["而线程是处理器任务调度和执行的基本单位",{"2":{"144":1}}],["而操作系统实现线程之间的切换时需要从用户态转换到内核态",{"2":{"199":1}}],["而用户模式就是不需要切换到内核态",{"2":{"179":1}}],["而执行",{"2":{"170":1}}],["而守护线程不会影响",{"2":{"146":1}}],["而一个",{"2":{"145":1}}],["而进程之间的地址空间和资源是相互独立的",{"2":{"144":1}}],["而把传统的进程称为重型进程",{"2":{"144":1}}],["而并发编程更能吻合这种业务拆分",{"2":{"137":1}}],["而多线程并发编程正是开发高并发系统的基础",{"2":{"137":1}}],["而按引用调用",{"2":{"99":1}}],["而后者实现的是运行时的多态性",{"2":{"92":1}}],["而局部内部类对局部变量的引用依然存在",{"2":{"88":1}}],["而实例方法只有后面这种方式",{"2":{"76":1}}],["而非静态变量是对象所拥有的",{"2":{"75":1}}],["而在service的onchange方法中",{"2":{"491":1}}],["而在更新过程中",{"2":{"484":1}}],["而在同步代码块中",{"2":{"484":1}}],["而在nacosnamingservice的registerinstance方法中",{"2":{"480":1}}],["而在degradeslot的exit方法中",{"2":{"442":1}}],["而在了解哈希冲突之前我们还要知道什么是哈希才行",{"2":{"373":1}}],["而在插入和删除操作较多时",{"2":{"352":1}}],["而在遍历classpah之后找不到对应名称的class文件时",{"2":{"313":1}}],["而在",{"2":{"251":1}}],["而在等待的期间内",{"2":{"177":1}}],["而在子类的构造方法中又没有用super",{"2":{"70":1}}],["而在java小程序中",{"2":{"39":1}}],["而不能修改传递值调用所对应的变量值",{"2":{"99":1}}],["而不能说你是哪个村子的",{"2":{"62":1}}],["而不可访问外部类的非静态变量",{"2":{"82":1}}],["而不允许访问实例成员变量和实例方法",{"2":{"76":1}}],["而不是立即执行了",{"2":{"505":1}}],["而不是简单的修改集合元素的内容",{"2":{"341":1}}],["而不是为了让程序能正常运转而将注意力于低层设计上",{"2":{"333":1}}],["而不是",{"2":{"245":1}}],["而不是整个数组",{"2":{"211":1}}],["而不是多线程的",{"2":{"154":1}}],["而不是生成新的对象并改变对象引用",{"2":{"128":1,"129":1}}],["而不是你是xx村的",{"2":{"62":1}}],["而不是引用指向的内容",{"2":{"53":1}}],["而方法重写",{"2":{"60":1}}],["而object类是所有类的父类",{"2":{"54":1,"307":1}}],["而openjdk根据gpl",{"2":{"42":1}}],["而openjdk版本每三个月发布一次",{"2":{"42":1}}],["而oracle",{"2":{"42":1}}],["而且jdk8中用了复杂度",{"2":{"371":1}}],["而且大部分事情都是为了改善代码的可读性或者",{"2":{"329":1}}],["而且大量的线程在竞争",{"2":{"188":1}}],["而且无限制的创建线程会引起应用程序内存溢出",{"2":{"257":1}}],["而且是乐观锁",{"2":{"222":1}}],["而且与优先级无关",{"2":{"163":1}}],["而且在面试中会经常被问到",{"2":{"155":1}}],["而且并发编程可能会遇到很多问题",{"2":{"138":1}}],["而且彼此之间存在非常紧密的联系",{"2":{"105":1}}],["而且只在类第一次使用时加载并进行初始化",{"2":{"56":1}}],["而且",{"2":{"38":1,"315":1}}],["而前六种收集器回收的范围仅限于新生代或老年代",{"2":{"30":1}}],["而是本地创建的仓库",{"2":{"544":1}}],["而是立刻再次拉取一条消息",{"2":{"451":1}}],["而是继续执行finally块中的语句",{"2":{"330":1}}],["而是常量30",{"2":{"310":1}}],["而是",{"2":{"310":1}}],["而是记录下返回值待",{"2":{"310":1}}],["而是直接用",{"2":{"388":1}}],["而是直接使用系统提供的异常类",{"2":{"287":1}}],["而是直接引用常量池中的integer对象",{"2":{"133":1}}],["而是会等待",{"2":{"264":1}}],["而是通过",{"2":{"262":1}}],["而是作为线程同步的的工具",{"2":{"251":1}}],["而是启用了一种全新的方式实现",{"2":{"238":1}}],["而是被告知这次竞争中失败",{"2":{"221":1}}],["而是被类的实例对象所共享",{"2":{"56":1}}],["而是保证了在一个写操作",{"2":{"214":1}}],["而是在",{"2":{"202":1}}],["而是在下一次垃圾回收时才会释放其占用的内存",{"2":{"192":1}}],["而是在程序运行期间才确定",{"2":{"61":1}}],["而是让它们竞争",{"2":{"163":1}}],["而是由",{"2":{"163":1}}],["而是由虚拟机自行执行",{"2":{"17":1}}],["而是多条线",{"2":{"144":1}}],["而是指向对象的指针",{"2":{"11":1}}],["而引用本身不需要修改",{"2":{"12":1}}],["而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息",{"2":{"12":1}}],["而",{"2":{"9":1,"48":1,"122":1,"154":1,"155":1,"156":1,"170":1,"175":1,"185":1,"207":3,"208":2,"212":1,"215":1,"248":2,"348":2,"352":1,"353":2,"364":1,"385":1,"391":1}}],["而空闲的的放在另一边",{"2":{"9":1}}],["而最先插入的被放在栈的底部",{"2":{"6":1}}],["而栈为后进先出",{"2":{"6":1}}],["而栈的进栈和出栈都是在栈顶进行的",{"2":{"6":1}}],["而本地方法栈是为虚拟机调用",{"2":{"3":1}}],["而字节码文件只是",{"2":{"2":1}}],["c关注的人",{"2":{"689":1}}],["cc",{"2":{"583":3,"598":2}}],["cd",{"2":{"572":2,"573":1}}],["cn",{"2":{"570":1}}],["cvs",{"2":{"522":1}}],["cb",{"2":{"440":4}}],["circuitbreakers",{"2":{"440":4}}],["circuitbreaker>",{"2":{"440":1}}],["circuitbreaker",{"0":{"441":1},"2":{"440":2}}],["ctentry",{"2":{"425":1}}],["ctrl",{"2":{"186":1}}],["curcount",{"2":{"438":3,"442":4}}],["curthreadnum",{"2":{"431":1,"438":1}}],["currentinstanceids",{"2":{"485":3}}],["currentinstances",{"2":{"485":3}}],["currentips",{"2":{"485":3}}],["currentstate",{"2":{"441":4,"442":2}}],["currenttimemillis",{"2":{"438":1,"439":3,"441":1,"491":1,"503":1,"504":2,"505":3,"517":1,"602":4,"613":2}}],["currenttime",{"2":{"438":4,"439":3}}],["currentthread",{"2":{"148":6,"150":3,"152":7,"245":1,"266":2,"431":3}}],["currentwindow",{"2":{"437":3,"438":1,"442":1}}],["currentqps",{"2":{"431":2}}],["curnode",{"2":{"420":1}}],["cset",{"2":{"689":3}}],["csp",{"2":{"418":1}}],["cst",{"2":{"266":20}}],["cyclic",{"2":{"278":1}}],["cyclicbarrier默认的构造方法是",{"2":{"278":1}}],["cyclicbarrier是多个线程互等",{"2":{"274":1}}],["cyclicbarrier",{"2":{"230":1,"278":5}}],["cyclibarriar",{"0":{"274":1}}],["creating",{"2":{"505":1}}],["createemptyarraynode",{"2":{"517":1}}],["createemptyjsonnode",{"2":{"502":1,"517":1}}],["createemptyservice",{"2":{"484":1,"505":1}}],["create",{"2":{"485":1,"491":1,"560":1,"673":2,"696":1}}],["createserviceifabsent",{"2":{"505":2}}],["creates",{"2":{"484":1}}],["createdirectory",{"2":{"107":1}}],["createfile",{"2":{"107":1}}],["credentials",{"2":{"410":1}}],["crossorigin",{"2":{"408":1}}],["craig",{"2":{"230":1}}],["child中",{"2":{"427":1}}],["checkout",{"2":{"545":1,"548":1}}],["check",{"2":{"505":1}}],["checktask",{"2":{"505":3}}],["checksum",{"2":{"517":1}}],["checkservicenameformat",{"2":{"483":1,"502":1,"517":1}}],["checksystemstatus",{"2":{"431":1}}],["checksystem",{"2":{"431":3}}],["checkinstanceislegal",{"2":{"480":1,"496":1}}],["checking",{"2":{"414":1,"431":1}}],["checker",{"2":{"435":1}}],["checker是",{"2":{"435":1}}],["checked",{"2":{"288":1,"330":1,"418":1}}],["checkflow方法",{"2":{"435":1}}],["checkflow",{"2":{"432":1,"435":4}}],["checkbbr",{"2":{"431":1}}],["checkblackwhiteauthority",{"2":{"430":2}}],["checkparam",{"2":{"330":1}}],["checkreturn",{"2":{"330":1}}],["check这种可能出现的问题",{"2":{"214":1}}],["chain",{"2":{"425":4,"435":1}}],["channel",{"2":{"106":2,"505":11}}],["changed",{"2":{"491":1,"515":2}}],["change",{"2":{"99":2,"487":1,"489":3,"490":2}}],["charat",{"2":{"126":1}}],["character",{"2":{"119":1,"132":1}}],["chars",{"2":{"117":1}}],["char",{"2":{"45":1,"46":1,"117":6,"119":1,"120":2,"128":2,"129":2,"132":1}}],["c++和pascal",{"2":{"99":1}}],["c++支持多重继承",{"2":{"41":1}}],["c",{"2":{"84":2,"133":3,"201":1,"234":1,"301":1,"310":1,"342":1,"572":1,"611":1,"674":2,"689":4}}],["cluster搭建",{"0":{"669":1},"1":{"670":1,"671":1,"672":1,"673":1,"674":1}}],["cluster只能存储16384个数据",{"2":{"668":1}}],["cluster是一个无中心的集群",{"2":{"668":1}}],["cluster会自动进行主从节点的分配和槽位数量的分配",{"2":{"673":1}}],["cluster会对插入数据的key进行hash运算",{"2":{"668":1}}],["cluster会根据redis节点的数量尽量平均的把16384个槽位分配给每个redis主节点",{"2":{"668":1}}],["cluster会形成一个一致性hash环",{"2":{"668":1}}],["cluster时",{"2":{"668":1}}],["clusters",{"2":{"507":1,"510":3,"511":13,"512":3,"517":9,"518":1}}],["cluster>",{"2":{"504":1,"505":1}}],["cluster内部维护一个set集合",{"2":{"494":1}}],["clusterips",{"2":{"491":5}}],["clustermap",{"2":{"491":6,"504":1,"505":1}}],["clustername",{"2":{"475":1,"491":2,"502":7,"503":2}}],["clusternode计数器",{"2":{"429":1}}],["clusternode关联",{"2":{"428":1}}],["clusternodemap",{"2":{"428":3}}],["clusternode>",{"2":{"428":1}}],["clusternode记录的是资源在所有链路中的访问数据",{"2":{"415":1}}],["clusternode",{"2":{"415":1,"428":6,"429":1,"434":1}}],["clusternode可以保存资源的运行信息",{"2":{"414":1}}],["cluster类型",{"2":{"474":1}}],["cluster",{"0":{"667":1,"673":1},"1":{"668":1,"669":1,"670":1,"671":1,"672":1,"673":1,"674":1,"675":1},"2":{"428":1,"474":1,"479":1,"480":2,"484":1,"485":7,"491":10,"494":1,"500":1,"502":2,"503":5,"505":13,"650":1,"669":1,"671":5,"672":1,"673":4,"675":1}}],["clusterbuilderslot负责构建某个资源的clusternode",{"2":{"428":1}}],["clusterbuilderslot",{"0":{"428":1},"2":{"414":1}}],["cli",{"2":{"572":1,"575":3,"656":1,"673":1,"674":2}}],["clients",{"2":{"595":1,"597":2,"598":4}}],["clienttype",{"2":{"517":1}}],["clientinfo",{"2":{"517":7}}],["clientip",{"2":{"512":1,"517":6,"518":1}}],["clientbeatchecktask",{"2":{"504":1,"505":1}}],["clientbeatprocessor类中",{"2":{"503":1}}],["clientbeatprocessor",{"2":{"503":6}}],["clientbeat",{"2":{"502":22,"503":1}}],["clientbeatinterval",{"2":{"499":1}}],["client接口",{"2":{"405":1}}],["client",{"2":{"404":1,"479":1,"499":2,"502":4,"503":3,"504":1,"517":1}}],["client为写的client接口包路径",{"2":{"404":1}}],["clist",{"2":{"342":2}}],["clone",{"2":{"531":1,"540":2}}],["cloneable",{"2":{"356":1}}],["cloud的声明式rest客户端",{"2":{"400":1}}],["cloud",{"2":{"400":2,"403":4,"409":4,"417":3,"465":3,"467":2,"477":1,"495":1}}],["closed",{"2":{"441":1,"442":1,"514":2}}],["closeresourceinfinally",{"2":{"316":1}}],["close",{"2":{"62":1,"296":1,"300":1,"301":4,"315":1,"316":1,"505":2,"596":1,"597":1,"598":5,"600":1,"601":1,"602":2}}],["clh",{"2":{"230":1}}],["classs使用feignconfig类的配置",{"2":{"405":1}}],["classcastexception",{"2":{"312":1,"313":1}}],["classcastexception类型转换异常",{"2":{"286":1}}],["classes",{"0":{"270":1}}],["classobj3",{"2":{"112":2}}],["classobj2",{"2":{"112":2}}],["classobj1",{"2":{"112":2}}],["classnotfoundexception",{"0":{"308":1},"2":{"112":1,"287":1,"308":1,"313":1}}],["class的文件",{"2":{"38":2}}],["class对象",{"2":{"2":1}}],["class文件中的二进制数据读入到内存中",{"2":{"2":1}}],["class文件加载到jvm中",{"2":{"2":1}}],["class文件",{"2":{"2":1}}],["classloader",{"2":{"2":1,"308":3,"608":2}}],["class",{"2":{"2":2,"45":1,"82":2,"83":2,"84":4,"85":1,"88":2,"89":2,"94":1,"95":1,"99":1,"112":7,"120":1,"132":1,"148":1,"152":8,"180":1,"200":4,"201":1,"214":2,"217":1,"245":1,"266":2,"271":1,"299":1,"308":1,"311":2,"356":1,"401":1,"404":2,"405":1,"418":3,"435":1,"437":1,"448":1,"483":1,"502":2,"514":1,"515":1,"517":1,"597":1,"598":1,"606":1,"609":1,"611":1,"617":1,"675":1,"704":1}}],["caocao",{"2":{"584":4,"598":1}}],["cachechuantou2",{"2":{"696":1}}],["cachechuantou1",{"2":{"694":1}}],["cachechuantou",{"2":{"692":1}}],["cachemillis",{"2":{"517":7}}],["cachemap",{"2":{"427":4}}],["cachedir",{"2":{"515":2}}],["calculatewindowstart",{"2":{"437":1}}],["calculatetimeidx",{"2":{"437":1}}],["callerrunspolicy",{"2":{"265":2,"266":2}}],["callalbe接口支持返回执行结果",{"2":{"153":1}}],["callable用于产生结果",{"2":{"156":1}}],["callabletest",{"2":{"152":1}}],["callable",{"0":{"153":1,"156":1},"2":{"152":3,"153":2,"156":2,"157":2,"259":1,"266":1,"505":1}}],["call",{"2":{"99":2,"152":3,"153":2,"505":1}}],["canenablepush",{"2":{"517":1}}],["cancelled",{"2":{"505":1}}],["candistro",{"2":{"483":1,"502":1}}],["canpass",{"2":{"435":1,"438":1,"439":1}}],["canpasscheck",{"2":{"435":2}}],["can",{"2":{"418":1,"423":1,"485":1,"505":1}}],["cart",{"2":{"409":2,"688":8}}],["carts",{"2":{"407":5,"409":1}}],["caught",{"2":{"311":3}}],["capacity",{"2":{"266":2,"372":8,"376":1}}],["catch异常后",{"2":{"330":1}}],["catch时请分清稳定代码和非稳定代码",{"2":{"330":1}}],["catchmostspecificexceptionfirst",{"2":{"321":1}}],["catch用来捕获try语句块中发生的异常",{"2":{"289":1}}],["catch捕获它",{"2":{"288":1}}],["catch捕获",{"2":{"288":1}}],["catch进行捕获处理",{"2":{"287":1}}],["catch语句捕获它",{"2":{"286":1}}],["catch",{"0":{"300":1,"309":1,"310":2},"2":{"148":2,"150":1,"152":2,"183":1,"266":1,"271":1,"286":1,"289":1,"290":1,"291":1,"293":1,"297":2,"298":6,"300":12,"301":1,"308":1,"309":1,"310":2,"311":5,"315":2,"316":3,"317":2,"320":1,"321":7,"322":3,"323":2,"324":2,"325":1,"330":3,"416":1,"417":1,"418":2,"422":1,"425":2,"429":1,"439":1,"479":1,"490":3,"491":1,"492":1,"499":3,"504":1,"505":4,"511":1,"514":2,"517":1,"708":1}}],["catch代码块中",{"2":{"54":1,"307":1}}],["castabat",{"2":{"389":1}}],["casting",{"2":{"47":1}}],["cas的原理是拿期望的值和原本的一个值作比较",{"2":{"271":1}}],["cas操作",{"2":{"230":1}}],["cas是通过无限循环来获取数据的",{"2":{"222":1}}],["cas",{"0":{"206":1,"222":1,"223":1},"2":{"10":1,"206":1,"210":1,"221":4,"222":4,"223":5,"237":1,"238":1,"270":3,"271":1,"388":1,"389":1}}],["cas同步处理",{"2":{"8":1}}],["cms",{"0":{"31":1},"2":{"30":2,"31":4,"32":1}}],["costtime",{"2":{"439":5}}],["corsconfigurations",{"2":{"409":1}}],["core",{"2":{"266":2,"606":1,"611":3,"617":1,"675":1,"704":1}}],["corepoolsize",{"2":{"264":2,"266":1}}],["code",{"2":{"297":1,"298":2,"301":1,"466":1,"499":6,"502":2}}],["compse",{"2":{"640":1}}],["compose搭建redis使用配置文件",{"0":{"614":1},"1":{"615":1,"616":1,"617":1}}],["compose",{"0":{"561":1,"615":1,"670":1},"1":{"562":1,"563":1,"564":1},"2":{"563":1,"564":5,"573":2,"615":1,"629":3,"642":1,"655":2,"660":1,"661":1,"662":2,"671":1}}],["compensation",{"2":{"502":1}}],["comparator接口实际上是出自",{"2":{"393":1}}],["comparator的区别",{"0":{"393":1}}],["comparable接口实际上是出自java",{"2":{"393":1}}],["comparable",{"0":{"393":1},"2":{"395":3}}],["compareto",{"2":{"393":1,"395":1,"517":1}}],["compareandset",{"2":{"437":1,"441":2,"478":2}}],["compareandsetstate",{"2":{"230":1}}],["compareandsetstate进行操作",{"2":{"230":1}}],["compareandswapint",{"2":{"230":1,"271":1}}],["compare",{"2":{"221":1,"222":1,"230":1,"270":2,"271":1,"395":1}}],["compact",{"2":{"28":1}}],["commit",{"0":{"538":1},"2":{"525":2,"534":1,"538":2}}],["commons",{"2":{"597":1,"598":1}}],["commonparams",{"2":{"480":4,"483":2,"499":4,"500":3,"502":5,"512":2,"517":2}}],["common",{"2":{"422":1,"498":1,"504":1}}],["command",{"2":{"266":3,"615":1,"655":3,"660":3,"670":6}}],["com",{"2":{"324":2,"404":3,"410":1,"418":1,"466":2,"471":1,"484":1,"514":1,"526":1,"528":1,"597":1,"598":3,"606":1,"611":1,"617":1,"631":1,"675":1,"704":1}}],["colector",{"2":{"193":1}}],["collectionutils",{"2":{"505":1,"510":1}}],["collection接口的意义是为各种具体的集合提供了最大化的统一操作方式",{"2":{"394":1}}],["collection接口的子接口包括",{"2":{"337":1}}],["collection接口在java",{"2":{"394":1}}],["collection接口",{"0":{"343":1},"1":{"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1}}],["collection集合主要有list和set两大接口",{"2":{"338":1}}],["collection集合的子接口有set",{"2":{"338":1}}],["collections则是集合类的一个工具类",{"2":{"394":1}}],["collections",{"0":{"394":1,"395":1},"2":{"239":1,"342":2,"349":2,"355":2,"395":1}}],["collection",{"0":{"338":1,"347":1,"394":1},"2":{"18":1,"338":1,"339":1,"342":2,"345":2,"347":2,"353":1,"394":1,"435":2,"491":1,"492":1,"505":1}}],["copyonwritearraylist",{"0":{"243":1},"2":{"243":6}}],["copy",{"2":{"107":1,"558":1}}],["count之和",{"2":{"438":1}}],["countdownlatch是一个同步工具类",{"2":{"278":1}}],["countdownlatch是不能复用的",{"2":{"274":1}}],["countdownlatch方法比较少",{"2":{"274":1}}],["countdownlatch强调一个线程等多个线程完成某件事情",{"2":{"274":1}}],["countdownlatch一般用于某个线程a等待若干个其他线程执行完任务之后",{"2":{"274":1}}],["countdownlatch与cyclicbarrier都是用于控制并发的工具类",{"2":{"274":1}}],["countdownlatch",{"0":{"274":1},"2":{"230":2,"278":4}}],["count++",{"2":{"212":1,"490":1}}],["count",{"2":{"83":2,"212":1,"356":1,"425":5,"426":2,"427":2,"428":2,"429":10,"430":2,"431":2,"432":4,"435":8,"437":2,"438":2,"439":3,"440":2,"490":3,"505":1,"582":1,"611":6}}],["counters",{"2":{"442":2}}],["counter",{"2":{"3":1,"442":6}}],["conf文件中增加如下内容",{"0":{"641":1}}],["conf中",{"2":{"625":1}}],["conf",{"0":{"627":1,"635":1},"2":{"560":4,"563":4,"587":1,"588":1,"589":1,"615":3,"616":1,"629":1,"647":1,"660":12,"670":24,"671":3}}],["config",{"2":{"528":3,"597":1,"598":1,"671":1,"696":7}}],["configureblocking",{"2":{"505":1}}],["configurablewebserverapplicationcontext",{"2":{"478":2}}],["configuration",{"2":{"401":1,"405":2,"485":1,"491":1,"609":1}}],["config2",{"2":{"448":1}}],["config1",{"2":{"448":1}}],["connect",{"2":{"505":4}}],["connectionfactory",{"2":{"609":2}}],["connection",{"2":{"245":3}}],["convertandsend",{"2":{"449":1,"453":1,"455":3,"457":4}}],["console的模块中",{"2":{"482":1}}],["consistencyservice",{"2":{"484":1,"485":1,"486":2,"505":2}}],["consistency",{"2":{"472":1}}],["consul",{"2":{"464":1}}],["consumer",{"2":{"447":1}}],["constants这个类中",{"2":{"504":1}}],["constants类中",{"2":{"498":1}}],["constants",{"2":{"423":3,"425":1,"429":2,"431":6,"483":1,"502":1,"517":1}}],["constructor",{"0":{"91":1}}],["condition",{"2":{"221":1,"439":1}}],["concurrency",{"0":{"220":1,"270":1}}],["concurrentmodificationexception",{"2":{"243":1,"341":1,"346":1,"347":1,"356":1}}],["concurrenthashmap采用segment",{"2":{"389":1}}],["concurrenthashmap对整个桶数组进行了分割分段",{"2":{"387":1}}],["concurrenthashmap以及properties等",{"2":{"337":1}}],["concurrenthashmap",{"0":{"238":1,"241":1,"387":1,"388":1,"389":1},"2":{"238":2,"239":1,"241":4,"338":1,"385":2,"388":5,"389":1}}],["concurrenthashmap抛弃了原有的segment",{"2":{"237":1}}],["concurrenthashmap就是线程安全的map",{"2":{"237":1}}],["concurrenthashmap是java中的一个线程安全且高效的hashmap实现",{"2":{"237":1}}],["concurrent",{"2":{"30":1,"31":2,"183":1,"210":1,"221":1,"222":1,"225":1,"229":1,"266":3,"270":2,"363":1,"606":1,"611":1}}],["container",{"2":{"563":3,"573":1,"615":1,"655":3,"660":3,"670":6}}],["contains",{"2":{"696":2}}],["containsmetadata",{"2":{"502":1}}],["containskey",{"2":{"485":1,"489":2,"490":1,"491":1,"511":1}}],["contain",{"2":{"430":5}}],["contextloads",{"2":{"617":1,"675":1}}],["context中的curnode",{"2":{"427":1}}],["contextholder",{"2":{"423":2}}],["context的初始化",{"0":{"421":1},"1":{"422":1,"423":1}}],["contextnamenodemap",{"2":{"423":5}}],["contextnamedefineexception",{"2":{"423":1}}],["contextname",{"2":{"420":1,"422":3,"423":2}}],["contextname就是entrancenode的名称",{"2":{"420":1}}],["contextutil",{"0":{"423":1},"2":{"420":1,"422":2,"423":1,"425":1}}],["context名称",{"2":{"420":1}}],["context初始化的过程中",{"2":{"420":1}}],["context",{"0":{"419":1},"1":{"420":1,"421":1,"422":1,"423":1},"2":{"419":1,"420":2,"422":2,"423":12,"425":10,"426":3,"427":8,"428":6,"429":8,"430":12,"431":3,"432":4,"435":16,"440":7,"441":10,"442":3,"478":5,"563":1,"601":2,"606":1,"611":1,"617":1,"675":1,"704":1}}],["content",{"2":{"410":1,"491":2}}],["controlbehavior",{"2":{"435":1}}],["control",{"2":{"410":4,"435":1}}],["controllers包下就有服务注册",{"2":{"482":1}}],["controller中的资源",{"2":{"415":2}}],["controller",{"2":{"182":1}}],["continue",{"2":{"57":2,"438":1,"490":2,"491":1,"492":2,"504":1}}],["cpu资源被线程一抢走了",{"2":{"686":1}}],["cpu资源被线程二抢走了",{"2":{"686":1}}],["cpu资源时还将产生其他性能的开销",{"2":{"188":1}}],["cpu使用率",{"2":{"431":1}}],["cpu的使用权",{"2":{"159":1}}],["cpu",{"2":{"2":1,"30":1,"140":1,"141":3,"145":5,"159":1,"160":7,"161":1,"162":3,"165":1,"170":1,"188":1,"215":1,"223":1,"226":1,"270":1,"431":1}}],["再追到加另一个列表的左边",{"2":{"582":1}}],["再删除它",{"2":{"582":1}}],["再重新设置这个key的值",{"2":{"580":1}}],["再服务调用时优先读取本地缓存中的服务列表",{"2":{"519":1}}],["再用更新后的实例列表来覆盖旧的实例列表",{"2":{"494":1}}],["再判断一次预期等待时间",{"2":{"439":1}}],["再看下authorityrulechecker",{"2":{"430":1}}],["再看一下",{"2":{"356":1}}],["再来一个相同的hash值",{"2":{"371":1}}],["再比较equals",{"2":{"360":1}}],["再比如",{"2":{"221":1}}],["再做对应的异常处理",{"2":{"330":1}}],["再开始执行",{"2":{"278":1}}],["再携手共进",{"2":{"274":1}}],["再以countdownlatch以例",{"2":{"230":1}}],["再次进行任务调度",{"2":{"505":1}}],["再次进入open",{"2":{"442":1}}],["再次进入的时候会先判断",{"2":{"203":1}}],["再次回到以前的路径",{"2":{"310":1}}],["再次获得该锁时继续加一",{"2":{"201":1}}],["再阻塞",{"2":{"202":1}}],["再去获取",{"2":{"150":1}}],["再把位数组的这几个位置的值都置为",{"2":{"695":1}}],["再把引用指向该对象",{"2":{"118":1}}],["再把字节码加载到内存中",{"2":{"2":1}}],["再由对象的指针指向对象的真实内存地址",{"2":{"11":1}}],["再利用编译器",{"2":{"2":1}}],["再交由",{"2":{"2":1}}],["将来使用java操作redis时也需要密码",{"0":{"592":1}}],["将来做",{"2":{"422":1}}],["将myset1中的aa元素移动到myset3",{"2":{"583":1}}],["将map换为treemap进行有序key的遍历",{"2":{"386":1}}],["将并集结果存入到另一个集合中",{"2":{"583":1}}],["将交集结果存入到另一个集合中",{"2":{"583":2}}],["将暂存区的文件修改提交到版本库",{"2":{"534":1}}],["将暂存区的文件取消暂存或者是切换到指定版本",{"2":{"534":1}}],["将文件的修改加入暂存区",{"2":{"534":1}}],["将远程仓库克隆到本地",{"2":{"531":1}}],["将远程仓库文件和版本信息下载到本地仓库",{"2":{"525":1}}],["将本地仓库内容推送到远程仓库",{"2":{"543":1}}],["将本地仓库文件和版本信息上传到远程仓库",{"2":{"525":1}}],["将本地文件和版本信息保存到本地仓库",{"2":{"525":1}}],["将任务封装为一个",{"2":{"505":1}}],["将任务加入该阻塞队列",{"2":{"489":1}}],["将服务写入注册表",{"2":{"505":1}}],["将实例集合更新到",{"2":{"491":1}}],["将instancemap中的所有实例转为list返回",{"2":{"485":1}}],["将集群放入service的注册表",{"2":{"485":1}}],["将order",{"2":{"473":1}}],["将orderservice的queryorderbyid",{"2":{"417":1}}],["将之前下载好的nacos源码解压到cloud",{"2":{"468":1}}],["将fanout",{"2":{"448":1}}],["将futuretask作为参数创建thread对象",{"2":{"152":1}}],["将资源的",{"2":{"428":1}}],["将当前资源的defaultnode设置为context中的curnode",{"2":{"427":1}}],["将当前资源的defaultnode设置为上一个资源的childnode",{"2":{"427":1}}],["将defaultnode放入缓存中",{"2":{"427":1}}],["将入口节点放入缓存",{"2":{"423":1}}],["将这些节点形成链路树",{"2":{"414":1,"427":1}}],["将不同的功能",{"2":{"414":1}}],["将不知道如何处理的异常继续传递下去",{"2":{"291":1,"296":1}}],["将userid放入user",{"2":{"401":1}}],["将tail指向null",{"2":{"372":1}}],["将新数组的值复制给旧的hash桶数组",{"2":{"372":1}}],["将第一个元素赋值给e",{"2":{"371":1}}],["将链表和数组相结合",{"2":{"368":1}}],["将链表转化为红黑树",{"2":{"339":1,"369":1,"385":1}}],["将其转化为用户可以理解的内容",{"2":{"330":1}}],["将其放在运行时数据区的方法区内",{"2":{"2":1}}],["将其放在运行时数据区",{"2":{"2":1}}],["将以上代码中的",{"2":{"300":1}}],["将要被监听的代码",{"2":{"289":1}}],["将会创建多个defaultnode",{"2":{"427":1}}],["将会调用你的方法并且处理异常",{"2":{"318":1}}],["将会提示你处理本异常",{"2":{"288":1}}],["将会受到",{"2":{"211":1}}],["将终止线程",{"2":{"284":1}}],["将抛出",{"2":{"265":1}}],["将aqs组合在自定义同步组件的实现中",{"2":{"230":1}}],["将同步状态值设置为给定值update如果当前同步状态的值等于expect",{"2":{"230":1}}],["将",{"2":{"200":1,"425":1,"428":1}}],["将首先调用该对象的finalize",{"2":{"193":1}}],["将相关逻辑实现",{"2":{"152":1}}],["将获取到的线程号转换成16进制",{"2":{"147":1}}],["将3自动装箱成integer类型",{"2":{"133":1}}],["将包装类型转换为基本数据类型",{"2":{"131":1}}],["将基本类型用它们对应的引用类型包装起来",{"2":{"131":1}}],["将字符串转成大写字符",{"2":{"126":1}}],["将字符串转成小写字母",{"2":{"126":1}}],["将字节码翻译成底层系统指令",{"2":{"2":1}}],["将程序内所有",{"2":{"111":1}}],["将扩展从",{"2":{"103":1}}],["将数组的第一个元素变为0",{"2":{"99":1}}],["将变化隔离",{"2":{"60":1}}],["将双精度型",{"2":{"47":1}}],["将源代码编译成字节码文件",{"2":{"2":1}}],["的其他功能",{"2":{"716":1}}],["的网络",{"2":{"716":1}}],["的单线程主要是指",{"2":{"716":1}}],["的应用场景",{"2":{"695":1}}],["的应用还不是很广泛",{"2":{"106":1}}],["的几个位置都算出来",{"2":{"695":1}}],["的事件后",{"2":{"478":1}}],["的所有小窗口",{"2":{"438":2}}],["的所有异常可以分为受检异常",{"2":{"288":1}}],["的代码",{"2":{"431":1}}],["的代码修改成下面这样就不会产生死锁了",{"2":{"150":1}}],["的字符串",{"2":{"430":1}}],["的字面意思是可循环使用",{"2":{"278":1}}],["的创建",{"2":{"418":1}}],["的结构和hashmap类似",{"2":{"389":1}}],["的形式",{"2":{"388":1}}],["的形式进行异常捕获",{"2":{"293":1}}],["的底层数据结构类似都是采用",{"2":{"388":1}}],["的类注释可以看到",{"2":{"385":1}}],["的类名就能够反映错误的原因",{"2":{"320":1}}],["的前提是",{"2":{"384":1}}],["的长度为什么是2的幂次方",{"0":{"384":1},"2":{"384":1}}],["的问题",{"2":{"383":1}}],["的首个元素是否和key一样",{"2":{"371":1}}],["的hash值相等",{"2":{"371":1}}],["的树结构来提升碰撞下的性能",{"2":{"371":1}}],["的数据结构",{"2":{"366":1,"388":1}}],["的key",{"2":{"360":1}}],["的put",{"2":{"360":1}}],["的park",{"2":{"208":1}}],["的相关方法来完成",{"2":{"359":1}}],["的相关规定",{"2":{"95":1,"360":1}}],["的操作",{"2":{"359":1}}],["的操作基于事件和回调机制",{"2":{"106":1}}],["的定义",{"2":{"356":1}}],["的存储性能和特性",{"0":{"354":1}}],["的存储位置",{"2":{"127":1}}],["的节点除了存储数据",{"2":{"352":1}}],["的优缺点",{"0":{"350":1}}],["的列表可用",{"2":{"349":1}}],["的唯一正确方式是使用",{"2":{"347":1}}],["的特点是只能单向遍历",{"2":{"346":1}}],["的接口",{"2":{"345":1}}],["的主体",{"2":{"339":1,"388":1}}],["的主要组成部分及其作用",{"0":{"2":1}}],["的常用实现类",{"2":{"338":1}}],["的可用性",{"2":{"329":1}}],["的子类",{"2":{"321":1}}],["的子接口",{"2":{"251":1}}],["的异常处理是通过",{"2":{"290":1}}],["的屏障",{"2":{"278":1}}],["的高开销",{"2":{"271":1}}],["的原理",{"0":{"271":1}}],["的原子操作",{"2":{"270":1}}],["的构造函数源码就可以看出",{"2":{"265":1}}],["的构造函数创建线程池的时候",{"2":{"265":1}}],["的构造方法",{"2":{"185":2}}],["的记录",{"2":{"248":1}}],["的弱引用",{"2":{"248":1}}],["的设计思想",{"2":{"243":1}}],["的缺点如下",{"2":{"350":1}}],["的缺点",{"2":{"243":1}}],["的使用场景",{"2":{"243":1}}],["的使用权",{"2":{"160":3}}],["的使用权才能执行指令",{"2":{"160":1}}],["的好处之一是当多个迭代器同时遍历和修改这个列表时",{"2":{"243":1}}],["的并发度是什么",{"0":{"238":1}}],["的获取与释放方式即可",{"2":{"230":1}}],["的同时",{"2":{"224":1}}],["的情况",{"2":{"223":1}}],["的情况下",{"2":{"106":1,"224":1}}],["的会产生什么问题",{"0":{"223":1}}],["的缩写",{"2":{"222":1}}],["的值是一样的",{"2":{"222":1}}],["的值与预期原值",{"2":{"221":1}}],["的值增加线程数量",{"2":{"181":1}}],["的实现比较简单",{"2":{"359":1}}],["的实现原理",{"0":{"359":1,"366":1}}],["的实现类基本都支持非公平锁",{"2":{"220":1}}],["的实现方式",{"2":{"203":1}}],["的扩展版",{"2":{"220":1}}],["的寄存器中是不确定的",{"2":{"215":1}}],["的保护",{"2":{"211":1}}],["的保证",{"2":{"210":1}}],["的边界做忙循环",{"2":{"202":1}}],["的指令重排",{"2":{"200":1,"214":1}}],["的作用是说不希望",{"2":{"356":1}}],["的作用是获取哈希码",{"2":{"95":1}}],["的作用",{"0":{"199":1},"2":{"271":1}}],["的目的是什么",{"0":{"193":1}}],["的启动参数",{"2":{"188":1}}],["的占用权",{"2":{"177":1}}],["的占用权利",{"2":{"161":1}}],["的accept",{"2":{"173":1}}],["的线程",{"2":{"254":1}}],["的线程是映射到操作系统的原生线程之上的",{"2":{"199":1}}],["的线程优先级调度会委托给操作系统去处理",{"2":{"184":1}}],["的线程中并没有可供任何对象使用的锁",{"2":{"166":1}}],["的线程获得了cpu时间片",{"2":{"159":1}}],["的时间再",{"2":{"439":1}}],["的时间片这个也比较好理解",{"2":{"160":1}}],["的时候已经摒弃了segment的概念",{"2":{"388":1}}],["的时候",{"0":{"127":1},"2":{"264":1}}],["的时候回产生大量的内存碎片",{"2":{"31":1}}],["的时候不会被回收",{"2":{"21":1}}],["的对象进行包装",{"2":{"157":1}}],["的对比",{"0":{"42":1}}],["的具体实现类",{"2":{"157":1}}],["的监视器锁的占用",{"2":{"150":1}}],["的监视器锁",{"2":{"148":2,"150":2}}],["的退出",{"2":{"146":1}}],["的利用率",{"2":{"141":1}}],["的包装类就是",{"2":{"132":1}}],["的属性",{"2":{"125":1}}],["的属性和方法",{"2":{"60":1}}],["的内存地址",{"2":{"271":1}}],["的内存地址而已",{"2":{"120":1}}],["的内存地址转为指向",{"2":{"120":1}}],["的过程称为抛出异常",{"2":{"305":1}}],["的过程",{"2":{"111":1}}],["的改进版",{"2":{"106":1}}],["的非阻塞模式来开发",{"2":{"106":1}}],["的升级",{"2":{"106":2}}],["的组成部分",{"2":{"103":1}}],["的拷贝也就是一个对象的引用",{"2":{"99":1}}],["的副本",{"2":{"99":1}}],["的复制过来的",{"2":{"99":1}}],["的一部分",{"2":{"305":1}}],["的一个重要作用就是和",{"2":{"210":1}}],["的一个普通方法调用",{"2":{"155":1}}],["的一些专业术语",{"2":{"99":1}}],["的一套指令集规范",{"2":{"2":1}}],["的两个对象无论如何都不会相等",{"2":{"95":1}}],["的默认行为是对堆上的对象产生独特值",{"2":{"95":1,"360":1}}],["的次数",{"2":{"95":1}}],["的方法",{"2":{"172":1,"225":1}}],["的方法区内",{"2":{"2":1}}],["的方式实现",{"2":{"349":1}}],["的方式来处理",{"2":{"330":1}}],["的方式来实现原子操作",{"2":{"270":1}}],["的方式来保证原子操作",{"2":{"223":1}}],["的方式",{"2":{"76":2,"122":1,"262":1}}],["的差别也是如此",{"2":{"51":1}}],["的区别主要体现在实现线程安全的方式上不同",{"2":{"388":1}}],["的区别是什么",{"0":{"94":1,"215":1,"306":1,"352":1,"353":1}}],["的区别及作用",{"2":{"57":1}}],["的区别",{"0":{"92":1,"258":1,"357":1,"387":1,"388":1},"2":{"51":1}}],["的参数加上",{"2":{"31":1}}],["的简称",{"2":{"31":1}}],["的",{"0":{"317":1,"356":1,"380":1},"2":{"22":1,"106":1,"117":1,"124":1,"127":1,"182":2,"185":2,"187":1,"223":2,"299":1,"321":1,"355":1,"360":1,"374":1,"380":1,"392":1}}],["的概念",{"2":{"19":1,"238":1}}],["的元素",{"2":{"6":1}}],["的总是当前栈中最新的元素",{"2":{"6":1}}],["类库中有很多具体的实现",{"2":{"394":1}}],["类库中定义的可以通过预检查方式规避的runtimeexception异常不应该通过catch",{"2":{"330":1}}],["类最佳实践是使之为不可变的",{"2":{"380":1}}],["类提供了特殊的构造函数方法",{"2":{"325":1}}],["类提供的",{"2":{"212":1}}],["类造型异常",{"2":{"313":1}}],["类转换异常",{"2":{"312":1}}],["类或其子类的实例",{"2":{"290":1}}],["类定义错误",{"2":{"284":1}}],["类及其子类",{"2":{"284":1,"286":1,"304":1}}],["类主要利用",{"2":{"271":1}}],["类来支持线程局部变量",{"2":{"246":1}}],["类构造函数的一个可选参数",{"2":{"238":1}}],["类对象加锁",{"2":{"200":1}}],["类上锁",{"2":{"200":1}}],["类中的",{"0":{"168":1}}],["类中可以有多个static块",{"2":{"56":1}}],["类里",{"0":{"166":1}}],["类是",{"2":{"121":1}}],["类不能被继承",{"2":{"118":1}}],["类覆盖了",{"2":{"94":1}}],["类没有覆盖",{"2":{"94":1}}],["类名",{"2":{"76":1}}],["类内部定义的变量",{"2":{"69":1}}],["类与接口",{"0":{"63":1},"1":{"64":1,"65":1,"66":1,"67":1}}],["类的一个对象",{"2":{"435":1}}],["类的所有实例需要遵循与",{"2":{"380":1}}],["类的构造函数抛出",{"2":{"320":1}}],["类的错误是可以在应用程序中进行捕获并处理的",{"2":{"303":1}}],["类的部分源码",{"2":{"271":1}}],["类的",{"0":{"169":1},"2":{"169":1,"271":1}}],["类的不同",{"2":{"164":1}}],["类的常用方法都有那些",{"0":{"126":1}}],["类的方法中的变量",{"2":{"69":1}}],["类的功能要单一",{"2":{"62":1}}],["类的加载指的是将类的",{"2":{"2":1}}],["类似的处理流程",{"2":{"182":1}}],["类似于死循环",{"2":{"149":1}}],["类似",{"2":{"55":1,"278":1}}],["类型是",{"2":{"494":1}}],["类型是abstractlinkedprocessorslot",{"2":{"426":1}}],["类型为service",{"2":{"474":1}}],["类型异常的",{"2":{"311":1}}],["类型进行改变的时候",{"2":{"128":1,"129":1}}],["类型的异常",{"2":{"308":1,"311":1}}],["类型的错误通常为虚拟机相关错误",{"2":{"303":1}}],["类型的原子包装类",{"2":{"270":1}}],["类型的任务",{"2":{"259":2}}],["类型的数组",{"2":{"117":1}}],["类型的变量",{"2":{"117":1}}],["类型数组",{"2":{"117":1,"126":1,"211":1}}],["类型",{"2":{"46":1,"48":1,"217":1,"475":1,"495":1,"507":1}}],["类",{"0":{"121":1,"311":2,"322":1},"2":{"45":1,"50":2,"85":1,"118":1,"121":1,"152":2,"260":1}}],["类加载完成后",{"2":{"9":1}}],["类加载通过后",{"2":{"8":1}}],["类加载器",{"2":{"2":1}}],["类装载",{"2":{"2":2}}],["执行如下命令",{"2":{"673":1}}],["执行bgrewriteaof命令",{"2":{"647":1}}],["执行bgsave时出错",{"2":{"627":1,"629":1}}],["执行save或者bgsave",{"0":{"631":1}}],["执行一些保存数据的命令",{"2":{"629":1}}],["执行一定次数之后",{"2":{"203":1}}],["执行原理",{"2":{"620":1}}],["执行操作",{"2":{"620":1,"622":1}}],["执行命令git",{"2":{"530":1}}],["执行任务的方法为processtasks",{"2":{"492":1}}],["执行任务",{"2":{"492":1}}],["执行服务列表的更新",{"2":{"490":1}}],["执行运作前先绑定",{"2":{"447":1}}],["执行下一个",{"2":{"427":1}}],["执行prehandle前置拦截方法",{"2":{"421":1,"422":1}}],["执行受保护的方法",{"2":{"418":1}}],["执行完成之后",{"2":{"289":1}}],["执行效率大为提升",{"2":{"271":1}}],["执行其中的指令时",{"2":{"270":1}}],["执行runnable",{"2":{"266":1}}],["执行和控制的异步任务的框架",{"2":{"257":1}}],["执行代码",{"2":{"215":1}}],["执行时间非常快",{"2":{"202":1}}],["执行了bind",{"2":{"478":1}}],["执行了",{"2":{"200":1}}],["执行顺序有可能变成",{"2":{"200":1}}],["执行程序代码",{"2":{"159":1}}],["执行结果",{"2":{"152":3,"310":2}}],["执行具体的任务",{"2":{"146":1}}],["执行过程",{"2":{"144":1}}],["执行",{"2":{"140":1,"174":1,"425":1,"492":1,"535":1}}],["执行classes中的指令",{"2":{"2":1}}],["执行引擎",{"2":{"2":2}}],["luhan",{"2":{"704":1}}],["lucy",{"2":{"580":1,"598":1,"611":1}}],["lfu",{"2":{"680":3}}],["lru",{"2":{"680":3}}],["lrem",{"2":{"582":2}}],["lrange",{"2":{"582":2,"598":1}}],["lpop",{"2":{"582":1}}],["lpush",{"2":{"582":1}}],["llen",{"2":{"582":1}}],["ln",{"2":{"558":1}}],["leasetime",{"2":{"713":1}}],["leaparray长度",{"2":{"438":1}}],["leaparray是一个环形数组",{"2":{"437":1}}],["leaparray",{"2":{"437":1,"438":1}}],["leaparray的四个属性",{"2":{"437":1}}],["less",{"2":{"439":1}}],["length==hash",{"2":{"384":1}}],["length",{"0":{"125":2},"2":{"125":4,"126":1,"356":2,"371":3,"372":1,"383":2,"384":2,"418":1,"438":1,"485":1,"514":1}}],["lb代表负载均衡",{"2":{"409":1}}],["lb",{"2":{"409":5}}],["lastreftime",{"2":{"517":1}}],["lastbeat",{"2":{"503":2}}],["latestpassedtime",{"2":{"439":5}}],["landin",{"2":{"230":1}}],["lang包",{"2":{"36":1,"393":1}}],["lang",{"2":{"2":2,"102":1,"313":15,"320":1,"324":5,"342":1}}],["lazy",{"2":{"214":1}}],["lsp",{"2":{"62":1}}],["lt",{"2":{"8":1,"376":2,"474":5,"494":3}}],["lookprocesschain",{"2":{"425":1}}],["lotail和lohead指向相同的内存",{"2":{"372":1}}],["lotail指向当前的元素e",{"2":{"372":1}}],["lotail",{"2":{"372":8}}],["lohead",{"2":{"372":4}}],["logs",{"2":{"564":1,"662":2}}],["log命令查看日志",{"2":{"539":1}}],["loggers",{"2":{"485":1,"490":6,"491":7,"492":2,"502":2,"503":5,"504":2,"505":3,"517":3}}],["logger",{"2":{"478":1,"480":1,"498":1,"499":2,"500":2,"511":2,"514":3,"515":1}}],["logn",{"2":{"366":1,"371":1,"378":1}}],["logandthrowexception",{"2":{"324":1}}],["loganexception",{"2":{"323":1}}],["log",{"0":{"539":1},"2":{"315":2,"316":2,"317":2,"320":1,"321":2,"323":1,"324":1,"417":1,"479":4,"485":1,"491":7,"502":2,"503":5,"504":2,"505":4,"517":3,"534":1,"539":1}}],["loadbalancer",{"2":{"403":1}}],["loadfactor",{"2":{"372":1}}],["load",{"2":{"372":1,"431":1,"635":1,"641":1}}],["loadclass",{"2":{"308":1}}],["loader",{"2":{"2":2}}],["location",{"2":{"410":1}}],["localtime",{"2":{"558":1}}],["localip",{"2":{"512":1}}],["localcachenamemap",{"2":{"423":2}}],["localhost",{"2":{"407":6,"409":1,"417":2,"503":1}}],["local",{"2":{"8":1,"10":1,"245":3,"505":4,"572":2,"615":2,"660":6,"670":12}}],["locks包下面",{"2":{"229":1}}],["lockinterruptibly",{"2":{"220":1}}],["lock简介与初识aqs",{"0":{"219":1},"1":{"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1}}],["lock体系",{"0":{"218":1},"1":{"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1}}],["lock是个java类",{"2":{"207":1}}],["locked",{"2":{"165":1}}],["lock",{"0":{"207":1,"220":2},"2":{"139":2,"159":1,"180":1,"183":5,"199":1,"207":3,"220":4,"389":1,"423":3,"428":1,"708":4,"713":7}}],["long",{"0":{"46":1},"2":{"45":1,"46":1,"117":1,"132":2,"164":1,"225":1,"266":1,"271":1,"320":2,"324":5,"401":1,"405":1,"417":1,"437":2,"438":6,"439":5,"442":2,"492":1,"499":2,"505":2,"517":1,"602":4,"611":2,"613":2,"713":1}}],["like",{"2":{"689":5}}],["limit",{"2":{"584":4}}],["limitapp",{"2":{"435":2}}],["liubei",{"2":{"584":5,"598":1,"611":1}}],["lily",{"2":{"580":1}}],["library",{"2":{"573":1,"615":1,"655":3,"660":3,"670":6}}],["libraries交互",{"2":{"2":1}}],["lib",{"2":{"560":1,"563":1}}],["lifecycle",{"2":{"478":1}}],["lifo",{"2":{"6":1}}],["lisi",{"2":{"581":1,"631":3}}],["listtest",{"2":{"598":1,"611":1}}],["list的基本使用",{"2":{"598":1}}],["list操作",{"2":{"582":1}}],["listeners",{"2":{"489":1,"490":2}}],["listener",{"2":{"451":1,"490":5}}],["listensimplequeuemessage2",{"2":{"449":1}}],["listen",{"2":{"410":1,"505":2}}],["list可以动态增长",{"2":{"357":1}}],["listiterator",{"0":{"348":1},"2":{"348":3}}],["list接口",{"0":{"344":1},"1":{"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1}}],["list接口的实现类主要有",{"2":{"337":1}}],["list",{"0":{"338":3,"349":2,"351":1,"357":1,"392":1,"582":1,"682":1},"2":{"338":3,"339":1,"342":4,"346":2,"347":6,"348":2,"349":1,"351":10,"353":2,"355":1,"356":1,"357":4,"392":3,"418":1,"438":5,"440":1,"442":1,"484":1,"485":5,"487":1,"491":7,"503":1,"504":1,"505":1,"507":1,"510":6,"512":1,"517":4,"528":1,"560":1,"579":1,"598":6,"611":3}}],["liskov",{"2":{"62":1}}],["lindex",{"2":{"582":2}}],["link",{"2":{"418":1,"435":3,"438":1}}],["linkedhashmap",{"2":{"338":1,"339":4}}],["linkedhashset",{"2":{"338":1,"339":2,"357":1}}],["linkedhashset等",{"2":{"337":1}}],["linkedlist",{"0":{"352":1,"354":2},"2":{"337":1,"338":1,"339":1,"352":8,"354":3,"357":1,"364":1,"491":1,"505":1}}],["linkedblockingdeque",{"2":{"251":1}}],["linkedblockingqueue",{"2":{"181":2,"251":1,"363":1}}],["linkedtransferqueue",{"2":{"251":1}}],["linux下可以用",{"2":{"147":1}}],["linux",{"0":{"147":1},"2":{"59":1,"145":1,"186":1}}],["lightbeatenabled",{"2":{"499":5,"500":2}}],["light",{"2":{"144":1,"499":2,"502":1}}],["如上图所示",{"2":{"548":1,"550":1}}],["如上所示",{"2":{"324":1}}],["如图",{"2":{"430":1,"432":1,"434":1,"437":1,"449":1,"450":1,"452":1,"454":1,"456":1,"472":1,"481":1}}],["如图所示",{"2":{"29":1}}],["如使用",{"2":{"388":1}}],["如linkedlist",{"2":{"349":1}}],["如arraylist",{"2":{"349":1}}],["如系统崩溃",{"2":{"303":1}}],["如数据库连接",{"2":{"289":1}}],["如reentrantreadwritelock",{"2":{"230":1}}],["如reentrantlock",{"2":{"230":1}}],["如获取资源失败入队",{"2":{"230":1}}],["如semaphore",{"2":{"230":1}}],["如自旋锁",{"2":{"199":1}}],["如非特别需要",{"2":{"184":1}}],["如此一来在调用",{"2":{"174":1}}],["如程序的主线程",{"2":{"146":1}}],["如expandcapacity",{"2":{"128":1}}],["如何解决缓存穿透",{"0":{"693":1},"1":{"694":1,"695":1,"696":1}}],["如何获取",{"2":{"438":1}}],["如何决定使用",{"0":{"386":1}}],["如何实现",{"0":{"392":1}}],["如何实现数组和",{"0":{"351":1}}],["如何实现多线程之间的通讯和协作",{"0":{"177":1}}],["如何边遍历边移除",{"0":{"347":1}}],["如何选择异常类型",{"0":{"294":1}}],["如何使用阻塞队列来实现生产者",{"0":{"251":1}}],["如何停止一个正在运行的线程",{"0":{"171":1}}],["如何避免线程死锁",{"0":{"150":1}}],["如何在两个线程间共享数据",{"0":{"176":1}}],["如何在",{"0":{"147":1}}],["如何将字符串反转",{"0":{"124":1}}],["如何检查重复",{"2":{"95":1}}],["如何跳出当前的多重嵌套循环",{"2":{"57":1}}],["如下图",{"2":{"543":1}}],["如下图所示",{"2":{"148":1}}],["如下所示",{"2":{"254":1}}],["如下",{"2":{"82":1,"83":1,"84":1,"324":2,"347":1,"451":1,"543":1}}],["如基本数据类型",{"2":{"36":1}}],["如果t2",{"2":{"714":1}}],["如果table",{"2":{"371":2}}],["如果客户端从大于等于3个以上redis加锁成功",{"2":{"714":1}}],["如果某一个加锁失败",{"2":{"714":1}}],["如果某个线程因为执行异常而结束",{"2":{"254":1}}],["如果都是",{"2":{"695":1}}],["如果过期",{"2":{"679":1}}],["如果票数大于节点数的一半",{"2":{"658":1}}],["如果认为主节点挂了",{"2":{"658":1}}],["如果既要保证性能",{"2":{"648":1}}],["如果开启了aof",{"2":{"638":1}}],["如果文件出现了损坏",{"2":{"635":1,"641":1}}],["如果能够写入",{"2":{"631":1}}],["如果能够看到如下菜单则说明安装成功",{"2":{"526":1}}],["如果输入的redis命令出现了语法错误",{"2":{"620":1}}],["如果指定了具体的序列化器",{"2":{"608":1}}],["如果gender存在",{"2":{"598":1}}],["如果gender不存在",{"2":{"598":1}}],["如果后面的索引是",{"2":{"584":1}}],["如果存在",{"2":{"581":1}}],["如果本地仓库是从远程仓库直接克隆的也就是通过",{"2":{"540":1}}],["如果本地文件丢失还可以从远程仓库获取",{"2":{"523":1}}],["如果本地缓存有",{"2":{"511":1}}],["如果本地缓存没有",{"2":{"511":1}}],["如果没找到",{"2":{"517":1}}],["如果没有指定",{"2":{"608":1}}],["如果没有指定序列化器",{"2":{"606":1}}],["如果没有设置有效时间",{"2":{"585":1}}],["如果没有设置热点规则",{"2":{"432":1}}],["如果没有旧数据",{"2":{"485":1}}],["如果没有元素",{"2":{"364":1}}],["如果没有实现该接口",{"2":{"349":1}}],["如果没有特殊的要求",{"2":{"304":1}}],["如果没有被volatile修饰",{"2":{"213":1}}],["如果没有重写hashcode",{"2":{"360":1}}],["如果没有重写",{"2":{"95":1}}],["如果没有相符的hashcode",{"2":{"95":1}}],["如果没有就在常量池中重新创建一个string对象",{"2":{"94":1}}],["如果没有用super",{"2":{"70":1}}],["如果没有",{"2":{"8":1,"694":1}}],["如果缓存存在",{"2":{"515":1}}],["如果服务器突然宕机",{"2":{"624":1}}],["如果服务不存在",{"2":{"505":1}}],["如果服务中已经有旧的数据",{"2":{"485":1}}],["如果心跳没问题",{"2":{"502":1}}],["如果获取失败",{"2":{"502":1}}],["如果失败",{"2":{"499":1,"653":1}}],["如果失败会重试",{"2":{"492":1}}],["如果比例超过阈值",{"2":{"442":1}}],["如果总请求数量未达到阈值",{"2":{"442":1}}],["如果出现异常",{"2":{"442":1}}],["如果出现hash值相同的key",{"2":{"366":1}}],["如果异常",{"2":{"441":1}}],["如果异常没有被捕获该线程将会停止执行",{"2":{"187":1}}],["如果预期等待时间超出阈值",{"2":{"439":1}}],["如果预期对方抛的是绣球",{"2":{"330":1}}],["如果允许执行的时间点小于当前时间",{"2":{"439":1}}],["如果包含",{"2":{"430":1}}],["如果为空",{"2":{"423":1,"427":1}}],["如果为null",{"2":{"330":1}}],["如果缺少了同源策略",{"2":{"407":1}}],["如果插入的是一个新节点",{"2":{"389":1}}],["如果oldval不为空",{"2":{"389":1}}],["如果oldcap不为空的话",{"2":{"372":1}}],["如果bincount不为0",{"2":{"389":1}}],["如果该节点是treebin类型的节点",{"2":{"389":1}}],["如果该节点的hash不小于0",{"2":{"389":1}}],["如果该字符串已经存在池中",{"2":{"116":1}}],["如果相应位置的node不为空",{"2":{"389":1}}],["如果相应位置的node还没有初始化",{"2":{"389":1}}],["如果相同直接覆盖value",{"2":{"371":1}}],["如果相同则更新成新的值",{"2":{"271":1}}],["如果类重写了",{"2":{"380":1}}],["如果e是treenode并且e",{"2":{"372":1}}],["如果e",{"2":{"372":1}}],["如果大于最大容量了",{"2":{"372":1}}],["如果超时",{"2":{"504":1}}],["如果超过",{"2":{"371":1,"439":1}}],["如果超出了",{"2":{"276":1}}],["如果是集群部署",{"2":{"707":1}}],["如果是第一次操作",{"2":{"543":1}}],["如果是第一次来注册实例",{"2":{"484":1}}],["如果是超过了30秒",{"2":{"504":1}}],["如果是临时实例",{"2":{"480":1,"496":1}}],["如果是则把状态从open切换到",{"2":{"441":1}}],["如果是open状态",{"2":{"441":1}}],["如果是closed状态",{"2":{"441":1}}],["如果是链路模式",{"2":{"435":1}}],["如果是直连模式",{"2":{"435":1}}],["如果是白名单",{"2":{"430":1}}],["如果是黑名单",{"2":{"430":1}}],["如果是入口资源",{"2":{"429":1}}],["如果是红黑树",{"2":{"371":1}}],["如果是普通异常",{"2":{"309":1}}],["如果当前本地仓库不是从远程仓库克隆",{"2":{"544":1}}],["如果当前已经是open状态",{"2":{"442":1}}],["如果当前链表的个数达到8个",{"2":{"389":1}}],["如果当前hash桶数组的长度在扩容后仍然小于最大容量",{"2":{"372":1}}],["如果当前元素类型为treenode",{"2":{"371":1}}],["如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任时",{"2":{"265":1}}],["如果key存在",{"2":{"580":1}}],["如果key不存在",{"2":{"580":2}}],["如果key不同",{"2":{"366":1}}],["如果key相同",{"2":{"366":1}}],["如果遇到多线程场景",{"2":{"355":1}}],["如果加了栈信息",{"2":{"330":1}}],["如果找不到方法",{"2":{"330":1}}],["如果此处存在return语句",{"2":{"330":1}}],["如果jdk7及以上",{"2":{"330":1}}],["如果java堆的内存不是规整的",{"2":{"9":1}}],["如果java堆的内存是规整",{"2":{"9":1}}],["如果用户输入非法字符",{"2":{"330":1}}],["如果标准的异常不能满足你的要求",{"2":{"327":1}}],["如果想要提供更加有用的信息",{"2":{"324":1}}],["如果想要获取被抑制的异常列表",{"2":{"301":1}}],["如果在当前目录中看到",{"2":{"530":1}}],["如果在",{"2":{"322":1}}],["如果首先捕获",{"2":{"321":1}}],["如果抛出一个特定的异常",{"2":{"320":1}}],["如果运行时异常",{"2":{"309":1}}],["如果运算尚未完成",{"2":{"157":1}}],["如果强制要求调用者必须进行处理",{"2":{"304":1}}],["如果之前获取了一些本地资源需要释放",{"2":{"300":1}}],["如果finally中使用了return或者throw等终止方法的语句",{"2":{"289":1}}],["如果程序中出现此类异常",{"2":{"287":1}}],["如果产生运行时异常",{"2":{"286":1}}],["如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话",{"2":{"265":1}}],["如果您想开发企业",{"2":{"42":1}}],["如果这个位数组比较拥挤",{"2":{"695":1}}],["如果这个位数组比较稀疏",{"2":{"695":1}}],["如果这个槽位不在当前连接的节点上",{"2":{"668":1}}],["如果这个值不是数值",{"2":{"580":1}}],["如果这个唯一的线程因为异常结束",{"2":{"254":1}}],["如果这样",{"2":{"310":1}}],["如果这时没有新的任务提交",{"2":{"264":1}}],["如果达到的话",{"2":{"264":1}}],["如果需要研究其他版本的同学",{"2":{"466":1}}],["如果需要多线程使用则用",{"2":{"385":1}}],["如果需要回滚事务",{"2":{"330":1}}],["如果需要使用",{"2":{"260":1}}],["如果需要自定义同步器一般的方式是这样",{"2":{"230":1}}],["如果无限制的创建",{"2":{"255":1}}],["如果希望在服务器上使用线程池",{"2":{"254":1}}],["如果队列为空",{"2":{"251":1}}],["如果队列已满",{"2":{"251":1}}],["如果",{"0":{"310":1},"2":{"248":1,"305":1,"540":1}}],["如果原先的数组没有初始化",{"2":{"372":1}}],["如果原数组的内容比较多的情况下",{"2":{"243":1}}],["如果原地址发生改变",{"2":{"4":1}}],["如果线程池的大小超过了处理任务所需要的线程",{"2":{"254":1}}],["如果线程",{"2":{"234":1}}],["如果线程调用了对象的",{"2":{"175":1}}],["如果已经过期",{"2":{"585":1}}],["如果已经克隆了远程仓库",{"2":{"541":1}}],["如果已经是",{"2":{"442":1}}],["如果已经获取锁的线程是当前线程的话则直接再次获取成功",{"2":{"232":1}}],["如果已经进入a",{"2":{"205":1}}],["如果被请求的共享资源被占用",{"2":{"230":1}}],["如果被请求的共享资源空闲",{"2":{"230":1}}],["如果内存地址里面的值和",{"2":{"222":1}}],["如果内存位置",{"2":{"221":1}}],["如果改变引用指向的数组",{"2":{"211":1}}],["如果还没有正常获取到要使用的对象",{"2":{"203":1}}],["如果一致则可以直接使用此对象",{"2":{"203":1}}],["如果一个类没有使用",{"2":{"380":1}}],["如果一个数据集合实现了该接口",{"2":{"349":1}}],["如果一个线程先执行exchange方法",{"2":{"277":1}}],["如果一个线程被中断了",{"2":{"172":1}}],["如果一个锁是公平的",{"2":{"232":1}}],["如果一个进程内有多个线程",{"2":{"144":1}}],["如果做了多次循环发现还没有获得锁",{"2":{"202":1}}],["如果对象的引用被置为null",{"0":{"192":1}}],["如果破坏了这些限制",{"2":{"188":1}}],["如果说上面的说法让你感到困惑",{"2":{"185":1}}],["如果说垃圾收集算法是内存回收的方法论",{"2":{"30":1}}],["如果增加了线程数量还是处理不过来",{"2":{"181":1}}],["如果使用uuid来解决",{"2":{"687":1}}],["如果使用nginx作为反向代理",{"2":{"410":1}}],["如果使用object作为hashmap的key",{"0":{"382":1}}],["如果使用内建的异常可以解决问题",{"2":{"327":1}}],["如果使用",{"2":{"234":1}}],["如果使用volatile修饰long和double",{"2":{"213":1}}],["如果使用不当没有",{"2":{"207":1}}],["如果使用的是有界队列比如",{"2":{"181":1}}],["如果使用的是无界队列",{"2":{"181":1}}],["如果使用直接指针访问",{"2":{"13":1}}],["如果你要保证线程安全的话就使用",{"2":{"385":1}}],["如果你的资源实现了",{"2":{"317":1}}],["如果你只用try去处理普通异常却不加以catch处理",{"2":{"309":1}}],["如果你觉得解决不了某些异常问题",{"2":{"292":1}}],["如果你提交任务时",{"0":{"181":1}}],["如果你仔细查看垃圾收集器的输出信息",{"2":{"23":1,"24":1}}],["如果有频繁的写入操作",{"2":{"635":1,"641":1}}],["如果有",{"2":{"305":1,"429":1,"694":1,"712":1}}],["如果有多个线程调用同步容器的方法",{"2":{"239":1}}],["如果有对共享变量的复合操作",{"2":{"176":1}}],["如果有就把它赋给当前引用",{"2":{"94":1}}],["如果发生以下情况",{"2":{"161":1}}],["如果可运行池中的线程优先级相同",{"2":{"160":1}}],["如果直接调用run",{"2":{"154":1}}],["如果申请不到",{"2":{"150":1}}],["如果整型字面量的值在",{"2":{"133":1}}],["如果要不追求性能",{"2":{"648":1}}],["如果要追求性能",{"2":{"648":1}}],["如果要读到最末尾",{"2":{"582":1}}],["如果要查看已经配置的远程仓库服务器",{"2":{"541":1}}],["如果要复制的元素很多",{"2":{"350":1}}],["如果要挂起或者唤醒一个线程",{"2":{"199":1}}],["如果要操作少量的数据用",{"2":{"128":1,"129":1}}],["如果要描述一段文本",{"2":{"117":1}}],["如果下次创建同样的对象时",{"2":{"118":1}}],["如果两个对象相等",{"2":{"95":1,"360":1}}],["如果两者相同",{"2":{"95":1}}],["如果不包含",{"2":{"485":1}}],["如果不做",{"2":{"371":1}}],["如果不加栈信息",{"2":{"330":1}}],["如果不想处理它",{"2":{"330":1}}],["如果不可锁重入的话",{"2":{"208":1}}],["如果不一致",{"2":{"203":1}}],["如果不成功则留在锁池等待锁被释放后再次参与竞争",{"2":{"175":1}}],["如果不在循环中检查等待条件",{"2":{"165":1}}],["如果不调用不会阻塞",{"2":{"153":1}}],["如果不存在",{"2":{"116":1,"502":1}}],["如果不同的话",{"2":{"95":1}}],["如果不是规整的",{"2":{"8":1}}],["如果父类方法访问修饰符为private则子类中就不是重写",{"2":{"92":1}}],["如果父类中只定义了有参数的构造方法",{"2":{"70":1}}],["如果局部内部类要调用局部变量时",{"2":{"88":1}}],["如果定义为",{"2":{"66":1}}],["如果函数的形参与类中的成员数据同名",{"2":{"55":1}}],["如果永久代满了或者是超过了临界值",{"2":{"23":1,"24":1}}],["如",{"2":{"2":1,"217":1,"245":1,"246":1,"330":1,"479":1}}],["ee",{"2":{"598":1}}],["echo",{"2":{"558":1}}],["etc",{"2":{"558":2,"560":2,"563":2,"660":6}}],["email并不是我们在注册码云账号时使用的用户名和邮箱",{"2":{"528":1}}],["email",{"2":{"528":1,"598":1,"631":1}}],["empty",{"2":{"389":1,"485":1,"489":1,"502":2,"505":1,"517":5}}],["each",{"2":{"492":3}}],["evt",{"2":{"491":3,"503":5}}],["everysec",{"2":{"635":1,"637":1,"641":1}}],["every",{"2":{"491":1}}],["event",{"2":{"478":3,"505":1}}],["evict",{"2":{"371":2}}],["ephemeral=false",{"2":{"505":1}}],["ephemeralinstances",{"2":{"491":2}}],["ephemeralconsistencyservice",{"2":{"486":2}}],["ephemeral",{"2":{"475":1,"480":1,"484":7,"485":6,"491":6,"495":2}}],["eureka只提供了心跳模式的健康监测",{"2":{"506":1}}],["eureka是30秒",{"2":{"506":1}}],["eureka",{"2":{"464":1}}],["equal",{"2":{"439":1}}],["equals是判断两个变量或实例所指向的内存空间的值是不是相同",{"2":{"360":1}}],["equals方法被覆盖过",{"2":{"360":1}}],["equals",{"0":{"94":1,"95":1},"2":{"94":6,"95":5,"123":2,"126":1,"360":2,"371":2,"380":4,"382":2,"389":1,"423":1,"428":1,"430":1,"478":1,"485":2,"503":1,"514":2}}],["e1",{"2":{"425":4}}],["errcount",{"2":{"442":4}}],["errorcount",{"2":{"442":1}}],["error计数器",{"2":{"442":1}}],["errors",{"2":{"425":1}}],["error",{"0":{"284":1,"303":1},"2":{"271":1,"283":1,"284":1,"288":1,"291":1,"303":1,"308":1,"315":2,"316":2,"317":2,"320":1,"321":2,"323":1,"324":3,"325":1,"417":1,"442":5,"475":1,"479":1,"484":1,"490":6,"491":2,"492":3,"495":1,"499":2,"502":1,"505":3,"507":1,"511":1,"514":3,"517":2,"627":1,"629":1}}],["eric",{"2":{"418":1}}],["ek",{"2":{"389":4}}],["e不一定是链表的第一个元素",{"2":{"372":1}}],["e是链表的头并且e",{"2":{"372":1}}],["e可能为null",{"2":{"371":1}}],["e>",{"2":{"356":3}}],["elements",{"2":{"356":1}}],["element",{"2":{"356":1}}],["elementdata",{"0":{"356":1},"2":{"356":5}}],["else",{"2":{"208":1,"371":3,"372":8,"437":5,"439":2,"442":1,"479":1,"485":3,"491":1,"502":1,"510":1,"511":1,"514":1,"515":1,"517":1,"692":1,"694":2,"696":2,"704":1,"708":2,"713":1}}],["e",{"2":{"148":4,"150":2,"152":4,"183":1,"266":2,"297":2,"298":4,"300":5,"301":1,"310":2,"311":2,"315":4,"316":4,"317":4,"320":2,"321":4,"323":3,"324":5,"325":4,"330":1,"360":4,"371":11,"372":17,"389":8,"417":2,"422":2,"425":3,"429":3,"439":1,"479":4,"490":6,"491":2,"492":3,"504":2,"505":5,"511":2,"514":4,"517":2,"560":2,"689":1,"708":2}}],["external",{"2":{"660":1}}],["extends",{"2":{"152":1,"299":1,"311":2,"356":1,"418":2,"435":1}}],["exactlymatch",{"2":{"430":3}}],["exampleb",{"0":{"311":1},"2":{"311":2}}],["examplea",{"0":{"311":1},"2":{"311":4}}],["example2",{"2":{"99":2}}],["example",{"2":{"99":3,"324":2}}],["existbeat",{"2":{"498":3}}],["exist",{"2":{"484":1}}],["existing",{"2":{"425":1}}],["exists",{"2":{"107":1,"585":1}}],["exit",{"2":{"418":1,"422":1,"425":1}}],["ex",{"2":{"271":2,"297":3,"300":3,"416":1,"418":9,"499":3,"598":3}}],["exchangename",{"2":{"455":4,"457":5}}],["exchangetypes",{"2":{"448":1}}],["exchange的交换机",{"2":{"448":1}}],["exchange",{"2":{"447":1,"448":5,"453":1}}],["exchanger是一个用于线程间协作的工具类",{"2":{"277":1}}],["exclusive",{"2":{"230":1}}],["exceptionstotrace",{"2":{"418":1}}],["exceptionstoignore",{"2":{"418":4}}],["exceptionbelongsto",{"2":{"418":2}}],["exception",{"0":{"285":1,"303":1,"311":1},"1":{"286":1,"287":1},"2":{"183":2,"271":1,"283":1,"285":1,"287":1,"288":3,"290":1,"299":1,"301":1,"303":1,"311":4,"318":1,"320":1,"324":1,"325":1,"418":1,"422":1,"425":1,"442":1,"453":2,"479":1,"483":1,"484":2,"491":2,"499":3,"502":1,"504":2,"505":4,"514":2,"517":4,"595":1,"596":1,"597":1,"598":5,"600":1,"601":1,"602":2,"606":1,"609":1,"610":1,"611":4,"612":1,"613":1,"622":1,"704":1}}],["expire",{"2":{"585":1}}],["expectedtime",{"2":{"439":2}}],["expectedmodcount",{"2":{"356":2}}],["expect",{"2":{"230":2}}],["expr",{"2":{"46":4}}],["exec",{"2":{"564":1,"620":2,"622":1,"629":1,"656":1}}],["executor",{"0":{"257":2,"258":1},"2":{"254":1,"255":1,"257":1,"258":2,"266":4}}],["executors和threapoolexecutor创建线程池的区别",{"0":{"262":1}}],["executors类创建四种常见线程池",{"0":{"253":1},"1":{"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1}}],["executorservice",{"2":{"152":4,"254":1,"258":1,"498":1,"499":1,"514":2}}],["executors提供了一系列工厂方法用于创先线程池",{"2":{"152":1}}],["executors",{"0":{"258":1},"2":{"152":3,"254":1,"258":1,"262":2}}],["executepipelined",{"2":{"613":1}}],["execute",{"0":{"259":1},"2":{"152":1,"259":1,"266":1,"492":1,"514":1,"613":1,"622":2}}],["executionexception",{"2":{"152":1}}],["execution",{"2":{"2":3}}],["exe可以帮助我们编译",{"2":{"471":1}}],["exe就是一个进程",{"2":{"143":1}}],["exe",{"2":{"36":2}}],["enable",{"2":{"480":1,"517":1}}],["enabledefaultserializer",{"2":{"608":2}}],["enabled",{"2":{"475":1,"499":2,"502":1,"503":1,"671":1}}],["enablefeignclients",{"2":{"404":2}}],["ensure",{"2":{"431":1}}],["environment",{"2":{"563":1,"573":1,"615":1,"655":3,"670":6}}],["environment包括java虚拟机和java程序所需的核心类库等",{"2":{"36":1}}],["env",{"2":{"425":1,"517":6,"558":1}}],["enter",{"2":{"420":1,"422":1,"423":2}}],["entries",{"2":{"611":1}}],["entrancenode",{"2":{"420":1,"423":2}}],["entrypoint",{"2":{"558":1,"560":1,"563":1}}],["entryips",{"2":{"491":3}}],["entryset",{"2":{"491":1,"504":1,"505":1}}],["entry>",{"2":{"441":1}}],["entry中",{"2":{"425":1}}],["entrywithpriority",{"2":{"425":2}}],["entrywithtype",{"2":{"425":3}}],["entrytype",{"2":{"418":4,"422":1,"423":1,"425":4,"429":1,"431":1}}],["entry",{"0":{"416":1},"1":{"417":1,"418":1},"2":{"416":3,"417":3,"418":8,"420":1,"422":4,"425":9,"426":1,"427":1,"428":2,"429":3,"430":1,"431":7,"432":1,"435":1,"440":1,"441":6,"442":5,"491":5,"504":4,"505":5}}],["endindex",{"2":{"582":1}}],["endindex就是",{"2":{"582":1}}],["end",{"2":{"266":11,"602":4,"613":2}}],["enumeration",{"2":{"340":1,"345":1}}],["enum",{"2":{"46":1}}],["engine",{"2":{"2":3}}],["eden",{"2":{"33":3}}],["1分钟内至少有10000个key发生了变化",{"2":{"627":1,"629":1}}],["1小节介绍的instancecontroller中",{"2":{"517":1}}],["1小节我们讲过",{"2":{"438":1}}],["1秒多",{"2":{"613":1}}],["1秒",{"2":{"438":1}}],["1秒内",{"2":{"438":1}}],["1秒分为",{"2":{"437":1}}],["1l",{"2":{"266":2,"417":1}}],["196行",{"0":{"627":1}}],["192",{"2":{"448":1,"495":1,"560":1,"575":1,"595":1,"596":1,"597":1,"605":1,"617":1,"660":1,"671":1,"673":6,"674":1,"675":3,"696":1}}],["19",{"0":{"177":1}}],["18081",{"2":{"560":2,"563":2}}],["18080",{"2":{"560":2,"563":2}}],["18",{"0":{"176":1},"2":{"595":1}}],["17006",{"2":{"670":2}}],["17005",{"2":{"670":2}}],["17004",{"2":{"670":2}}],["17003",{"2":{"670":2}}],["17002",{"2":{"670":2}}],["17001",{"2":{"670":2,"671":1}}],["172",{"2":{"660":1,"696":2}}],["1733",{"2":{"498":1}}],["17",{"0":{"175":1},"2":{"471":1}}],["16383的范围之间的值",{"2":{"668":1}}],["16383之间的数",{"2":{"668":1}}],["16383",{"2":{"668":1}}],["163",{"2":{"598":1,"631":1}}],["168",{"2":{"448":1,"495":1,"560":1,"575":1,"595":1,"596":1,"597":1,"605":1,"617":1,"660":2,"671":1,"673":6,"674":1,"675":3,"696":1}}],["16进行异或操作",{"2":{"371":1}}],["16",{"0":{"174":1},"2":{"238":1,"241":2,"371":1,"372":2,"377":1,"428":1,"480":1,"696":2}}],["1st",{"2":{"371":1}}],["1s",{"2":{"148":1}}],["140",{"2":{"595":1,"596":1,"597":1,"605":1}}],["145",{"2":{"575":1,"595":1,"596":1,"597":1,"605":1,"617":1,"671":1,"673":6,"674":1,"675":3,"696":1}}],["14",{"0":{"128":1,"172":1,"330":1,"388":1},"2":{"89":2,"643":1}}],["15分钟内至少有1个key发生了变化",{"2":{"627":1,"629":1}}],["150",{"2":{"495":1}}],["15",{"0":{"129":1,"173":1,"389":1},"2":{"33":2,"245":1,"585":2,"598":1,"643":1}}],["136",{"2":{"589":1}}],["13577889900",{"2":{"580":1}}],["138",{"2":{"448":1,"560":1}}],["1328",{"2":{"147":1}}],["13",{"0":{"33":1,"127":1,"171":1,"329":1,"357":1,"387":1},"2":{"89":2,"643":1}}],["121",{"2":{"694":1}}],["123456",{"2":{"660":2}}],["123\\t",{"2":{"448":1}}],["123",{"2":{"351":2,"563":1}}],["128",{"2":{"133":2,"575":1,"617":1,"671":1,"673":6,"674":1,"675":3,"696":1}}],["128到127之间",{"2":{"133":1}}],["127相等吗",{"0":{"133":1}}],["127",{"0":{"133":1},"2":{"133":2,"589":1,"631":3,"643":8}}],["12",{"0":{"32":1,"126":1,"170":1,"328":1,"356":1,"386":1},"2":{"89":2,"266":20,"407":1,"595":2,"643":1}}],["112",{"2":{"660":2}}],["111",{"2":{"694":1}}],["11155",{"2":{"612":1}}],["1111",{"2":{"600":1,"601":1,"611":2,"612":1}}],["11",{"0":{"31":1,"125":1,"169":1,"313":1,"327":1,"355":1,"385":1},"2":{"407":3,"558":1,"611":2,"612":1,"643":1,"704":1}}],["10分时",{"2":{"701":1}}],["10的记录",{"2":{"692":1,"696":1}}],["10m只用了2次",{"2":{"680":1}}],["10m",{"2":{"680":1}}],["101",{"2":{"417":1}}],["101l",{"2":{"417":1}}],["10088",{"2":{"688":3}}],["1002",{"2":{"598":5,"688":1}}],["1001",{"2":{"596":4,"611":3,"688":6,"704":2,"708":2,"713":2}}],["100之间的前两位元素名称及分数",{"2":{"584":1}}],["100之间的所有元素名称及分数",{"2":{"584":1}}],["100\\t",{"2":{"448":1}}],["100",{"2":{"266":2,"560":1,"584":2,"598":1,"635":1,"641":1,"644":1}}],["100000000l",{"2":{"696":1}}],["1000000",{"2":{"611":1}}],["10000",{"2":{"602":2,"611":1,"613":1,"627":1,"629":1,"660":2}}],["1000ms",{"2":{"437":1}}],["1000",{"2":{"148":3,"150":1,"152":1,"439":1}}],["10",{"0":{"30":1,"78":1,"124":1,"168":1,"208":1,"312":1,"326":1,"342":1,"354":1,"384":1,"440":1,"441":1,"442":1},"1":{"441":1,"442":1},"2":{"57":2,"99":3,"184":2,"266":3,"310":2,"407":8,"435":1,"448":1,"584":5,"605":2,"617":2,"627":1,"629":1,"643":2,"692":1,"696":3,"704":1}}],["1",{"0":{"2":1,"8":1,"12":1,"15":1,"17":1,"26":1,"36":1,"44":1,"45":2,"46":1,"47":1,"48":3,"53":1,"59":1,"61":1,"64":1,"69":1,"80":1,"82":1,"91":1,"94":1,"98":1,"102":1,"105":1,"109":1,"114":1,"115":2,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"131":1,"136":1,"137":2,"138":1,"139":1,"140":1,"141":1,"143":1,"152":1,"159":1,"190":1,"191":2,"192":1,"193":1,"195":1,"198":1,"199":2,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"210":1,"217":1,"219":1,"220":2,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"229":1,"232":1,"234":1,"236":1,"237":2,"238":1,"239":1,"240":1,"241":1,"243":1,"245":1,"248":1,"251":1,"253":1,"254":2,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"262":1,"270":1,"273":1,"274":2,"276":1,"281":1,"283":1,"286":1,"291":1,"296":1,"303":1,"315":1,"316":2,"317":1,"333":1,"344":1,"345":2,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"359":1,"363":1,"366":1,"368":1,"374":1,"391":1,"397":1,"403":1,"407":1,"414":2,"415":1,"416":1,"417":2,"418":1,"419":1,"420":2,"421":1,"422":1,"423":1,"425":1,"433":1,"435":1,"437":1,"441":1,"449":1,"459":1,"466":1,"470":1,"475":1,"477":1,"483":1,"488":1,"496":1,"497":2,"498":1,"499":1,"500":1,"502":1,"508":1,"509":2,"510":3,"511":2,"512":2,"513":1,"514":2,"515":1,"517":1,"522":1,"525":1,"528":1,"530":1,"535":1,"541":1,"546":1,"552":1,"554":1,"555":1,"562":1,"567":1,"570":1,"572":1,"575":1,"579":1,"588":1,"589":2,"590":1,"591":1,"592":1,"594":1,"600":1,"604":1,"608":1,"615":1,"619":1,"624":1,"627":1,"630":1,"635":1,"640":1,"646":1,"650":1,"652":1,"655":1,"658":1,"660":1,"664":1,"668":1,"670":1,"677":1,"682":1,"691":1,"692":2,"693":1,"694":2,"695":1,"696":1,"698":1,"701":1,"704":1,"706":1,"708":1,"712":1,"716":1},"1":{"45":1,"46":1,"47":1,"48":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"137":1,"138":1,"139":1,"140":1,"141":1,"191":1,"192":1,"193":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"237":1,"238":1,"239":1,"240":1,"241":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"274":1,"316":1,"317":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"417":1,"418":1,"420":1,"421":1,"422":2,"423":2,"489":1,"490":1,"491":1,"497":1,"498":1,"499":1,"500":1,"509":1,"510":3,"511":3,"512":3,"513":1,"514":2,"515":2,"589":1,"590":1,"591":1,"592":1,"692":1,"693":1,"694":2,"695":2,"696":2},"2":{"22":1,"33":3,"48":7,"51":1,"82":1,"83":1,"84":1,"99":2,"106":1,"111":1,"112":1,"148":5,"150":6,"152":12,"161":1,"163":1,"170":1,"177":1,"181":1,"184":2,"185":1,"193":1,"200":2,"204":1,"206":1,"214":2,"220":1,"221":1,"223":1,"225":1,"226":1,"232":2,"234":1,"237":1,"245":6,"254":1,"266":24,"270":1,"330":2,"349":1,"353":1,"366":2,"371":5,"372":3,"376":1,"377":2,"379":1,"383":3,"384":1,"389":2,"417":3,"418":1,"421":2,"423":1,"425":2,"430":1,"435":2,"437":3,"438":1,"439":1,"441":1,"442":4,"445":1,"446":1,"448":1,"449":1,"451":2,"453":1,"455":1,"457":1,"468":1,"472":1,"484":2,"495":1,"505":1,"510":4,"511":1,"514":1,"517":1,"525":1,"533":1,"560":1,"580":2,"581":1,"582":2,"584":8,"585":1,"589":1,"597":1,"598":5,"601":1,"605":1,"606":1,"611":1,"627":1,"629":2,"631":4,"643":10,"660":3,"670":1,"673":2,"686":1,"688":4,"695":4,"696":3,"704":1,"708":1}}],["一篇文章的阅读数量",{"2":{"684":1}}],["一天之内",{"2":{"649":1}}],["一路默认下一步即可",{"2":{"576":1}}],["一是时间区间窗口的qps计数功能",{"2":{"436":1}}],["一种最常见的错误代码如下",{"2":{"347":1}}],["一连串调用",{"2":{"330":1}}],["一律要求进行空指针判断",{"2":{"330":1}}],["一定要保证系统的高可用",{"2":{"649":1}}],["一定要注意手动回滚事务",{"2":{"330":1}}],["一定延迟后执行",{"2":{"505":1}}],["一定会创建一个service对象",{"2":{"504":1}}],["一定会执行exit方法",{"2":{"442":1}}],["一定程度上降低了效率",{"2":{"28":1}}],["一书",{"2":{"311":1}}],["一直尝试去拿锁",{"2":{"709":1}}],["一直等到执行成功",{"2":{"271":1}}],["一直等到该方法执行完成",{"2":{"270":1}}],["一直在累加直到值等于",{"2":{"245":1}}],["一不满足",{"2":{"225":1}}],["一样",{"2":{"695":1}}],["一样的关键字",{"2":{"208":1}}],["一样吗",{"0":{"122":1}}],["一致性",{"2":{"619":1}}],["一致性以及对于任何非null的引用值x",{"2":{"382":1}}],["一致",{"2":{"203":1}}],["一旦发现冲突就在链表中做进一步的对比",{"2":{"366":1}}],["一旦发生此类异常",{"2":{"288":1}}],["一旦这类错误发生",{"2":{"303":1}}],["一旦方法抛出异常",{"2":{"290":1}}],["一旦方法或者代码块被",{"2":{"180":1}}],["一旦垃圾回收器准备释放对象占用的内存",{"2":{"193":1}}],["一旦线程的中断状态被置为",{"2":{"172":1}}],["一旦我们创建一个线程并启动它",{"2":{"162":1}}],["一旦所有用户线程都结束运行",{"2":{"146":1}}],["一次提交多个文件",{"2":{"538":1}}],["一次锁住整张表来保证线程安全",{"2":{"241":1}}],["一次",{"2":{"230":1}}],["一次性申请所有的资源",{"2":{"150":1}}],["一次编译后",{"2":{"36":1}}],["一起结束工作",{"2":{"146":2}}],["一些多算法场合",{"2":{"87":1}}],["一根绳子可以不系气球",{"2":{"67":1}}],["一万个不乐意",{"2":{"62":1}}],["一步一步的实现",{"2":{"59":1}}],["一个jvm都有独立的锁",{"2":{"686":1}}],["一个仓库中可以有多个分支",{"2":{"548":1}}],["一个仓库可以有多个分支",{"2":{"543":1}}],["一个本地仓库可以关联多个远程仓库",{"2":{"542":1}}],["一个项目可以有多个分支",{"2":{"523":1}}],["一个服务有可以分为不同的集群",{"2":{"494":1}}],["一个服务下可以有多个集群",{"2":{"474":1}}],["一个集群中可能包含多个实例",{"2":{"474":1}}],["一个组内可以有多个服务",{"2":{"474":1}}],["一个队列对应多个消费者",{"2":{"451":1}}],["一个队列和一台咖啡机",{"2":{"140":1}}],["一个消费者和一个队列",{"2":{"449":1}}],["一个消费者",{"0":{"449":1}}],["一个生产者",{"0":{"449":1,"452":1},"1":{"453":1},"2":{"449":1}}],["一个资源只会有一个processorslotchain",{"2":{"425":1}}],["一个资源不管出现在多少链路中",{"2":{"415":1}}],["一个资源出现在不同链路中时",{"2":{"415":1}}],["一个数和0异或不变",{"2":{"371":1}}],["一个指向后一个元素",{"2":{"352":1}}],["一个指向前一个元素",{"2":{"352":1}}],["一个无序",{"2":{"338":1,"357":1}}],["一个无参构造函数和一个带有详细描述信息的构造函数",{"2":{"299":1}}],["一个有序",{"2":{"338":1,"357":1}}],["一个类中有多个public方法",{"2":{"330":1}}],["一个类的构造方法的作用是什么",{"0":{"72":1}}],["一个团队必须要制定出一个最佳实践和规则",{"2":{"329":1}}],["一个很好的例子是",{"2":{"320":1}}],["一个常见的错误就是在try块的最后关闭资源",{"2":{"315":1}}],["一个简单的线程池demo",{"0":{"266":1}}],["一个不存储元素的阻塞队列",{"2":{"251":1}}],["一个使用优先级队列实现的无界阻塞队列",{"2":{"251":1}}],["一个支持优先级排序的无界阻塞队列",{"2":{"251":1}}],["一个由链表结构组成的双向阻塞队列",{"2":{"251":1}}],["一个由链表结构组成的无界阻塞队列",{"2":{"251":1}}],["一个由链表结构组成的有界阻塞队列",{"2":{"251":1}}],["一个由数组结构组成的有界阻塞队列",{"2":{"251":1}}],["一个或者多个线程因为种种原因无法获得所需要的资源",{"2":{"226":1}}],["一个新的",{"2":{"182":1}}],["一个",{"2":{"155":1,"157":1,"389":2}}],["一个进程因请求资源而阻塞时",{"2":{"225":1}}],["一个进程崩溃后",{"2":{"144":1}}],["一个进程可以运行多个线程",{"2":{"143":1}}],["一个进程可以有多个线程",{"2":{"143":1}}],["一个进程至少有一个线程",{"2":{"143":1}}],["一个运行的xx",{"2":{"143":1}}],["一个在内存中运行的应用程序",{"2":{"143":1}}],["一个线程运行时发生异常会怎样",{"0":{"187":1}}],["一个线程完全可以持有很多锁",{"2":{"166":1}}],["一个线程",{"2":{"149":1}}],["一个线程必须等待的时候",{"2":{"141":1}}],["一个线程对共享变量的修改",{"2":{"139":1}}],["一个是数组",{"2":{"366":1}}],["一个是用new创建在堆上的对象",{"2":{"123":1}}],["一个是静态区的",{"2":{"123":1}}],["一个方法用",{"2":{"306":1}}],["一个方法出现编译时异常",{"2":{"291":1}}],["一个方法不能让对象参数引用一个新的对象",{"2":{"99":1}}],["一个方法不能修改一个基本数据类型的参数",{"2":{"99":1}}],["一个方法可以改变一个对象参数的状态",{"2":{"99":1}}],["一个方法可以修改传递引用所对应的变量值",{"2":{"99":1}}],["一个内部类对象可以访问创建它的外部类对象的内容",{"2":{"86":1}}],["一个对象才是不可变的",{"2":{"217":1}}],["一个对象可以有n个引用指向它",{"2":{"67":1}}],["一个对象引用可以指向0个或1个对象",{"2":{"67":1}}],["一个对象是否可回收的",{"2":{"54":1}}],["一个模块对于拓展是开放的",{"2":{"62":1}}],["一个引用变量到底会指向哪个类的实例对象",{"2":{"60":1}}],["一个程序中可以有多个类",{"2":{"39":1}}],["一般这种是人为攻击较多",{"2":{"691":1}}],["一般都是null",{"2":{"478":1}}],["一般用于java应用",{"2":{"464":2}}],["一般用来存放一些关闭资源的代码",{"2":{"54":1,"307":1}}],["一般我们需要对一个集合使用自定义排序时",{"2":{"393":1}}],["一般翻译为",{"2":{"374":1}}],["一般不允许一个线程在遍历",{"2":{"347":1}}],["一般调用一个或多个可能抛出异常的方法",{"2":{"315":1}}],["一般来讲",{"2":{"304":1}}],["一般来说",{"2":{"176":1,"184":1,"230":1}}],["一般是controller方法的",{"2":{"422":1}}],["一般是c写的",{"2":{"193":1}}],["一般是由程序逻辑错误引起的",{"2":{"286":1}}],["一般是新生代和老年代",{"2":{"25":1}}],["一般无需设置线程优先级",{"2":{"184":1}}],["一般情况下",{"2":{"177":1,"652":1}}],["一般",{"2":{"94":1}}],["一般指的就是方法",{"2":{"69":1}}],["一般使用标记整理的执行算法",{"2":{"33":1}}],["一般包括年轻代",{"2":{"29":1}}],["一般有两种方法来判断",{"2":{"22":1}}],["一般堆大小远远大于栈",{"2":{"5":1}}],["一",{"0":{"1":1,"35":1,"135":1,"280":1,"332":1,"400":1,"413":1,"444":1,"465":1,"521":1,"557":1,"566":1},"1":{"2":1,"3":1,"4":1,"5":1,"6":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"445":1,"446":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"522":1,"523":1,"567":1,"568":1},"2":{"159":1,"177":1}}],["jupiter",{"2":{"606":1,"611":1,"617":1,"675":1,"704":1}}],["junit",{"2":{"598":1,"606":1,"611":1,"617":1,"675":1,"704":1}}],["jedis的管道操作",{"0":{"602":1}}],["jedis如何保存一个java对象",{"0":{"599":1},"1":{"600":1,"601":1}}],["jedistest",{"2":{"598":1}}],["jedispoolconfig",{"2":{"598":1}}],["jedispoolutilstest",{"2":{"597":1}}],["jedispoolutils的使用",{"2":{"597":1}}],["jedispoolutils",{"2":{"597":2,"598":6,"600":1,"601":1,"602":2}}],["jedispool工具类封装",{"0":{"597":1}}],["jedispool",{"2":{"596":5,"597":6,"598":1}}],["jedispooltest",{"2":{"596":1}}],["jedispool的使用",{"0":{"596":1}}],["jedis方法就是redis的命令",{"2":{"594":1}}],["jedis",{"0":{"593":1},"1":{"594":1,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1},"2":{"577":1,"595":6,"596":6,"597":8,"598":40,"600":5,"601":5,"602":8,"605":1,"617":1}}],["json",{"0":{"600":1},"2":{"514":3,"515":3,"600":2}}],["jsonnode",{"2":{"499":1,"500":1}}],["json格式字符串",{"2":{"495":1}}],["jstack",{"2":{"147":1}}],["jdbc",{"2":{"245":1}}],["jdkserializationredisserializer",{"2":{"608":1}}],["jdk7",{"2":{"251":1}}],["jdk8",{"2":{"238":1}}],["jdk1",{"0":{"236":1,"368":1,"369":1,"370":2,"378":1},"1":{"237":1,"238":1,"239":1,"240":1,"241":1},"2":{"199":1,"237":1,"270":2,"339":2,"368":1,"369":1,"370":1,"378":1,"385":1,"387":1,"388":7,"389":2}}],["jdk根据二进制代码许可协议获得许可",{"2":{"42":1}}],["jdk不会为即将发布的版本提供长期支持",{"2":{"42":1}}],["jdk与openjdk相比提供了更好的性能",{"2":{"42":1}}],["jdk就可以解决问题",{"2":{"42":1}}],["jdk有更多的类和一些错误修复",{"2":{"42":1}}],["jdk的代码几乎相同",{"2":{"42":1}}],["jdk是openjdk的一个实现",{"2":{"42":1}}],["jdk版本将每三年发布一次",{"2":{"42":1}}],["jdk关系图",{"2":{"36":1}}],["jdk",{"0":{"42":1,"102":1},"2":{"36":1,"42":2,"139":1,"201":1,"223":1,"237":1}}],["join",{"2":{"159":2,"510":2}}],["j=",{"2":{"57":1}}],["j++",{"2":{"57":2,"85":1}}],["j",{"2":{"57":9,"85":2,"372":7}}],["jack",{"2":{"598":2,"611":2}}],["jacksonutils",{"2":{"480":1,"485":1,"499":2,"500":2,"502":2,"504":1,"514":1,"515":1,"517":3}}],["jackson2jsonmessageconverter",{"2":{"448":1}}],["jackson",{"2":{"448":1}}],["jar",{"2":{"36":1,"477":1,"558":4}}],["java连接redis集群",{"0":{"675":1}}],["java代码实现redis事务",{"0":{"622":1}}],["java66",{"2":{"597":1,"598":2,"606":1,"611":1,"617":1,"675":1,"704":1}}],["java客户端",{"0":{"577":1}}],["java类",{"2":{"522":1}}],["java类里面解析xml或properties里面的内容",{"2":{"111":1}}],["javavoid",{"2":{"430":1,"435":1,"440":1}}],["javaelse",{"2":{"389":1}}],["javafinal",{"2":{"372":1}}],["javafor",{"2":{"347":1}}],["javaqueue",{"2":{"364":1}}],["java提供了集中blockingqueue的实现",{"2":{"363":1}}],["java提供threadlocal类来支持线程局部变量",{"2":{"245":1}}],["javalist",{"2":{"342":1,"346":1,"355":1}}],["javalock",{"2":{"183":1}}],["java集合的快速失败机制",{"0":{"341":1}}],["java集合框架",{"0":{"331":1},"1":{"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1}}],["javadoc",{"2":{"319":1}}],["java常见异常有哪些",{"0":{"313":1}}],["javatry",{"2":{"311":1,"320":1,"324":1}}],["javathread",{"2":{"148":1,"150":1,"152":1,"245":1}}],["javareadfile",{"2":{"300":1}}],["java异常常见面试题",{"0":{"302":1},"1":{"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1}}],["java异常处理最佳实践",{"0":{"314":1},"1":{"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1}}],["java异常处理",{"0":{"290":1},"1":{"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1}}],["java异常关键字",{"0":{"289":1}}],["java异常架构",{"0":{"282":1},"1":{"283":1,"284":1,"285":1,"286":1,"287":1,"288":1}}],["java异常机制可以使程序中异常处理代码和正常业务代码分离",{"2":{"281":1}}],["java异常是java提供的一种识别及响应错误的一致性机制",{"2":{"281":1}}],["java异常简介",{"0":{"281":1}}],["java异常认知",{"0":{"280":1},"1":{"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1}}],["java异常",{"0":{"279":1},"1":{"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1}}],["javaif",{"2":{"389":1}}],["javaiterator",{"2":{"347":1}}],["javaimport",{"2":{"266":2}}],["javaisheldexclusively",{"2":{"230":1}}],["javapackage",{"2":{"597":1,"598":1,"606":1,"611":1,"617":1,"675":1,"704":1}}],["javapushservice",{"2":{"518":1}}],["javapublic",{"2":{"82":1,"83":1,"84":2,"85":1,"88":1,"89":1,"94":1,"99":3,"112":1,"133":1,"148":1,"152":4,"200":1,"201":1,"214":1,"245":1,"299":1,"310":2,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"323":2,"324":1,"325":1,"356":1,"371":1,"417":1,"423":1,"425":1,"431":1,"435":3,"437":2,"438":1,"448":1,"478":2,"480":1,"485":1,"487":1,"489":1,"491":2,"492":1,"498":1,"500":1,"503":1,"504":1,"505":4,"511":2,"512":1,"514":1,"515":1,"517":1}}],["javaprotected",{"2":{"423":1,"441":2,"478":1,"492":1}}],["javaprivate",{"2":{"230":1,"296":1,"297":1,"298":2,"300":1,"301":1,"330":1,"356":2,"360":1,"425":1,"435":1,"438":1,"442":1,"485":1,"486":1,"505":2}}],["javapool",{"2":{"266":1}}],["javap",{"2":{"201":1}}],["java内存模型",{"0":{"190":1},"1":{"191":1,"192":1,"193":1}}],["java内存区域",{"0":{"1":1},"1":{"2":1,"3":1,"4":1,"5":1,"6":1}}],["java应用jar包",{"2":{"560":1}}],["java应用的",{"2":{"186":1}}],["java应用程序与小程序之间有那些差别",{"0":{"40":1}}],["java虚拟机采用抢占式调度模型",{"2":{"160":1}}],["java虚拟机实现平台无关性",{"2":{"37":1}}],["java线程任务开始执行",{"2":{"152":1}}],["javamain",{"2":{"152":2,"154":1}}],["java并发编程",{"0":{"134":1},"1":{"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1}}],["javastatic",{"2":{"377":1,"430":1}}],["javastring",{"2":{"120":1,"123":1}}],["javasynchronized",{"2":{"165":1}}],["javascript中",{"2":{"125":1}}],["javas",{"2":{"120":1}}],["java获取反射的三种方法",{"0":{"112":1}}],["java反射机制是在运行状态中",{"2":{"109":1}}],["java和javax有什么区别",{"0":{"103":1}}],["java和c++的区别",{"0":{"41":1}}],["java包",{"0":{"101":1},"1":{"102":1,"103":1}}],["javax",{"2":{"99":1,"103":4}}],["java17",{"2":{"324":1}}],["java1",{"2":{"99":1,"223":1,"240":1}}],["javaapi",{"2":{"103":1}}],["javaa",{"2":{"99":1}}],["java局部变量",{"2":{"89":1}}],["javanew",{"2":{"85":1,"150":1}}],["javaouter",{"2":{"82":1,"83":1}}],["java8中接口中引入默认方法和静态方法",{"2":{"64":1}}],["java8中已经移除了永久代",{"2":{"24":1}}],["java实现多态有三个必要条件",{"2":{"61":1}}],["java\\t",{"2":{"57":2,"448":3,"449":2,"453":1,"455":1,"457":1}}],["java编码方案和特点",{"0":{"49":1}}],["java5",{"2":{"46":1,"240":1}}],["java基本数据类型图",{"2":{"45":1}}],["java基础语法",{"0":{"43":1},"1":{"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1}}],["java基础",{"0":{"34":1},"1":{"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1}}],["java有哪些数据类型",{"0":{"45":1}}],["java有自动内存管理机制",{"2":{"41":1}}],["java的类是单继承的",{"2":{"41":1}}],["java不提供指针来直接访问内存",{"2":{"41":1}}],["java源代码",{"2":{"38":1}}],["java源代码经过虚拟机编译器编译后产生的文件",{"2":{"38":1}}],["java源程序经过编译器编译后变成字节码",{"2":{"38":1}}],["java中每一个对象都可以作为锁",{"2":{"208":1}}],["java中垃圾回收有什么目的",{"0":{"191":1}}],["java中线程通信协作的最常见的两种方式",{"2":{"177":1}}],["java中",{"2":{"50":1,"95":1,"166":1,"221":1}}],["java中引入了虚拟机的概念",{"2":{"38":1}}],["java中的对象不再有",{"2":{"19":1}}],["javacaught",{"2":{"311":1}}],["javacatch",{"2":{"300":1}}],["javaclass",{"2":{"311":1}}],["javac",{"2":{"36":1}}],["javac命令",{"2":{"2":1}}],["java语言是如何实现多态的",{"0":{"61":1}}],["java语言是强类型语言",{"2":{"45":1}}],["java语言采用unicode编码标准",{"2":{"49":1}}],["java语言通过字节码的方式",{"2":{"38":1}}],["java语言的强类型机制",{"2":{"37":1}}],["java语言的语法与c语言和c++语言很接近",{"2":{"37":1}}],["java语言诞生本身就是为简化网络编程设计的",{"2":{"37":1}}],["java语言有哪些特点",{"0":{"37":1}}],["java语言理解",{"0":{"35":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1}}],["java语言最显著的特点就是引入了垃圾回收机制",{"2":{"19":1}}],["java堆并行收集器",{"2":{"30":1}}],["java堆中划分出一块内存来作为句柄池",{"2":{"12":1}}],["java导致内存泄露的原因很明确",{"2":{"15":1}}],["java也还是存在着内存泄漏的情况",{"2":{"15":1}}],["java是有gc垃圾回收机制的",{"2":{"15":1}}],["java会存在内存泄漏吗",{"0":{"15":1}}],["java程序设计语言对对象采用的不是引用调用",{"2":{"99":1}}],["java程序设计语言总是采用按值调用",{"2":{"99":1}}],["java程序在执行子类的构造方法之前",{"2":{"70":1}}],["java程序无须重新编译便可在多种不同的计算机上运行",{"2":{"38":1}}],["java程序是通过java虚拟机在系统平台上运行的",{"2":{"36":1}}],["java程序需要运行在虚拟机上",{"2":{"36":1}}],["java程序需要通过",{"2":{"11":1}}],["java程序运行机制步骤",{"2":{"2":1}}],["java文件通过编译器变成了",{"2":{"2":1}}],["java命令",{"2":{"2":1}}],["java",{"0":{"0":1,"21":1,"99":1,"105":1,"139":1,"160":1,"172":1,"174":1,"177":1,"183":1,"186":2,"188":1,"211":1,"220":1,"238":1,"240":1,"258":1,"260":1,"270":1,"274":1,"317":1,"349":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1},"2":{"2":4,"3":11,"8":1,"9":2,"10":1,"18":2,"36":3,"46":3,"50":1,"57":1,"60":1,"86":1,"95":1,"98":1,"102":6,"103":3,"105":2,"106":2,"117":3,"119":1,"120":1,"122":1,"124":1,"125":1,"132":4,"155":1,"160":1,"162":1,"166":1,"180":2,"183":2,"184":1,"186":1,"199":5,"203":1,"208":1,"210":2,"211":1,"213":1,"217":1,"221":3,"222":2,"225":1,"226":1,"230":1,"245":1,"246":2,"251":2,"254":2,"263":1,"266":4,"270":3,"271":1,"283":1,"286":3,"287":1,"288":1,"290":3,"301":1,"303":1,"304":2,"306":1,"307":1,"310":1,"311":1,"313":15,"314":1,"317":1,"320":1,"324":10,"327":2,"328":2,"330":1,"338":1,"342":1,"345":1,"347":1,"349":2,"351":1,"356":3,"363":1,"393":1,"394":1,"395":1,"401":1,"404":1,"405":1,"416":1,"418":1,"420":1,"422":1,"425":1,"426":1,"427":1,"428":1,"429":2,"430":1,"431":1,"432":1,"435":1,"437":2,"438":4,"439":1,"440":1,"441":1,"442":1,"448":1,"465":1,"472":4,"479":1,"480":1,"483":1,"484":2,"486":1,"489":1,"490":2,"491":1,"496":1,"499":1,"502":1,"503":1,"504":1,"505":4,"510":1,"514":1,"517":2,"558":1,"595":1,"596":1,"597":1,"598":4,"600":1,"601":1,"602":2,"606":1,"608":1,"609":2,"610":1,"611":7,"612":1,"613":1,"622":1,"692":1,"694":1,"696":1,"708":1,"713":1}}],["jre",{"2":{"36":2,"558":1}}],["jre和jdk的关系",{"0":{"36":1}}],["jvm会把该线程放入等待队列",{"2":{"159":1}}],["jvm只为静态变量分配一次内存空间",{"2":{"74":1}}],["jvm中解释器",{"2":{"38":1}}],["jvm中的永久代中会发生垃圾回收吗",{"0":{"24":1}}],["jvm可执行的java字节码",{"2":{"38":1}}],["jvm包含两个子系统和两个组件",{"2":{"2":1}}],["jvm",{"0":{"2":1,"3":1,"25":1,"30":1,"36":1,"305":1},"1":{"26":1,"27":1,"28":1,"29":1},"2":{"2":1,"11":2,"31":1,"36":2,"38":1,"110":1,"116":1,"146":6,"163":1,"186":1,"187":1,"188":1,"199":1,"200":2,"203":1,"254":1,"270":1,"271":1,"284":2,"286":1,"304":1,"305":7,"308":2,"322":1}}],["jvm深入理解",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1}}]],"serializationVersion":2}';export{e as default};
