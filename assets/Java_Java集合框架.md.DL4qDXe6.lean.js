import{_ as t,c as e,a2 as i,o as l}from"./chunks/framework.DPuwY6B9.js";const u=JSON.parse('{"title":"Java集合框架","description":"","frontmatter":{},"headers":[],"relativePath":"Java/Java集合框架.md","filePath":"Java/Java集合框架.md"}'),o={name:"Java/Java集合框架.md"};function r(s,a,n,p,h,c){return l(),e("div",null,a[0]||(a[0]=[i('<h1 id="java集合框架" tabindex="-1">Java集合框架 <a class="header-anchor" href="#java集合框架" aria-label="Permalink to &quot;Java集合框架&quot;">​</a></h1><h2 id="一、集合框架理解" tabindex="-1">一、集合框架理解 <a class="header-anchor" href="#一、集合框架理解" aria-label="Permalink to &quot;一、集合框架理解&quot;">​</a></h2><h3 id="_1-什么是集合" tabindex="-1">1 什么是集合 <a class="header-anchor" href="#_1-什么是集合" aria-label="Permalink to &quot;1 什么是集合&quot;">​</a></h3><p><strong>集合框架</strong>：用于存储数据的容器。</p><p>集合框架是为表示和操作集合而规定的一种统一的标准的体系结构。</p><p>任何集合框架都包含三大块内容：对外的接口、接口的实现和对集合运算的算法。</p><p><strong>接口</strong>：表示集合的抽象数据类型。接口允许我们操作集合时不必关注具体实现，从而达到“多态”。在面向对象编程语言中，接口通常用来形成规范。</p><p><strong>实现</strong>：集合接口的具体实现，是重用性很高的数据结构。</p><p><strong>算法</strong>：在一个实现了某个集合框架中的接口的对象身上完成某种有用的计算的方法，例如查找、排序等。这些算法通常是多态的，因为相同的方法可以在同一个接口被多个类实现时有不同的表现。事实上，算法是可复用的函数。</p><p>它减少了程序设计的辛劳。</p><p>集合框架通过提供有用的数据结构和算法使你能集中注意力于你的程序的重要部分上，而不是为了让程序能正常运转而将注意力于低层设计上。</p><p>通过这些在无关API之间的简易的互用性，使你免除了为改编对象或转换代码以便联合这些API而去写大量的代码。 它提高了程序速度和质量。</p><h3 id="_2-集合的特点" tabindex="-1">2 集合的特点 <a class="header-anchor" href="#_2-集合的特点" aria-label="Permalink to &quot;2 集合的特点&quot;">​</a></h3><p>集合的特点主要有如下两点：</p><ul><li>对象封装数据，对象多了也需要存储。集合用于存储对象。</li><li>对象的个数确定可以使用数组，对象的个数不确定的可以用集合。因为集合是可变长度的。</li></ul><h3 id="_3-集合和数组的区别" tabindex="-1">3 集合和数组的区别 <a class="header-anchor" href="#_3-集合和数组的区别" aria-label="Permalink to &quot;3 集合和数组的区别&quot;">​</a></h3><ul><li>数组是固定长度的；集合可变长度的。</li><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</li></ul><p><strong>数据结构</strong>：就是容器中存储数据的方式。</p><p>对于集合容器，有很多种。因为每一个容器的自身特点不同，其实原理在于每个容器的内部数据结构不同。</p><p>集合容器在不断向上抽取过程中，出现了集合体系。<strong>在使用一个体系的原则：参阅顶层内容。建立底层对象。</strong></p><h3 id="_4-使用集合框架的好处" tabindex="-1">4 使用集合框架的好处 <a class="header-anchor" href="#_4-使用集合框架的好处" aria-label="Permalink to &quot;4 使用集合框架的好处&quot;">​</a></h3><ol><li>容量自增长；</li><li>提供了高性能的数据结构和算法，使编码更轻松，提高了程序速度和质量；</li><li>允许不同 API 之间的互操作，API之间可以来回传递集合；</li><li>可以方便地扩展或改写集合，提高代码复用性和可操作性。</li><li>通过使用JDK自带的集合类，可以降低代码维护和学习新API成本。</li></ol><h3 id="_5-常用的集合类有哪些" tabindex="-1">5 常用的集合类有哪些？ <a class="header-anchor" href="#_5-常用的集合类有哪些" aria-label="Permalink to &quot;5 常用的集合类有哪些？&quot;">​</a></h3><p>Map接口和Collection接口是所有集合框架的父接口：</p><ol><li>Collection接口的子接口包括：Set接口和List接口</li><li>Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等</li><li>Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等</li><li>List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等</li></ol><h3 id="_6-list-set-map三者的区别-list、set、map-是否继承自-collection-接口-list、map、set-三个接口存取元素时-各有什么特点" tabindex="-1">6 List，Set，Map三者的区别？List、Set、Map 是否继承自 Collection 接口？List、Map、Set 三个接口存取元素时，各有什么特点？ <a class="header-anchor" href="#_6-list-set-map三者的区别-list、set、map-是否继承自-collection-接口-list、map、set-三个接口存取元素时-各有什么特点" aria-label="Permalink to &quot;6 List，Set，Map三者的区别？List、Set、Map 是否继承自 Collection 接口？List、Map、Set 三个接口存取元素时，各有什么特点？&quot;">​</a></h3>',26)]))}const _=t(o,[["render",r]]);export{u as __pageData,_ as default};
